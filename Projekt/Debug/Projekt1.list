
Projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800d010  0800d010  0001d010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d614  0800d614  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d614  0800d614  0001d614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d61c  0800d61c  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800d624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  2000022c  0800d850  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800d850  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197fb  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c28  00000000  00000000  00039a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  0003d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003ec80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfc0  00000000  00000000  000400f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f29  00000000  00000000  0006c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001061ae  00000000  00000000  00085fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c9  00000000  00000000  0018c187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b4  00000000  00000000  0018c250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cff4 	.word	0x0800cff4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800cff4 	.word	0x0800cff4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <software_delay>:
/**
* Software busy delay
* @param[in] tick Number of ticks to wait
*/
static void software_delay(uint32_t tick)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	uint32_t delay;
	while(tick-->0)
 80009e4:	e00c      	b.n	8000a00 <software_delay+0x24>
	{
		for(delay=5; delay>0; delay--){
 80009e6:	2305      	movs	r3, #5
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e006      	b.n	80009fa <software_delay+0x1e>
			asm("nop");
 80009ec:	bf00      	nop
			asm("nop");
 80009ee:	bf00      	nop
			asm("nop");
 80009f0:	bf00      	nop
			asm("nop");
 80009f2:	bf00      	nop
		for(delay=5; delay>0; delay--){
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f5      	bne.n	80009ec <software_delay+0x10>
	while(tick-->0)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ed      	bne.n	80009e6 <software_delay+0xa>
		}
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LCD_init>:
/**
* Initialization of LCD display in 4 bits mode
* @details Before use initialize GPIOs
*/
void LCD_init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
	software_delay(1000000);
 8000a1e:	4849      	ldr	r0, [pc, #292]	; (8000b44 <LCD_init+0x12c>)
 8000a20:	f7ff ffdc 	bl	80009dc <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f89d 	bl	8000b68 <LCD_send_4bits>
 8000a2e:	4845      	ldr	r0, [pc, #276]	; (8000b44 <LCD_init+0x12c>)
 8000a30:	f7ff ffd4 	bl	80009dc <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(1000000);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f895 	bl	8000b68 <LCD_send_4bits>
 8000a3e:	4841      	ldr	r0, [pc, #260]	; (8000b44 <LCD_init+0x12c>)
 8000a40:	f7ff ffcc 	bl	80009dc <software_delay>
	LCD_send_4bits(0x03,0,0);	software_delay(400000);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f88d 	bl	8000b68 <LCD_send_4bits>
 8000a4e:	483e      	ldr	r0, [pc, #248]	; (8000b48 <LCD_init+0x130>)
 8000a50:	f7ff ffc4 	bl	80009dc <software_delay>
	//Set 4-bit
	LCD_send_4bits(0x02,0,0);	software_delay(400000);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 f885 	bl	8000b68 <LCD_send_4bits>
 8000a5e:	483a      	ldr	r0, [pc, #232]	; (8000b48 <LCD_init+0x130>)
 8000a60:	f7ff ffbc 	bl	80009dc <software_delay>

	//Function SET
	LCD_write_command(LCD_FUNCTION_INSTRUCTION | LCD_FUNCTION_DL_4BIT | LCD_FUNCTION_LINE_NUMBER_2 | LCD_FUNCTION_FONT_5x8); software_delay(50000);
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f000 f916 	bl	8000c96 <LCD_write_command>
 8000a6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a6e:	f7ff ffb5 	bl	80009dc <software_delay>
	//Display on
	LCD_write_command(LCD_DISPLAY_INSTRUCTION | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR_OFF | LCD_DISPLAY_BLINK_OFF);software_delay(100000);
 8000a72:	200c      	movs	r0, #12
 8000a74:	f000 f90f 	bl	8000c96 <LCD_write_command>
 8000a78:	4834      	ldr	r0, [pc, #208]	; (8000b4c <LCD_init+0x134>)
 8000a7a:	f7ff ffaf 	bl	80009dc <software_delay>
	//Display clear
	LCD_write_command(LCD_CLEAR_INSTRUCTION);software_delay(100000);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 f909 	bl	8000c96 <LCD_write_command>
 8000a84:	4831      	ldr	r0, [pc, #196]	; (8000b4c <LCD_init+0x134>)
 8000a86:	f7ff ffa9 	bl	80009dc <software_delay>
	//Entry mode
	LCD_write_command(LCD_ENTRY_MODE_INSTRUCTION | LCD_ENTRY_MODE_INCREMENT | LCD_ENTRY_MODE_SHIFT_DISPLAY_OFF);software_delay(100000);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 f903 	bl	8000c96 <LCD_write_command>
 8000a90:	482e      	ldr	r0, [pc, #184]	; (8000b4c <LCD_init+0x134>)
 8000a92:	f7ff ffa3 	bl	80009dc <software_delay>
	//Init end

	//Return home
	LCD_write_command(LCD_HOME_INSTRUCTION);	software_delay(100000);
 8000a96:	2002      	movs	r0, #2
 8000a98:	f000 f8fd 	bl	8000c96 <LCD_write_command>
 8000a9c:	482b      	ldr	r0, [pc, #172]	; (8000b4c <LCD_init+0x134>)
 8000a9e:	f7ff ff9d 	bl	80009dc <software_delay>
	
	uint8_t custom_char1[] = LCD_CUSTOM_CHAR_ARROW_UP_PATERN;
 8000aa2:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <LCD_init+0x138>)
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aac:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char1, 0);
 8000ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f98f 	bl	8000dda <LCD_create_custom_character>
	uint8_t custom_char2[] = LCD_CUSTOM_CHAR_ARROW_DOWN_PATERN;
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <LCD_init+0x13c>)
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac6:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char2, 1);
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f982 	bl	8000dda <LCD_create_custom_character>
	uint8_t custom_char3[] = LCD_CUSTOM_CHAR_ARROW_OUT_PATERN;
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <LCD_init+0x140>)
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char3, 2);
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f975 	bl	8000dda <LCD_create_custom_character>
	uint8_t custom_char4[] = LCD_CUSTOM_CHAR_ARROW_INTO_PATERN;
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <LCD_init+0x144>)
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afa:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char4, 3);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f968 	bl	8000dda <LCD_create_custom_character>
	uint8_t custom_char5[] = LCD_CUSTOM_CHAR_ARROW_ENTER_PATERN;
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <LCD_init+0x148>)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b14:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char5, 4);
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f95b 	bl	8000dda <LCD_create_custom_character>
	uint8_t custom_char6[] = LCD_CUSTOM_CHAR_ARROW_PLUS_MINUS_PATERN;
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <LCD_init+0x14c>)
 8000b26:	463b      	mov	r3, r7
 8000b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_create_custom_character(custom_char6, 5);
 8000b30:	463b      	mov	r3, r7
 8000b32:	2105      	movs	r1, #5
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f950 	bl	8000dda <LCD_create_custom_character>


}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	000f4240 	.word	0x000f4240
 8000b48:	00061a80 	.word	0x00061a80
 8000b4c:	000186a0 	.word	0x000186a0
 8000b50:	0800d010 	.word	0x0800d010
 8000b54:	0800d018 	.word	0x0800d018
 8000b58:	0800d020 	.word	0x0800d020
 8000b5c:	0800d028 	.word	0x0800d028
 8000b60:	0800d030 	.word	0x0800d030
 8000b64:	0800d038 	.word	0x0800d038

08000b68 <LCD_send_4bits>:


void LCD_send_4bits(uint8_t data_to_send, char RS, char RW)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	460b      	mov	r3, r1
 8000b74:	71bb      	strb	r3, [r7, #6]
 8000b76:	4613      	mov	r3, r2
 8000b78:	717b      	strb	r3, [r7, #5]
	LCD_GPIO_SET_VALUE(LCD_GPIO_RS_Pin, RS, LCD_GPIO_RS_Port);
 8000b7a:	79bb      	ldrb	r3, [r7, #6]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d105      	bne.n	8000b8c <LCD_send_4bits+0x24>
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	4834      	ldr	r0, [pc, #208]	; (8000c58 <LCD_send_4bits+0xf0>)
 8000b86:	f002 ff6d 	bl	8003a64 <HAL_GPIO_WritePin>
 8000b8a:	e004      	b.n	8000b96 <LCD_send_4bits+0x2e>
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4831      	ldr	r0, [pc, #196]	; (8000c58 <LCD_send_4bits+0xf0>)
 8000b92:	f002 ff67 	bl	8003a64 <HAL_GPIO_WritePin>
	//set RW to LOW (GND) by hardware

	if(data_to_send&(0x01<<0)){LCD_DATABIT_ON(4);}else{LCD_DATABIT_OFF(4);}
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <LCD_send_4bits+0x44>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	482d      	ldr	r0, [pc, #180]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000ba6:	f002 ff5d 	bl	8003a64 <HAL_GPIO_WritePin>
 8000baa:	e004      	b.n	8000bb6 <LCD_send_4bits+0x4e>
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	482a      	ldr	r0, [pc, #168]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000bb2:	f002 ff57 	bl	8003a64 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<1)){LCD_DATABIT_ON(5);}else{LCD_DATABIT_OFF(5);}
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <LCD_send_4bits+0x64>
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4825      	ldr	r0, [pc, #148]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000bc6:	f002 ff4d 	bl	8003a64 <HAL_GPIO_WritePin>
 8000bca:	e004      	b.n	8000bd6 <LCD_send_4bits+0x6e>
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4822      	ldr	r0, [pc, #136]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000bd2:	f002 ff47 	bl	8003a64 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<2)){LCD_DATABIT_ON(6);}else{LCD_DATABIT_OFF(6);}
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <LCD_send_4bits+0x84>
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	481d      	ldr	r0, [pc, #116]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000be6:	f002 ff3d 	bl	8003a64 <HAL_GPIO_WritePin>
 8000bea:	e004      	b.n	8000bf6 <LCD_send_4bits+0x8e>
 8000bec:	2200      	movs	r2, #0
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	481a      	ldr	r0, [pc, #104]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000bf2:	f002 ff37 	bl	8003a64 <HAL_GPIO_WritePin>
	if(data_to_send&(0x01<<3)){LCD_DATABIT_ON(7);}else{LCD_DATABIT_OFF(7);}
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d005      	beq.n	8000c0c <LCD_send_4bits+0xa4>
 8000c00:	2201      	movs	r2, #1
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	4815      	ldr	r0, [pc, #84]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000c06:	f002 ff2d 	bl	8003a64 <HAL_GPIO_WritePin>
 8000c0a:	e004      	b.n	8000c16 <LCD_send_4bits+0xae>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000c12:	f002 ff27 	bl	8003a64 <HAL_GPIO_WritePin>
	software_delay(100);
 8000c16:	2064      	movs	r0, #100	; 0x64
 8000c18:	f7ff fee0 	bl	80009dc <software_delay>
	
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000c22:	f002 ff1f 	bl	8003a64 <HAL_GPIO_WritePin>
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f7ff fed8 	bl	80009dc <software_delay>
	LCD_GPIO_OFF(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(100);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2108      	movs	r1, #8
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000c32:	f002 ff17 	bl	8003a64 <HAL_GPIO_WritePin>
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f7ff fed0 	bl	80009dc <software_delay>
	LCD_GPIO_ON(LCD_GPIO_E_Pin, LCD_GPIO_E_Port);	software_delay(1000);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <LCD_send_4bits+0xf4>)
 8000c42:	f002 ff0f 	bl	8003a64 <HAL_GPIO_WritePin>
 8000c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4a:	f7ff fec7 	bl	80009dc <software_delay>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <LCD_send_8bits_twice_4bits>:

void LCD_send_8bits_twice_4bits(uint8_t data, char RS, char RW)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	717b      	strb	r3, [r7, #5]
	LCD_send_4bits((data>>4), RS, RW);	//high part
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	797a      	ldrb	r2, [r7, #5]
 8000c7a:	79b9      	ldrb	r1, [r7, #6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff73 	bl	8000b68 <LCD_send_4bits>
	LCD_send_4bits(data, RS, RW);		//low part
 8000c82:	797a      	ldrb	r2, [r7, #5]
 8000c84:	79b9      	ldrb	r1, [r7, #6]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff6d 	bl	8000b68 <LCD_send_4bits>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <LCD_write_command>:

void LCD_write_command(uint8_t command)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(command, 0, 0);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffda 	bl	8000c60 <LCD_send_8bits_twice_4bits>
	software_delay(10000);
 8000cac:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cb0:	f7ff fe94 	bl	80009dc <software_delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <LCD_write_data>:

void LCD_write_data(char byte_data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	LCD_send_8bits_twice_4bits(byte_data, 1, 0);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ffc7 	bl	8000c60 <LCD_send_8bits_twice_4bits>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <LCD_write_char>:

void LCD_write_char(char character)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	if(isprint(character))	LCD_write_data(character);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <LCD_write_char+0x2c>)
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <LCD_write_char+0x24>
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffde 	bl	8000cbc <LCD_write_data>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800d158 	.word	0x0800d158

08000d0c <LCD_write_text>:



void LCD_write_text(char* pText){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	while(*pText!='\0')
 8000d14:	e007      	b.n	8000d26 <LCD_write_text+0x1a>
	{
		LCD_write_char(*pText);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffde 	bl	8000cdc <LCD_write_char>
		pText++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
	while(*pText!='\0')
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f3      	bne.n	8000d16 <LCD_write_text+0xa>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LCD_goto_xy>:

void LCD_goto_xy(uint8_t line, uint8_t y)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	switch(line){
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <LCD_goto_xy+0x1c>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d003      	beq.n	8000d5a <LCD_goto_xy+0x22>
 8000d52:	e005      	b.n	8000d60 <LCD_goto_xy+0x28>
		case 0: line=0x00; break;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e004      	b.n	8000d64 <LCD_goto_xy+0x2c>
		case 1: line=0x40; break;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	e001      	b.n	8000d64 <LCD_goto_xy+0x2c>
		default: line=0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71fb      	strb	r3, [r7, #7]
	}
	LCD_write_command(LCD_DDRAM_ADDRESS | (line+y));
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff8d 	bl	8000c96 <LCD_write_command>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <LCD_goto_line>:

void LCD_goto_line(uint8_t line)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	LCD_goto_xy(line, 0);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ffd0 	bl	8000d38 <LCD_goto_xy>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LCD_printf>:
		LCD_write_text(text_buffer);
	}
}

uint8_t LCD_printf(const char * format, ... )
{
 8000da0:	b40f      	push	{r0, r1, r2, r3}
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
	#define LCD_BUFFER_SIZE (LCD_MAXIMUM_LINE_LENGTH+1)
	char text_buffer[LCD_BUFFER_SIZE];
	uint8_t length=0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	75fb      	strb	r3, [r7, #23]
	va_list args;
	va_start (args, format);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	603b      	str	r3, [r7, #0]
	length=vsnprintf(text_buffer, LCD_BUFFER_SIZE, format, args);
 8000db2:	1d38      	adds	r0, r7, #4
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	2111      	movs	r1, #17
 8000dba:	f008 feb9 	bl	8009b30 <vsniprintf>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75fb      	strb	r3, [r7, #23]
	LCD_write_text(text_buffer);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffa1 	bl	8000d0c <LCD_write_text>
	va_end (args);
	return length;
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dd6:	b004      	add	sp, #16
 8000dd8:	4770      	bx	lr

08000dda <LCD_create_custom_character>:


void LCD_create_custom_character(uint8_t* pPattern, uint8_t position)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70fb      	strb	r3, [r7, #3]
	LCD_write_command(LCD_CGRAM_ADDRESS | (position*8));
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff4d 	bl	8000c96 <LCD_write_command>
	for (uint8_t i=0; i<8; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e009      	b.n	8000e16 <LCD_create_custom_character+0x3c>
		LCD_write_data(pPattern[i]);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff56 	bl	8000cbc <LCD_write_data>
	for (uint8_t i=0; i<8; i++)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	3301      	adds	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	d9f2      	bls.n	8000e02 <LCD_create_custom_character+0x28>
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fa48 	bl	80012c4 <null_ptr_check>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d117      	bne.n	8000e70 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	20d0      	movs	r0, #208	; 0xd0
 8000e48:	f000 f818 	bl	8000e7c <bmp2_get_regs>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10b      	bne.n	8000e70 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b58      	cmp	r3, #88	; 0x58
 8000e5e:	d105      	bne.n	8000e6c <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fa7a 	bl	800135a <get_calib_param>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e001      	b.n	8000e70 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000e6c:	23fc      	movs	r3, #252	; 0xfc
 8000e6e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f000 fa19 	bl	80012c4 <null_ptr_check>
 8000e92:	4603      	mov	r3, r0
 8000e94:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11e      	bne.n	8000edc <bmp2_get_regs+0x60>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01b      	beq.n	8000edc <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d103      	bne.n	8000eb4 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb2:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68dc      	ldr	r4, [r3, #12]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	7bf8      	ldrb	r0, [r7, #15]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	47a0      	blx	r4
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ed6:	23fe      	movs	r3, #254	; 0xfe
 8000ed8:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000eda:	e001      	b.n	8000ee0 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000edc:	23ff      	movs	r3, #255	; 0xff
 8000ede:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}

08000eec <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b08b      	sub	sp, #44	; 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d901      	bls.n	8000f04 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000f00:	2304      	movs	r3, #4
 8000f02:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f000 f9dd 	bl	80012c4 <null_ptr_check>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d150      	bne.n	8000fba <bmp2_set_regs+0xce>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d04d      	beq.n	8000fba <bmp2_set_regs+0xce>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d04a      	beq.n	8000fba <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d043      	beq.n	8000fb2 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d114      	bne.n	8000f62 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77fb      	strb	r3, [r7, #31]
 8000f3c:	e00d      	b.n	8000f5a <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	68f9      	ldr	r1, [r7, #12]
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000f54:	7ffb      	ldrb	r3, [r7, #31]
 8000f56:	3301      	adds	r3, #1
 8000f58:	77fb      	strb	r3, [r7, #31]
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d8ed      	bhi.n	8000f3e <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d90b      	bls.n	8000f80 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000f68:	f107 0114 	add.w	r1, r7, #20
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f000 f9c7 	bl	8001304 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	e001      	b.n	8000f84 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691c      	ldr	r4, [r3, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f107 0114 	add.w	r1, r7, #20
 8000f94:	6a3a      	ldr	r2, [r7, #32]
 8000f96:	47a0      	blx	r4
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8000faa:	23fe      	movs	r3, #254	; 0xfe
 8000fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fb0:	e007      	b.n	8000fc2 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8000fb2:	23fd      	movs	r3, #253	; 0xfd
 8000fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8000fb8:	e003      	b.n	8000fc2 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000fba:	23ff      	movs	r3, #255	; 0xff
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fc0:	e000      	b.n	8000fc4 <bmp2_set_regs+0xd8>
        if (len > 0)
 8000fc2:	bf00      	nop
    }

    return rslt;
 8000fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	372c      	adds	r7, #44	; 0x2c
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8000fd8:	23e0      	movs	r3, #224	; 0xe0
 8000fda:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8000fdc:	23b6      	movs	r3, #182	; 0xb6
 8000fde:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000fe0:	f107 010d 	add.w	r1, r7, #13
 8000fe4:	f107 000e 	add.w	r0, r7, #14
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f7ff ff7e 	bl	8000eec <bmp2_set_regs>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800100a:	2300      	movs	r3, #0
 800100c:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d02d      	beq.n	8001070 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001014:	f107 010c 	add.w	r1, r7, #12
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2202      	movs	r2, #2
 800101c:	20f4      	movs	r0, #244	; 0xf4
 800101e:	f7ff ff2d 	bl	8000e7c <bmp2_get_regs>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d122      	bne.n	8001074 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	095b      	lsrs	r3, r3, #5
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	109b      	asrs	r3, r3, #2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	b2da      	uxtb	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	109b      	asrs	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	b2da      	uxtb	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	715a      	strb	r2, [r3, #5]
 800106e:	e001      	b.n	8001074 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001070:	23ff      	movs	r3, #255	; 0xff
 8001072:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f9fe 	bl	8001490 <conf_sensor>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01b      	beq.n	80010e6 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80010ae:	f107 010e 	add.w	r1, r7, #14
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	20f3      	movs	r0, #243	; 0xf3
 80010b8:	f7ff fee0 	bl	8000e7c <bmp2_get_regs>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d110      	bne.n	80010ea <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	10db      	asrs	r3, r3, #3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	705a      	strb	r2, [r3, #1]
 80010e4:	e001      	b.n	80010ea <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f9c0 	bl	8001490 <conf_sensor>
 8001110:	4603      	mov	r3, r0
 8001112:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001114:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	2300      	movs	r3, #0
 8001130:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d024      	beq.n	800118c <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001142:	f107 0110 	add.w	r1, r7, #16
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2206      	movs	r2, #6
 800114a:	20f7      	movs	r0, #247	; 0xf7
 800114c:	f7ff fe96 	bl	8000e7c <bmp2_get_regs>
 8001150:	4603      	mov	r3, r0
 8001152:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d119      	bne.n	8001190 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 faba 	bl	80016e0 <parse_sensor_data>
 800116c:	4603      	mov	r3, r0
 800116e:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10b      	bne.n	8001190 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f80b 	bl	800119c <bmp2_compensate_data>
 8001186:	4603      	mov	r3, r0
 8001188:	75fb      	strb	r3, [r7, #23]
 800118a:	e001      	b.n	8001190 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001190:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f88b 	bl	80012c4 <null_ptr_check>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80011b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d129      	bne.n	800120e <bmp2_compensate_data+0x72>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d026      	beq.n	800120e <bmp2_compensate_data+0x72>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d023      	beq.n	800120e <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3308      	adds	r3, #8
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fabc 	bl	8001768 <compensate_temperature>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80011f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10a      	bne.n	8001212 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fb7c 	bl	8001900 <compensate_pressure>
 8001208:	4603      	mov	r3, r0
 800120a:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800120c:	e001      	b.n	8001212 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800120e:	23ff      	movs	r3, #255	; 0xff
 8001210:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b092      	sub	sp, #72	; 0x48
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <bmp2_compute_meas_time+0x9c>)
 800122e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001232:	461d      	mov	r5, r3
 8001234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <bmp2_compute_meas_time+0xa0>)
 800123e:	f107 0410 	add.w	r4, r7, #16
 8001242:	461d      	mov	r5, r3
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800124c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f837 	bl	80012c4 <null_ptr_check>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 800125c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001260:	2b00      	cmp	r3, #0
 8001262:	d122      	bne.n	80012aa <bmp2_compute_meas_time+0x8a>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01f      	beq.n	80012aa <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e1b      	ldrb	r3, [r3, #24]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d111      	bne.n	8001296 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	78db      	ldrb	r3, [r3, #3]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	3348      	adds	r3, #72	; 0x48
 800127a:	443b      	add	r3, r7
 800127c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	3348      	adds	r3, #72	; 0x48
 8001288:	443b      	add	r3, r7
 800128a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800128e:	441a      	add	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001294:	e00c      	b.n	80012b0 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	78db      	ldrb	r3, [r3, #3]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	3348      	adds	r3, #72	; 0x48
 800129e:	443b      	add	r3, r7
 80012a0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012a8:	e002      	b.n	80012b0 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80012b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3748      	adds	r7, #72	; 0x48
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	0800d044 	.word	0x0800d044
 80012c0:	0800d058 	.word	0x0800d058

080012c4 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <null_ptr_check+0x26>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <null_ptr_check+0x26>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <null_ptr_check+0x26>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80012ea:	23ff      	movs	r3, #255	; 0xff
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e001      	b.n	80012f4 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e015      	b.n	8001344 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	441a      	add	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3b01      	subs	r3, #1
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	440b      	add	r3, r1
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	440b      	add	r3, r1
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3e5      	bcc.n	8001318 <interleave_data+0x14>
    }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b08a      	sub	sp, #40	; 0x28
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2219      	movs	r2, #25
 8001380:	2088      	movs	r0, #136	; 0x88
 8001382:	f7ff fd7b 	bl	8000e7c <bmp2_get_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 800138c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001390:	2b00      	cmp	r3, #0
 8001392:	d177      	bne.n	8001484 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001394:	7b7b      	ldrb	r3, [r7, #13]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80013ba:	7c7b      	ldrb	r3, [r7, #17]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	7c3b      	ldrb	r3, [r7, #16]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	7cbb      	ldrb	r3, [r7, #18]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21b      	sxth	r3, r3
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80013e0:	7d7b      	ldrb	r3, [r7, #21]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7d3b      	ldrb	r3, [r7, #20]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7dbb      	ldrb	r3, [r7, #22]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21a      	sxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001404:	7e7b      	ldrb	r3, [r7, #25]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7e3b      	ldrb	r3, [r7, #24]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21a      	sxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001416:	7efb      	ldrb	r3, [r7, #27]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	7ebb      	ldrb	r3, [r7, #26]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21a      	sxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001428:	7f7b      	ldrb	r3, [r7, #29]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	7f3b      	ldrb	r3, [r7, #28]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21a      	sxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	7fbb      	ldrb	r3, [r7, #30]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 800144c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21a      	sxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001462:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800147c:	b25a      	sxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001488:	4618      	mov	r0, r3
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800149e:	2300      	movs	r3, #0
 80014a0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80014a2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80014a6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d074      	beq.n	8001598 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80014ae:	f107 0114 	add.w	r1, r7, #20
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	20f4      	movs	r0, #244	; 0xf4
 80014b8:	f7ff fce0 	bl	8000e7c <bmp2_get_regs>
 80014bc:	4603      	mov	r3, r0
 80014be:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80014c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d169      	bne.n	800159c <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fd81 	bl	8000fd0 <bmp2_soft_reset>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80014d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d160      	bne.n	800159c <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f861 	bl	80015a8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80014e6:	7d7b      	ldrb	r3, [r7, #21]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001500:	7d7b      	ldrb	r3, [r7, #21]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f023 031c 	bic.w	r3, r3, #28
 8001508:	b25a      	sxtb	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	f003 031c 	and.w	r3, r3, #28
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	b25a      	sxtb	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	795b      	ldrb	r3, [r3, #5]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800153e:	f107 0114 	add.w	r1, r7, #20
 8001542:	f107 0010 	add.w	r0, r7, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2202      	movs	r2, #2
 800154a:	f7ff fccf 	bl	8000eec <bmp2_set_regs>
 800154e:	4603      	mov	r3, r0
 8001550:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d120      	bne.n	800159c <conf_sensor+0x10c>
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01d      	beq.n	800159c <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001566:	7d3b      	ldrb	r3, [r7, #20]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	b25a      	sxtb	r2, r3
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 8001582:	f107 0114 	add.w	r1, r7, #20
 8001586:	f107 0010 	add.w	r0, r7, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f7ff fcad 	bl	8000eec <bmp2_set_regs>
 8001592:	4603      	mov	r3, r0
 8001594:	75fb      	strb	r3, [r7, #23]
 8001596:	e001      	b.n	800159c <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001598:	23ff      	movs	r3, #255	; 0xff
 800159a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800159c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	f200 808b 	bhi.w	80016d2 <set_os_mode+0x12a>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <set_os_mode+0x1c>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d9 	.word	0x080015d9
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	0800163d 	.word	0x0800163d
 80015d0:	0800166f 	.word	0x0800166f
 80015d4:	080016a1 	.word	0x080016a1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	f023 031c 	bic.w	r3, r3, #28
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	b25b      	sxtb	r3, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	701a      	strb	r2, [r3, #0]
            break;
 8001608:	e064      	b.n	80016d4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	b25b      	sxtb	r3, r3
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	b25b      	sxtb	r3, r3
 800161c:	b2da      	uxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f023 031c 	bic.w	r3, r3, #28
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	b25b      	sxtb	r3, r3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	701a      	strb	r2, [r3, #0]
            break;
 800163a:	e04b      	b.n	80016d4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	f023 031c 	bic.w	r3, r3, #28
 800165e:	b25b      	sxtb	r3, r3
 8001660:	f043 030c 	orr.w	r3, r3, #12
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	701a      	strb	r2, [r3, #0]
            break;
 800166c:	e032      	b.n	80016d4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	f023 031c 	bic.w	r3, r3, #28
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	b25b      	sxtb	r3, r3
 8001698:	b2da      	uxtb	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	701a      	strb	r2, [r3, #0]
            break;
 800169e:	e019      	b.n	80016d4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	f023 031c 	bic.w	r3, r3, #28
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	f043 0314 	orr.w	r3, r3, #20
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	701a      	strb	r2, [r3, #0]
            break;
 80016d0:	e000      	b.n	80016d4 <set_os_mode+0x12c>
        default:
            break;
 80016d2:	bf00      	nop
    }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3302      	adds	r3, #2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	b2db      	uxtb	r3, r3
 8001706:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	431a      	orrs	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	431a      	orrs	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3303      	adds	r3, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	031b      	lsls	r3, r3, #12
 800171e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3305      	adds	r3, #5
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	b2db      	uxtb	r3, r3
 8001734:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	431a      	orrs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4619      	mov	r1, r3
 8001750:	4610      	mov	r0, r2
 8001752:	f000 fa31 	bl	8001bb8 <st_check_boundaries>
 8001756:	4603      	mov	r3, r0
 8001758:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800175a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001768:	b480      	push	{r7}
 800176a:	b08d      	sub	sp, #52	; 0x34
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001786:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80018c0 <compensate_temperature+0x158>
 800178a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8b9b      	ldrh	r3, [r3, #28]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800179a:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 80018c8 <compensate_temperature+0x160>
 800179e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017a2:	ee36 6b47 	vsub.f64	d6, d6, d7
           ((double) dev->calib_param.dig_t2);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80017b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017b8:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017c8:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80018d0 <compensate_temperature+0x168>
 80017cc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8b9b      	ldrh	r3, [r3, #28]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017dc:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80018d8 <compensate_temperature+0x170>
 80017e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80017e4:	ee36 6b47 	vsub.f64	d6, d6, d7
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017f4:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80018d0 <compensate_temperature+0x168>
 80017f8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8b9b      	ldrh	r3, [r3, #28]
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8001808:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80018d8 <compensate_temperature+0x170>
 800180c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001810:	ee35 7b47 	vsub.f64	d7, d5, d7
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001814:	ee26 6b07 	vmul.f64	d6, d6, d7
        ((double) dev->calib_param.dig_t3);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    var2 =
 8001826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800182a:	ed87 7b04 	vstr	d7, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800182e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001832:	ed97 7b04 	vldr	d7, [r7, #16]
 8001836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800183a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800183e:	ee17 2a90 	vmov	r2, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001846:	ed97 6b06 	vldr	d6, [r7, #24]
 800184a:	ed97 7b04 	vldr	d7, [r7, #16]
 800184e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001852:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80018e0 <compensate_temperature+0x178>
 8001856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800185a:	ed87 7b08 	vstr	d7, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 800185e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001862:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80018e8 <compensate_temperature+0x180>
 8001866:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d507      	bpl.n	8001880 <compensate_temperature+0x118>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <compensate_temperature+0x190>)
 8001876:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001880:	ed97 7b08 	vldr	d7, [r7, #32]
 8001884:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80018f0 <compensate_temperature+0x188>
 8001888:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd07      	ble.n	80018a2 <compensate_temperature+0x13a>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <compensate_temperature+0x194>)
 8001898:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 800189c:	2302      	movs	r3, #2
 800189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80018ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3734      	adds	r7, #52	; 0x34
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	f3af 8000 	nop.w
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40d00000 	.word	0x40d00000
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40900000 	.word	0x40900000
 80018d0:	00000000 	.word	0x00000000
 80018d4:	41000000 	.word	0x41000000
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40c00000 	.word	0x40c00000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40b40000 	.word	0x40b40000
 80018e8:	00000000 	.word	0x00000000
 80018ec:	c0440000 	.word	0xc0440000
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40554000 	.word	0x40554000
 80018f8:	c0440000 	.word	0xc0440000
 80018fc:	40554000 	.word	0x40554000

08001900 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001900:	b480      	push	{r7}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800192a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800192e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001932:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001b68 <compensate_pressure+0x268>
 8001936:	ee37 7b46 	vsub.f64	d7, d7, d6
 800193a:	ed87 7b06 	vstr	d7, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800193e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001942:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001954:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001958:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8001b70 <compensate_pressure+0x270>
 800195c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001960:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001972:	ed97 7b06 	vldr	d7, [r7, #24]
 8001976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800197a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800197e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001982:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001986:	ed87 7b04 	vstr	d7, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800198a:	ed97 7b04 	vldr	d7, [r7, #16]
 800198e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001992:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019a4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8001b78 <compensate_pressure+0x278>
 80019a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019b0:	ed87 7b04 	vstr	d7, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80019c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80019ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019d2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001b80 <compensate_pressure+0x280>
 80019d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80019e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80019ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019f4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001b80 <compensate_pressure+0x280>
 80019f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019fc:	ed87 7b06 	vstr	d7, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001a00:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a04:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8001b70 <compensate_pressure+0x270>
 8001a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a10:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a24:	ed87 7b06 	vstr	d7, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001a28:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d407      	bmi.n	8001a46 <compensate_pressure+0x146>
 8001a36:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	f340 8086 	ble.w	8001b52 <compensate_pressure+0x252>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a52:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001b88 <compensate_pressure+0x288>
 8001a56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a5a:	ed87 7b08 	vstr	d7, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001a5e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001a62:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001b90 <compensate_pressure+0x290>
 8001a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6a:	ed97 6b08 	vldr	d6, [r7, #32]
 8001a6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a72:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001b98 <compensate_pressure+0x298>
 8001a76:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001a7a:	ed97 6b06 	vldr	d6, [r7, #24]
 8001a7e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a82:	ed87 7b08 	vstr	d7, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a94:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a9c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001aa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001aa4:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001ba0 <compensate_pressure+0x2a0>
 8001aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aac:	ed87 7b06 	vstr	d7, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001abe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ac2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ac6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001b70 <compensate_pressure+0x270>
 8001aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ace:	ed87 7b04 	vstr	d7, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001ad2:	ed97 6b06 	vldr	d6, [r7, #24]
 8001ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ada:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001aec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001af8:	ed97 6b08 	vldr	d6, [r7, #32]
 8001afc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b00:	ed87 7b08 	vstr	d7, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001b04:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b08:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001ba8 <compensate_pressure+0x2a8>
 8001b0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	d507      	bpl.n	8001b26 <compensate_pressure+0x226>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001b16:	a324      	add	r3, pc, #144	; (adr r3, 8001ba8 <compensate_pressure+0x2a8>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001b20:	2303      	movs	r3, #3
 8001b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001b26:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b2a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001bb0 <compensate_pressure+0x2b0>
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd07      	ble.n	8001b48 <compensate_pressure+0x248>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001b38:	a31d      	add	r3, pc, #116	; (adr r3, 8001bb0 <compensate_pressure+0x2b0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001b42:	2304      	movs	r3, #4
 8001b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001b52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3734      	adds	r7, #52	; 0x34
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	f3af 8000 	nop.w
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40ef4000 	.word	0x40ef4000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40e00000 	.word	0x40e00000
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40f00000 	.word	0x40f00000
 8001b80:	00000000 	.word	0x00000000
 8001b84:	41200000 	.word	0x41200000
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	41300000 	.word	0x41300000
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40b00000 	.word	0x40b00000
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40b86a00 	.word	0x40b86a00
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	41e00000 	.word	0x41e00000
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40dd4c00 	.word	0x40dd4c00
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40fadb00 	.word	0x40fadb00

08001bb8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db03      	blt.n	8001bd4 <st_check_boundaries+0x1c>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <st_check_boundaries+0x88>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	dd09      	ble.n	8001be8 <st_check_boundaries+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db06      	blt.n	8001be8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <st_check_boundaries+0x88>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	dc02      	bgt.n	8001be8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001be2:	23fa      	movs	r3, #250	; 0xfa
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e023      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db03      	blt.n	8001bf6 <st_check_boundaries+0x3e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <st_check_boundaries+0x88>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	dd09      	ble.n	8001c0a <st_check_boundaries+0x52>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db06      	blt.n	8001c0a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <st_check_boundaries+0x88>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	dc02      	bgt.n	8001c0a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001c04:	23fb      	movs	r3, #251	; 0xfb
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e012      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db03      	blt.n	8001c18 <st_check_boundaries+0x60>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <st_check_boundaries+0x88>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	dd09      	ble.n	8001c2c <st_check_boundaries+0x74>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db03      	blt.n	8001c26 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <st_check_boundaries+0x88>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	dd02      	ble.n	8001c2c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001c26:	23f9      	movs	r3, #249	; 0xf9
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e001      	b.n	8001c30 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	000ffff0 	.word	0x000ffff0

08001c44 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff f8ea 	bl	8000e26 <bmp2_init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f9cf 	bl	8001000 <bmp2_get_config>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_OFF;
 8001c66:	2300      	movs	r3, #0
 8001c68:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fa01 	bl	8001080 <bmp2_set_config>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff fa33 	bl	80010f6 <bmp2_set_power_mode>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001c94:	f107 0108 	add.w	r1, r7, #8
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fabe 	bl	8001220 <bmp2_compute_meas_time>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b096      	sub	sp, #88	; 0x58
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]
  uint8_t rxarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	f107 0318 	add.w	r3, r7, #24
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001d04:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001d06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001d0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d0e:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <bmp2_spi_read+0xf4>)
 8001d10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <bmp2_spi_read+0xf8>)
 8001d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	f001 fe9f 	bl	8003a64 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_TransmitReceive(BMP2_SPI, (uint8_t*)(&txarray), (uint8_t*)(&rxarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f107 0214 	add.w	r2, r7, #20
 8001d32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d36:	2005      	movs	r0, #5
 8001d38:	9000      	str	r0, [sp, #0]
 8001d3a:	481d      	ldr	r0, [pc, #116]	; (8001db0 <bmp2_spi_read+0xfc>)
 8001d3c:	f002 ff65 	bl	8004c0a <HAL_SPI_TransmitReceive>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d4c:	e012      	b.n	8001d74 <bmp2_spi_read+0xc0>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001d4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <bmp2_spi_read+0xf4>)
 8001d54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d5c:	4a13      	ldr	r2, [pc, #76]	; (8001dac <bmp2_spi_read+0xf8>)
 8001d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4619      	mov	r1, r3
 8001d66:	f001 fe7d 	bl	8003a64 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d9e8      	bls.n	8001d4e <bmp2_spi_read+0x9a>
  }

  if (status != HAL_OK)
 8001d7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <bmp2_spi_read+0xd6>
  {
    // The BME2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001d84:	23ff      	movs	r3, #255	; 0xff
 8001d86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  /* Copy data content from receive buffer */
  memcpy(reg_data, &rxarray[BMP2_DATA_INDEX], length);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	3301      	adds	r3, #1
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f006 f94d 	bl	8008034 <memcpy>

  return iError;
 8001d9a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3750      	adds	r7, #80	; 0x50
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000004 	.word	0x20000004
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	200002b0 	.word	0x200002b0

08001db4 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t txarray[BMP2_SPI_BUFFER_LEN] = {0,};
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]
  uint8_t cs = *(uint8_t*)intf_ptr;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001dee:	7bfb      	ldrb	r3, [r7, #15]

  /* Copy selected register address and data content to transmit buffer */
  memcpy(&txarray[BMP2_REG_ADDR_INDEX],  &reg_addr,  BMP2_REG_ADDR_LEN);
 8001df0:	743b      	strb	r3, [r7, #16]
  memcpy(&txarray[BMP2_DATA_INDEX],       reg_data,  length);
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	3301      	adds	r3, #1
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 f919 	bl	8008034 <memcpy>

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(BMP2_CS_Ports[cs], BMP2_CS_Pins[cs], GPIO_PIN_RESET);
 8001e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <bmp2_spi_write+0xd4>)
 8001e08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <bmp2_spi_write+0xd8>)
 8001e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e16:	2200      	movs	r2, #0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f001 fe23 	bl	8003a64 <HAL_GPIO_WritePin>

  /* Data exchange */
  status = HAL_SPI_Transmit(BMP2_SPI, (uint8_t*)(&txarray), length+BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	f107 0110 	add.w	r1, r7, #16
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	4818      	ldr	r0, [pc, #96]	; (8001e90 <bmp2_spi_write+0xdc>)
 8001e2e:	f002 fd7e 	bl	800492e <HAL_SPI_Transmit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Disable all slaves */
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e3e:	e012      	b.n	8001e66 <bmp2_spi_write+0xb2>
  {
    HAL_GPIO_WritePin(BMP2_CS_Ports[i], BMP2_CS_Pins[i], GPIO_PIN_SET);
 8001e40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <bmp2_spi_write+0xd4>)
 8001e46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <bmp2_spi_write+0xd8>)
 8001e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4619      	mov	r1, r3
 8001e58:	f001 fe04 	bl	8003a64 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < BMP2_NUM_OF_SENSORS; i++)
 8001e5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e60:	3301      	adds	r3, #1
 8001e62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d9e8      	bls.n	8001e40 <bmp2_spi_write+0x8c>
  }

  if (status != HAL_OK)
 8001e6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <bmp2_spi_write+0xc8>
  {
    // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
    iError = (-1);
 8001e76:	23ff      	movs	r3, #255	; 0xff
 8001e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return iError;
 8001e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	200002b0 	.word	0x200002b0

08001e94 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <bmp2_delay_us+0x24>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	099b      	lsrs	r3, r3, #6
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fa67 	bl	800337c <HAL_Delay>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP2_E_NULL_PTR;
 8001ec4:	23ff      	movs	r3, #255	; 0xff
 8001ec6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    struct bmp2_status status;
    struct bmp2_data comp_data;
    double temp = -1.0;
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <BMP2_ReadTemperature_degC+0x78>)
 8001ed0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int8_t try = 10;
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
      /* Read sensor status */
      rslt = bmp2_get_status(&status, dev);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f8dc 	bl	800109e <bmp2_get_status>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      /* Read compensated data */
      rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f914 	bl	8001120 <bmp2_get_sensor_data>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
      temp = comp_data.temperature;
 8001efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f02:	e9c7 2308 	strd	r2, r3, [r7, #32]
      try--;
 8001f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8001f14:	7f3b      	ldrb	r3, [r7, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <BMP2_ReadTemperature_degC+0x66>
 8001f1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dcdb      	bgt.n	8001eda <BMP2_ReadTemperature_degC+0x1e>

    return temp;
 8001f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	bff00000 	.word	0xbff00000

08001f38 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4e:	4b85      	ldr	r3, [pc, #532]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a84      	ldr	r2, [pc, #528]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a7e      	ldr	r2, [pc, #504]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	4b79      	ldr	r3, [pc, #484]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a78      	ldr	r2, [pc, #480]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a72      	ldr	r2, [pc, #456]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b70      	ldr	r3, [pc, #448]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a6c      	ldr	r2, [pc, #432]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a66      	ldr	r2, [pc, #408]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a60      	ldr	r2, [pc, #384]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <MX_GPIO_Init+0x22c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f640 0118 	movw	r1, #2072	; 0x818
 8001ffc:	485a      	ldr	r0, [pc, #360]	; (8002168 <MX_GPIO_Init+0x230>)
 8001ffe:	f001 fd31 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f244 0181 	movw	r1, #16513	; 0x4081
 8002008:	4858      	ldr	r0, [pc, #352]	; (800216c <MX_GPIO_Init+0x234>)
 800200a:	f001 fd2b 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	4857      	ldr	r0, [pc, #348]	; (8002170 <MX_GPIO_Init+0x238>)
 8002014:	f001 fd26 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 8002018:	2200      	movs	r2, #0
 800201a:	21f8      	movs	r1, #248	; 0xf8
 800201c:	4855      	ldr	r0, [pc, #340]	; (8002174 <MX_GPIO_Init+0x23c>)
 800201e:	f001 fd21 	bl	8003a64 <HAL_GPIO_WritePin>
                          |LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|BMP280_CS1_Pin|BMP280_CS2_Pin;
 8002022:	f640 0318 	movw	r3, #2072	; 0x818
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	484b      	ldr	r0, [pc, #300]	; (8002168 <MX_GPIO_Init+0x230>)
 800203c:	f001 fb66 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <MX_GPIO_Init+0x240>)
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4849      	ldr	r0, [pc, #292]	; (800217c <MX_GPIO_Init+0x244>)
 8002056:	f001 fb59 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800205a:	2332      	movs	r3, #50	; 0x32
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800206a:	230b      	movs	r3, #11
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4841      	ldr	r0, [pc, #260]	; (800217c <MX_GPIO_Init+0x244>)
 8002076:	f001 fb49 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800207a:	2386      	movs	r3, #134	; 0x86
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800208a:	230b      	movs	r3, #11
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	483a      	ldr	r0, [pc, #232]	; (8002180 <MX_GPIO_Init+0x248>)
 8002096:	f001 fb39 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800209a:	f244 0381 	movw	r3, #16513	; 0x4081
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	482e      	ldr	r0, [pc, #184]	; (800216c <MX_GPIO_Init+0x234>)
 80020b4:	f001 fb2a 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ca:	230b      	movs	r3, #11
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4825      	ldr	r0, [pc, #148]	; (800216c <MX_GPIO_Init+0x234>)
 80020d6:	f001 fb19 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <MX_GPIO_Init+0x238>)
 80020f2:	f001 fb0b 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <MX_GPIO_Init+0x238>)
 800210a:	f001 faff 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LCD_Enable_Pin|LCD_DATA4_Pin|LCD_DATA5_Pin|LCD_DATA6_Pin
 800210e:	23f8      	movs	r3, #248	; 0xf8
 8002110:	61fb      	str	r3, [r7, #28]
                          |LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_GPIO_Init+0x23c>)
 8002126:	f001 faf1 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800212a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213c:	230b      	movs	r3, #11
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	480a      	ldr	r0, [pc, #40]	; (8002170 <MX_GPIO_Init+0x238>)
 8002148:	f001 fae0 	bl	800370c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2028      	movs	r0, #40	; 0x28
 8002152:	f001 fa12 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002156:	2028      	movs	r0, #40	; 0x28
 8002158:	f001 fa2b 	bl	80035b2 <HAL_NVIC_EnableIRQ>

}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	40021000 	.word	0x40021000
 800216c:	40020400 	.word	0x40020400
 8002170:	40021800 	.word	0x40021800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	10110000 	.word	0x10110000
 800217c:	40020800 	.word	0x40020800
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funkcja UART : Wysyłanie temperatury referencyjnej
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08e      	sub	sp, #56	; 0x38
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_UART_RxCpltCallback+0xbc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d14f      	bne.n	8002236 <HAL_UART_RxCpltCallback+0xb2>
	{
		uint8_t tx_buffer[32];
		float temperature_reference_UART;

		sscanf((char*)&Data[0], "%f", &temperature_reference_UART);
 8002196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219a:	461a      	mov	r2, r3
 800219c:	4929      	ldr	r1, [pc, #164]	; (8002244 <HAL_UART_RxCpltCallback+0xc0>)
 800219e:	482a      	ldr	r0, [pc, #168]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 80021a0:	f006 fdcc 	bl	8008d3c <siscanf>

		// Sprawdzenie zakresu temperatury <20,40>
		if(temperature_reference_UART < 20.0 || temperature_reference_UART > 40.0)
 80021a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80021ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	d408      	bmi.n	80021c8 <HAL_UART_RxCpltCallback+0x44>
 80021b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800224c <HAL_UART_RxCpltCallback+0xc8>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd17      	ble.n	80021f8 <HAL_UART_RxCpltCallback+0x74>
		{
			int resp_len = sprintf((char*)tx_buffer, "Temperatura referencyjna poza <20,40>\r\n"); //formatowanie wiadomości
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4920      	ldr	r1, [pc, #128]	; (8002250 <HAL_UART_RxCpltCallback+0xcc>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f006 fd94 	bl	8008cfc <siprintf>
 80021d4:	6338      	str	r0, [r7, #48]	; 0x30
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f107 010c 	add.w	r1, r7, #12
 80021de:	230a      	movs	r3, #10
 80021e0:	481c      	ldr	r0, [pc, #112]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 80021e2:	f004 fba7 	bl	8006934 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len);
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_UART_RxCpltCallback+0xd4>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 80021ee:	4819      	ldr	r0, [pc, #100]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 80021f0:	f004 fc33 	bl	8006a5a <HAL_UART_Receive_IT>
		{
 80021f4:	bf00      	nop
			int resp_len = sprintf((char*)tx_buffer, "Temperatura referencyjna: %f\r\n", temperature_reference); //formatowanie wiadomości
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10); //wysyłanie
			HAL_UART_Receive_IT(&huart3, Data, msg_len); // odbiór
		}
	}
}
 80021f6:	e01e      	b.n	8002236 <HAL_UART_RxCpltCallback+0xb2>
			temperature_reference = temperature_reference_UART;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_UART_RxCpltCallback+0xd8>)
 80021fc:	6013      	str	r3, [r2, #0]
			int resp_len = sprintf((char*)tx_buffer, "Temperatura referencyjna: %f\r\n", temperature_reference); //formatowanie wiadomości
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_UART_RxCpltCallback+0xd8>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002208:	f107 000c 	add.w	r0, r7, #12
 800220c:	ec53 2b17 	vmov	r2, r3, d7
 8002210:	4913      	ldr	r1, [pc, #76]	; (8002260 <HAL_UART_RxCpltCallback+0xdc>)
 8002212:	f006 fd73 	bl	8008cfc <siprintf>
 8002216:	6378      	str	r0, [r7, #52]	; 0x34
			HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10); //wysyłanie
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	b29a      	uxth	r2, r3
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	230a      	movs	r3, #10
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 8002224:	f004 fb86 	bl	8006934 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, Data, msg_len); // odbiór
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_UART_RxCpltCallback+0xd4>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4906      	ldr	r1, [pc, #24]	; (8002248 <HAL_UART_RxCpltCallback+0xc4>)
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <HAL_UART_RxCpltCallback+0xd0>)
 8002232:	f004 fc12 	bl	8006a5a <HAL_UART_Receive_IT>
}
 8002236:	bf00      	nop
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40004800 	.word	0x40004800
 8002244:	0800d078 	.word	0x0800d078
 8002248:	20000248 	.word	0x20000248
 800224c:	42200000 	.word	0x42200000
 8002250:	0800d07c 	.word	0x0800d07c
 8002254:	20000448 	.word	0x20000448
 8002258:	2000024e 	.word	0x2000024e
 800225c:	20000258 	.word	0x20000258
 8002260:	0800d0a4 	.word	0x0800d0a4
 8002264:	00000000 	.word	0x00000000

08002268 <HAL_TIM_PeriodElapsedCallback>:

//Obsługa timerów TIM2 i TIM5

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0a6      	sub	sp, #152	; 0x98
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2) //TIM 2 wysyła co 1 sekundę odczytaną temperaturę i temperaturę referencyjną
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d132      	bne.n	80022e0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		char str_buffer[100];
		int n;

		float temp_cur = BMP2_ReadTemperature_degC(&hbmp2_1); //Zmienna lokalna od obecnej temperatury
 800227a:	48ad      	ldr	r0, [pc, #692]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800227c:	f7ff fe1e 	bl	8001ebc <BMP2_ReadTemperature_degC>
 8002280:	eeb0 7b40 	vmov.f64	d7, d0
 8002284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002288:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		float temp_ref = temperature_reference; //Zmienna lokalna od obecnej temperatury referencyjnej
 800228c:	4ba9      	ldr	r3, [pc, #676]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		n = sprintf(str_buffer, "{\"Current Temperature\": %2.02f *C} {\"Reference Temperature\": %2.02f *C}\r\n", temp_cur, temp_ref);
 8002294:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002298:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800229c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80022a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a4:	f107 0008 	add.w	r0, r7, #8
 80022a8:	ed8d 7b00 	vstr	d7, [sp]
 80022ac:	ec53 2b16 	vmov	r2, r3, d6
 80022b0:	49a1      	ldr	r1, [pc, #644]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80022b2:	f006 fd23 	bl	8008cfc <siprintf>
 80022b6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		str_buffer[n] = '\n';
 80022ba:	f107 0208 	add.w	r2, r7, #8
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	4413      	add	r3, r2
 80022c4:	220a      	movs	r2, #10
 80022c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+1, 1000); //Wysyłanie wiadomości
 80022c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f107 0108 	add.w	r1, r7, #8
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	4898      	ldr	r0, [pc, #608]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80022dc:	f004 fb2a 	bl	8006934 <HAL_UART_Transmit>
	}

	if(htim->Instance == TIM5) //TIM 5 odpowiedzialny jest za PWM
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a96      	ldr	r2, [pc, #600]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f040 8118 	bne.w	800251c <HAL_TIM_PeriodElapsedCallback+0x2b4>
	{
		temperature_current = BMP2_ReadTemperature_degC(&hbmp2_1); //Odczyt temperatury z czujnika
 80022ec:	4890      	ldr	r0, [pc, #576]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80022ee:	f7ff fde5 	bl	8001ebc <BMP2_ReadTemperature_degC>
 80022f2:	eeb0 7b40 	vmov.f64	d7, d0
 80022f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80022fc:	edc3 7a00 	vstr	s15, [r3]
		temperature_error = temperature_reference - temperature_current; //Obliczenie wartości błędu temperatury
 8002300:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002302:	ed93 7a00 	vldr	s14, [r3]
 8002306:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002310:	4b8d      	ldr	r3, [pc, #564]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
		PWM_Control_Fan = 999.0*arm_pid_f32(&PID2, temperature_error); //Obliczanie wartości PWM wiatraka
 8002316:	4b8c      	ldr	r3, [pc, #560]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8c      	ldr	r2, [pc, #560]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800231c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002320:	67fb      	str	r3, [r7, #124]	; 0x7c
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8002322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002326:	ed93 7a00 	vldr	s14, [r3]
 800232a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002336:	edd3 6a01 	vldr	s13, [r3, #4]
 800233a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800233e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002342:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002346:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800234a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800234e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002356:	edd3 7a04 	vldr	s15, [r3, #16]
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002366:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    /* Update state */
    S->state[1] = S->state[0];
 8002372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800237c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800237e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002382:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002384:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002386:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800238a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800238c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800238e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002392:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002396:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8002528 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800239a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800239e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023a2:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]


		if(temperature_current < temperature_reference)
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d568      	bpl.n	8002490 <HAL_TIM_PeriodElapsedCallback+0x228>
		{
		PWM_Control_Heater = 999.0*arm_pid_f32(&PID1, temperature_error); //Obliczenie wartości PWM grzałki
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a64      	ldr	r2, [pc, #400]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80023c4:	677a      	str	r2, [r7, #116]	; 0x74
 80023c6:	673b      	str	r3, [r7, #112]	; 0x70
    out = (S->A0 * in) +
 80023c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ca:	ed93 7a00 	vldr	s14, [r3]
 80023ce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023d2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80023d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80023dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023de:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80023ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80023f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    S->state[1] = S->state[0];
 800240c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002412:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002416:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002418:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800241a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800241e:	615a      	str	r2, [r3, #20]
    return (out);
 8002420:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002424:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002428:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002528 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800242c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002430:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002436:	edc3 7a00 	vstr	s15, [r3]
		//Limit PWM grzałki
			if(PWM_Control_Heater < 0)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d503      	bpl.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			{
				Heater_PWM_Duty = 0;
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	e018      	b.n	8002484 <HAL_TIM_PeriodElapsedCallback+0x21c>
			}
			else if(PWM_Control_Heater > 999.0)
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002560 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 800245c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	dd04      	ble.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x208>
			{
				Heater_PWM_Duty = 999;
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	e009      	b.n	8002484 <HAL_TIM_PeriodElapsedCallback+0x21c>
			}
		//Ustawienie PWM jeżeli jest w zakresie
			else
			{
				Heater_PWM_Duty = (uint16_t)PWM_Control_Heater;
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247a:	ee17 3a90 	vmov	r3, s15
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002482:	801a      	strh	r2, [r3, #0]
			}
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Heater_PWM_Duty);
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
 800248e:	e007      	b.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x238>
		}
		else
		{
			Heater_PWM_Duty=0;
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Heater_PWM_Duty);
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if(temperature_current > temperature_reference)
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80024a2:	ed93 7a00 	vldr	s14, [r3]
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	dd2a      	ble.n	800250c <HAL_TIM_PeriodElapsedCallback+0x2a4>
		{

			if(PWM_Control_Fan < 0)
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	d503      	bpl.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x266>
			{
				Fan_PWM_Duty = 0;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	e018      	b.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x298>
			}
			else if(PWM_Control_Fan > 999.0)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002560 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd04      	ble.n	80024ec <HAL_TIM_PeriodElapsedCallback+0x284>
			{
				Fan_PWM_Duty = 999;
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e009      	b.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x298>
			}
		//Ustawienie PWM jeżeli jest w zakresie
			else
			{
				Fan_PWM_Duty = (uint16_t)PWM_Control_Fan;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f6:	ee17 3a90 	vmov	r3, s15
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80024fe:	801a      	strh	r2, [r3, #0]
			}
//			if (Fan_PWM_Duty < 250)
//			{
//				Fan_PWM_Duty = 250;
//			}
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Fan_PWM_Duty);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
		{
			Fan_PWM_Duty = 0;
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Fan_PWM_Duty);
		}
	}
}
 800250a:	e007      	b.n	800251c <HAL_TIM_PeriodElapsedCallback+0x2b4>
			Fan_PWM_Duty = 0;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Fan_PWM_Duty);
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002514:	881a      	ldrh	r2, [r3, #0]
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800251c:	bf00      	nop
 800251e:	3790      	adds	r7, #144	; 0x90
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	f3af 8000 	nop.w
 8002528:	00000000 	.word	0x00000000
 800252c:	408f3800 	.word	0x408f3800
 8002530:	20000010 	.word	0x20000010
 8002534:	20000258 	.word	0x20000258
 8002538:	0800d0c4 	.word	0x0800d0c4
 800253c:	20000448 	.word	0x20000448
 8002540:	40000c00 	.word	0x40000c00
 8002544:	20000254 	.word	0x20000254
 8002548:	2000025c 	.word	0x2000025c
 800254c:	2000028c 	.word	0x2000028c
 8002550:	20000264 	.word	0x20000264
 8002554:	20000268 	.word	0x20000268
 8002558:	20000260 	.word	0x20000260
 800255c:	20000250 	.word	0x20000250
 8002560:	4479c000 	.word	0x4479c000
 8002564:	20000364 	.word	0x20000364
 8002568:	20000252 	.word	0x20000252

0800256c <LCD_print_temperature>:

void LCD_print_temperature()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	LCD_write_text("Temp ref:");
 8002570:	4815      	ldr	r0, [pc, #84]	; (80025c8 <LCD_print_temperature+0x5c>)
 8002572:	f7fe fbcb 	bl	8000d0c <LCD_write_text>
	LCD_printf("%2.02f",temperature_reference);
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <LCD_print_temperature+0x60>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002580:	ec53 2b17 	vmov	r2, r3, d7
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <LCD_print_temperature+0x64>)
 8002586:	f7fe fc0b 	bl	8000da0 <LCD_printf>
	LCD_printf(" C");
 800258a:	4812      	ldr	r0, [pc, #72]	; (80025d4 <LCD_print_temperature+0x68>)
 800258c:	f7fe fc08 	bl	8000da0 <LCD_printf>
	LCD_goto_line(1);
 8002590:	2001      	movs	r0, #1
 8002592:	f7fe fbf7 	bl	8000d84 <LCD_goto_line>
	LCD_write_text("Temp cur:");
 8002596:	4810      	ldr	r0, [pc, #64]	; (80025d8 <LCD_print_temperature+0x6c>)
 8002598:	f7fe fbb8 	bl	8000d0c <LCD_write_text>
	LCD_printf("%2.02f",temperature_current);
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <LCD_print_temperature+0x70>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a6:	ec53 2b17 	vmov	r2, r3, d7
 80025aa:	4809      	ldr	r0, [pc, #36]	; (80025d0 <LCD_print_temperature+0x64>)
 80025ac:	f7fe fbf8 	bl	8000da0 <LCD_printf>
	LCD_write_text(" C");
 80025b0:	4808      	ldr	r0, [pc, #32]	; (80025d4 <LCD_print_temperature+0x68>)
 80025b2:	f7fe fbab 	bl	8000d0c <LCD_write_text>
	LCD_goto_line(2);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7fe fbe4 	bl	8000d84 <LCD_goto_line>
	HAL_Delay(100);
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	f000 fedd 	bl	800337c <HAL_Delay>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0800d110 	.word	0x0800d110
 80025cc:	20000258 	.word	0x20000258
 80025d0:	0800d11c 	.word	0x0800d11c
 80025d4:	0800d124 	.word	0x0800d124
 80025d8:	0800d128 	.word	0x0800d128
 80025dc:	20000254 	.word	0x20000254

080025e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e4:	f000 fe64 	bl	80032b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e8:	f000 f8c0 	bl	800276c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); //GPIO Init
 80025ec:	f7ff fca4 	bl	8001f38 <MX_GPIO_Init>
  MX_USART3_UART_Init();	//USART Init
 80025f0:	f000 fd2e 	bl	8003050 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80025f4:	f000 fda8 	bl	8003148 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();	//TIM2 : Wysyłanie wiadomości
 80025f8:	f000 fb24 	bl	8002c44 <MX_TIM2_Init>
  MX_TIM3_Init();	//TIM3 : PWM
 80025fc:	f000 fb70 	bl	8002ce0 <MX_TIM3_Init>
  MX_SPI4_Init();	//SPI4 Init
 8002600:	f000 f92c 	bl	800285c <MX_SPI4_Init>
  MX_TIM5_Init();	//TIM5 : Sterowanie grzałką i wentylatorem
 8002604:	f000 fbee 	bl	8002de4 <MX_TIM5_Init>
  MX_TIM7_Init();	//TIM7 : Sterowanie LCD
 8002608:	f000 fc3c 	bl	8002e84 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja czujnika BMP i ustawienie temperatury referencyjnej

	BMP2_Init(&hbmp2_1);
 800260c:	4848      	ldr	r0, [pc, #288]	; (8002730 <main+0x150>)
 800260e:	f7ff fb19 	bl	8001c44 <BMP2_Init>

	temperature_reference = 30.00;
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <main+0x154>)
 8002614:	4a48      	ldr	r2, [pc, #288]	; (8002738 <main+0x158>)
 8002616:	601a      	str	r2, [r3, #0]

// Regulator PID : Grzałka

	PID1.Kp = 1.3;
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <main+0x15c>)
 800261a:	4a49      	ldr	r2, [pc, #292]	; (8002740 <main+0x160>)
 800261c:	619a      	str	r2, [r3, #24]
	PID1.Ki = 0.001*Tp;
 800261e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002626:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002718 <main+0x138>
 800262a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800262e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <main+0x15c>)
 8002634:	edc3 7a07 	vstr	s15, [r3, #28]
	PID1.Kd = 3.3/Tp;
 8002638:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800263c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002640:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002720 <main+0x140>
 8002644:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002648:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800264c:	4b3b      	ldr	r3, [pc, #236]	; (800273c <main+0x15c>)
 800264e:	edc3 7a08 	vstr	s15, [r3, #32]
	arm_pid_init_f32(&PID1, 1);
 8002652:	2101      	movs	r1, #1
 8002654:	4839      	ldr	r0, [pc, #228]	; (800273c <main+0x15c>)
 8002656:	f005 fca5 	bl	8007fa4 <arm_pid_init_f32>

// Regulator PID : Wentylator

	PID2.Kp = 1;
 800265a:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <main+0x164>)
 800265c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002660:	619a      	str	r2, [r3, #24]
	PID2.Ki = 0.1*Tp;
 8002662:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002666:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800266a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8002728 <main+0x148>
 800266e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002672:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <main+0x164>)
 8002678:	edc3 7a07 	vstr	s15, [r3, #28]
	PID2.Kd = 0;
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <main+0x164>)
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&PID2, 1);
 8002684:	2101      	movs	r1, #1
 8002686:	482f      	ldr	r0, [pc, #188]	; (8002744 <main+0x164>)
 8002688:	f005 fc8c 	bl	8007fa4 <arm_pid_init_f32>


	msg_len = strlen("C000\r");
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <main+0x168>)
 800268e:	2205      	movs	r2, #5
 8002690:	801a      	strh	r2, [r3, #0]

// Start PWM : Grzałka

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002692:	2100      	movs	r1, #0
 8002694:	482d      	ldr	r0, [pc, #180]	; (800274c <main+0x16c>)
 8002696:	f003 f87d 	bl	8005794 <HAL_TIM_PWM_Start>
	PWM_Control_Heater = 0;
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <main+0x170>)
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_Control_Heater);
 80026a2:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <main+0x170>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <main+0x16c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b0:	ee17 2a90 	vmov	r2, s15
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

// Start PWM : Wentylator

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80026b6:	2104      	movs	r1, #4
 80026b8:	4824      	ldr	r0, [pc, #144]	; (800274c <main+0x16c>)
 80026ba:	f003 f86b 	bl	8005794 <HAL_TIM_PWM_Start>
	PWM_Control_Fan = 0;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <main+0x174>)
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, PWM_Control_Fan);
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <main+0x174>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <main+0x16c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d4:	ee17 2a90 	vmov	r2, s15
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38

// Start Timerów z przerwaniami

	HAL_TIM_Base_Start_IT(&htim2);
 80026da:	481f      	ldr	r0, [pc, #124]	; (8002758 <main+0x178>)
 80026dc:	f002 ff80 	bl	80055e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80026e0:	481e      	ldr	r0, [pc, #120]	; (800275c <main+0x17c>)
 80026e2:	f002 ff7d 	bl	80055e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80026e6:	481e      	ldr	r0, [pc, #120]	; (8002760 <main+0x180>)
 80026e8:	f002 ff7a 	bl	80055e0 <HAL_TIM_Base_Start_IT>

// Odbiór UART z przerwaniami
	HAL_UART_Receive_IT(&huart3, Data, msg_len);
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <main+0x168>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	491c      	ldr	r1, [pc, #112]	; (8002764 <main+0x184>)
 80026f4:	481c      	ldr	r0, [pc, #112]	; (8002768 <main+0x188>)
 80026f6:	f004 f9b0 	bl	8006a5a <HAL_UART_Receive_IT>


// Inicjalizacja LCD

	LCD_init();
 80026fa:	f7fe f98d 	bl	8000a18 <LCD_init>
	LCD_write_command(LCD_CLEAR_INSTRUCTION);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe fac9 	bl	8000c96 <LCD_write_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		LCD_print_temperature();
 8002704:	f7ff ff32 	bl	800256c <LCD_print_temperature>
		HAL_Delay(1000);
 8002708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800270c:	f000 fe36 	bl	800337c <HAL_Delay>
		LCD_print_temperature();
 8002710:	e7f8      	b.n	8002704 <main+0x124>
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	d2f1a9fc 	.word	0xd2f1a9fc
 800271c:	3f50624d 	.word	0x3f50624d
 8002720:	66666666 	.word	0x66666666
 8002724:	400a6666 	.word	0x400a6666
 8002728:	9999999a 	.word	0x9999999a
 800272c:	3fb99999 	.word	0x3fb99999
 8002730:	20000010 	.word	0x20000010
 8002734:	20000258 	.word	0x20000258
 8002738:	41f00000 	.word	0x41f00000
 800273c:	20000268 	.word	0x20000268
 8002740:	3fa66666 	.word	0x3fa66666
 8002744:	2000028c 	.word	0x2000028c
 8002748:	2000024e 	.word	0x2000024e
 800274c:	20000364 	.word	0x20000364
 8002750:	20000260 	.word	0x20000260
 8002754:	20000264 	.word	0x20000264
 8002758:	20000318 	.word	0x20000318
 800275c:	200003b0 	.word	0x200003b0
 8002760:	200003fc 	.word	0x200003fc
 8002764:	20000248 	.word	0x20000248
 8002768:	20000448 	.word	0x20000448

0800276c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b094      	sub	sp, #80	; 0x50
 8002770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	2234      	movs	r2, #52	; 0x34
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fc68 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002790:	f001 faee 	bl	8003d70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <SystemClock_Config+0xdc>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <SystemClock_Config+0xdc>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <SystemClock_Config+0xdc>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <SystemClock_Config+0xe0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <SystemClock_Config+0xe0>)
 80027b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <SystemClock_Config+0xe0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d2:	2302      	movs	r3, #2
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027dc:	2304      	movs	r3, #4
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80027e0:	2360      	movs	r3, #96	; 0x60
 80027e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027e4:	2302      	movs	r3, #2
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027e8:	2304      	movs	r3, #4
 80027ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027ec:	2302      	movs	r3, #2
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fb1b 	bl	8003e30 <HAL_RCC_OscConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002800:	f000 f826 	bl	8002850 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002804:	f001 fac4 	bl	8003d90 <HAL_PWREx_EnableOverDrive>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800280e:	f000 f81f 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002812:	230f      	movs	r3, #15
 8002814:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002816:	2302      	movs	r3, #2
 8002818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	2103      	movs	r1, #3
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fdac 	bl	800438c <HAL_RCC_ClockConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800283a:	f000 f809 	bl	8002850 <Error_Handler>
  }
}
 800283e:	bf00      	nop
 8002840:	3750      	adds	r7, #80	; 0x50
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002858:	e7fe      	b.n	8002858 <Error_Handler+0x8>
	...

0800285c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <MX_SPI4_Init+0x78>)
 8002864:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800286c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002876:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800287a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_SPI4_Init+0x74>)
 800287e:	2202      	movs	r2, #2
 8002880:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002884:	2201      	movs	r2, #1
 8002886:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_SPI4_Init+0x74>)
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002892:	2210      	movs	r2, #16
 8002894:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002896:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <MX_SPI4_Init+0x74>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <MX_SPI4_Init+0x74>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <MX_SPI4_Init+0x74>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <MX_SPI4_Init+0x74>)
 80028aa:	2207      	movs	r2, #7
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <MX_SPI4_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <MX_SPI4_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_SPI4_Init+0x74>)
 80028bc:	f001 ff8c 	bl	80047d8 <HAL_SPI_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80028c6:	f7ff ffc3 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200002b0 	.word	0x200002b0
 80028d4:	40013400 	.word	0x40013400

080028d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <HAL_SPI_MspInit+0x8c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12f      	bne.n	800295a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_SPI_MspInit+0x90>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_SPI_MspInit+0x90>)
 8002900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_SPI_MspInit+0x90>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_SPI_MspInit+0x90>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_SPI_MspInit+0x90>)
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_SPI_MspInit+0x90>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800292a:	2364      	movs	r3, #100	; 0x64
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800293a:	2305      	movs	r3, #5
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_SPI_MspInit+0x94>)
 8002946:	f000 fee1 	bl	800370c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2054      	movs	r0, #84	; 0x54
 8002950:	f000 fe13 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002954:	2054      	movs	r0, #84	; 0x54
 8002956:	f000 fe2c 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40013400 	.word	0x40013400
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_MspInit+0x44>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_MspInit+0x44>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_MspInit+0x44>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_MspInit+0x44>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <HAL_MspInit+0x44>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_MspInit+0x44>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <NMI_Handler+0x4>

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <MemManage_Handler+0x4>

080029ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a04:	f000 fc9a 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <TIM2_IRQHandler+0x10>)
 8002a12:	f002 ffb9 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000318 	.word	0x20000318

08002a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <TIM3_IRQHandler+0x10>)
 8002a26:	f002 ffaf 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000364 	.word	0x20000364

08002a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <USART3_IRQHandler+0x10>)
 8002a3a:	f004 f84b 	bl	8006ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000448 	.word	0x20000448

08002a48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002a4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a50:	f001 f822 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <TIM5_IRQHandler+0x10>)
 8002a5e:	f002 ff93 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200003b0 	.word	0x200003b0

08002a6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <TIM7_IRQHandler+0x10>)
 8002a72:	f002 ff89 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200003fc 	.word	0x200003fc

08002a80 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <SPI4_IRQHandler+0x10>)
 8002a86:	f002 fad3 	bl	8005030 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200002b0 	.word	0x200002b0

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aae:	f005 fa97 	bl	8007fe0 <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x12>

08002ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00a      	b.n	8002b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aea:	f3af 8000 	nop.w
 8002aee:	4601      	mov	r1, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf0      	blt.n	8002aea <_read+0x12>
	}

return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e009      	b.n	8002b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf1      	blt.n	8002b24 <_write+0x12>
	}
	return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_close>:

int _close(int file)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	605a      	str	r2, [r3, #4]
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_isatty>:

int _isatty(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f005 f9fc 	bl	8007fe0 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20080000 	.word	0x20080000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	20000314 	.word	0x20000314
 8002c1c:	200008e8 	.word	0x200008e8

08002c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <SystemInit+0x20>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <SystemInit+0x20>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c6c:	225f      	movs	r2, #95	; 0x5f
 8002c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c88:	4813      	ldr	r0, [pc, #76]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002c8a:	f002 fc51 	bl	8005530 <HAL_TIM_Base_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c94:	f7ff fddc 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002ca6:	f003 f89f 	bl	8005de8 <HAL_TIM_ConfigClockSource>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002cb0:	f7ff fdce 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_TIM2_Init+0x94>)
 8002cc2:	f003 fd3d 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ccc:	f7ff fdc0 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000318 	.word	0x20000318
 8002cdc:	000f423f 	.word	0x000f423f

08002ce0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08e      	sub	sp, #56	; 0x38
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	611a      	str	r2, [r3, #16]
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d12:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d14:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <MX_TIM3_Init+0x100>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8002d18:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d1a:	225f      	movs	r2, #95	; 0x5f
 8002d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d38:	4828      	ldr	r0, [pc, #160]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d3a:	f002 fbf9 	bl	8005530 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d44:	f7ff fd84 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d52:	4619      	mov	r1, r3
 8002d54:	4821      	ldr	r0, [pc, #132]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d56:	f003 f847 	bl	8005de8 <HAL_TIM_ConfigClockSource>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d60:	f7ff fd76 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d64:	481d      	ldr	r0, [pc, #116]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d66:	f002 fcb3 	bl	80056d0 <HAL_TIM_PWM_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d70:	f7ff fd6e 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	4619      	mov	r1, r3
 8002d82:	4816      	ldr	r0, [pc, #88]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002d84:	f003 fcdc 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d8e:	f7ff fd5f 	bl	8002850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d92:	2360      	movs	r3, #96	; 0x60
 8002d94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002da2:	463b      	mov	r3, r7
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002daa:	f002 ff0d 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002db4:	f7ff fd4c 	bl	8002850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db8:	463b      	mov	r3, r7
 8002dba:	2204      	movs	r2, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4807      	ldr	r0, [pc, #28]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002dc0:	f002 ff02 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002dca:	f7ff fd41 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dce:	4803      	ldr	r0, [pc, #12]	; (8002ddc <MX_TIM3_Init+0xfc>)
 8002dd0:	f000 f906 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8002dd4:	bf00      	nop
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000364 	.word	0x20000364
 8002de0:	40000400 	.word	0x40000400

08002de4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e04:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <MX_TIM5_Init+0x98>)
 8002e06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e0a:	225f      	movs	r2, #95	; 0x5f
 8002e0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 249999;
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <MX_TIM5_Init+0x9c>)
 8002e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e26:	4814      	ldr	r0, [pc, #80]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e28:	f002 fb82 	bl	8005530 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002e32:	f7ff fd0d 	bl	8002850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4619      	mov	r1, r3
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e44:	f002 ffd0 	bl	8005de8 <HAL_TIM_ConfigClockSource>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002e4e:	f7ff fcff 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4806      	ldr	r0, [pc, #24]	; (8002e78 <MX_TIM5_Init+0x94>)
 8002e60:	f003 fc6e 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002e6a:	f7ff fcf1 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200003b0 	.word	0x200003b0
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	0003d08f 	.word	0x0003d08f

08002e84 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <MX_TIM7_Init+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 95;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002e9c:	225f      	movs	r2, #95	; 0x5f
 8002e9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8999;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002ea8:	f242 3227 	movw	r2, #8999	; 0x2327
 8002eac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002eb6:	f002 fb3b 	bl	8005530 <HAL_TIM_Base_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002ec0:	f7ff fcc6 	bl	8002850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_TIM7_Init+0x64>)
 8002ed2:	f003 fc35 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002edc:	f7ff fcb8 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200003fc 	.word	0x200003fc
 8002eec:	40001400 	.word	0x40001400

08002ef0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d114      	bne.n	8002f2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f02:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	201c      	movs	r0, #28
 8002f20:	f000 fb2b 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f24:	201c      	movs	r0, #28
 8002f26:	f000 fb44 	bl	80035b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002f2a:	e04c      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_TIM_Base_MspInit+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d114      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	201d      	movs	r0, #29
 8002f54:	f000 fb11 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f58:	201d      	movs	r0, #29
 8002f5a:	f000 fb2a 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002f5e:	e032      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_TIM_Base_MspInit+0xe8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d114      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	2032      	movs	r0, #50	; 0x32
 8002f88:	f000 faf7 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f8c:	2032      	movs	r0, #50	; 0x32
 8002f8e:	f000 fb10 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002f92:	e018      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_TIM_Base_MspInit+0xec>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2037      	movs	r0, #55	; 0x37
 8002fbc:	f000 fadd 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fc0:	2037      	movs	r0, #55	; 0x37
 8002fc2:	f000 faf6 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40001400 	.word	0x40001400

08002fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_TIM_MspPostInit+0x64>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d11b      	bne.n	800303a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_TIM_MspPostInit+0x68>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_TIM_MspPostInit+0x68>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_TIM_MspPostInit+0x68>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800301a:	23c0      	movs	r3, #192	; 0xc0
 800301c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800302a:	2302      	movs	r3, #2
 800302c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <HAL_TIM_MspPostInit+0x6c>)
 8003036:	f000 fb69 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40000400 	.word	0x40000400
 8003048:	40023800 	.word	0x40023800
 800304c:	40020800 	.word	0x40020800

08003050 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003056:	4a15      	ldr	r2, [pc, #84]	; (80030ac <MX_USART3_UART_Init+0x5c>)
 8003058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 800305c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003076:	220c      	movs	r2, #12
 8003078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_USART3_UART_Init+0x58>)
 8003094:	f003 fc00 	bl	8006898 <HAL_UART_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800309e:	f7ff fbd7 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000448 	.word	0x20000448
 80030ac:	40004800 	.word	0x40004800

080030b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_UART_MspInit+0x8c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d130      	bne.n	8003134 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_UART_MspInit+0x90>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003114:	2307      	movs	r3, #7
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4619      	mov	r1, r3
 800311e:	4809      	ldr	r0, [pc, #36]	; (8003144 <HAL_UART_MspInit+0x94>)
 8003120:	f000 faf4 	bl	800370c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	2027      	movs	r0, #39	; 0x27
 800312a:	f000 fa26 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800312e:	2027      	movs	r0, #39	; 0x27
 8003130:	f000 fa3f 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003134:	bf00      	nop
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40004800 	.word	0x40004800
 8003140:	40023800 	.word	0x40023800
 8003144:	40020c00 	.word	0x40020c00

08003148 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800314e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003152:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003156:	2206      	movs	r2, #6
 8003158:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800315c:	2202      	movs	r2, #2
 800315e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003162:	2200      	movs	r2, #0
 8003164:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003168:	2202      	movs	r2, #2
 800316a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316e:	2201      	movs	r2, #1
 8003170:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317a:	2200      	movs	r2, #0
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003180:	2201      	movs	r2, #1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318c:	f000 fca7 	bl	8003ade <HAL_PCD_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003196:	f7ff fb5b 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200004cc 	.word	0x200004cc

080031a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d141      	bne.n	800324a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80031de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80031e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031f0:	230a      	movs	r3, #10
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	4817      	ldr	r0, [pc, #92]	; (8003258 <HAL_PCD_MspInit+0xb4>)
 80031fc:	f000 fa86 	bl	800370c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	4619      	mov	r1, r3
 8003214:	4810      	ldr	r0, [pc, #64]	; (8003258 <HAL_PCD_MspInit+0xb4>)
 8003216:	f000 fa79 	bl	800370c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	6353      	str	r3, [r2, #52]	; 0x34
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 8003238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_PCD_MspInit+0xb0>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000

0800325c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800325c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003262:	490e      	ldr	r1, [pc, #56]	; (800329c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003268:	e002      	b.n	8003270 <LoopCopyDataInit>

0800326a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800326c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326e:	3304      	adds	r3, #4

08003270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003274:	d3f9      	bcc.n	800326a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003276:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003278:	4c0b      	ldr	r4, [pc, #44]	; (80032a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800327c:	e001      	b.n	8003282 <LoopFillZerobss>

0800327e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003280:	3204      	adds	r2, #4

08003282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003284:	d3fb      	bcc.n	800327e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003286:	f7ff fccb 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328a:	f004 feaf 	bl	8007fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328e:	f7ff f9a7 	bl	80025e0 <main>
  bx  lr    
 8003292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003294:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800329c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80032a0:	0800d624 	.word	0x0800d624
  ldr r2, =_sbss
 80032a4:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80032a8:	200008e4 	.word	0x200008e4

080032ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC_IRQHandler>
	...

080032b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_Init+0x28>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_Init+0x28>)
 80032ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032be:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c0:	2003      	movs	r0, #3
 80032c2:	f000 f94f 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f000 f808 	bl	80032dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032cc:	f7ff fb50 	bl	8002970 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00

080032dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f967 	bl	80035ce <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 f92f 	bl	800357a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2000004c 	.word	0x2000004c
 8003334:	20000054 	.word	0x20000054
 8003338:	20000050 	.word	0x20000050

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000054 	.word	0x20000054
 8003360:	200008d0 	.word	0x200008d0

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200008d0 	.word	0x200008d0

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_Delay+0x44>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000054 	.word	0x20000054

080033c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <__NVIC_SetPriorityGrouping+0x40>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <__NVIC_SetPriorityGrouping+0x40>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00
 8003408:	05fa0000 	.word	0x05fa0000

0800340c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff29 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800358c:	f7ff ff3e 	bl	800340c <__NVIC_GetPriorityGrouping>
 8003590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff8e 	bl	80034b8 <NVIC_EncodePriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff5d 	bl	8003464 <__NVIC_SetPriority>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff31 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffa2 	bl	8003520 <SysTick_Config>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff feb6 	bl	8003364 <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d008      	beq.n	8003618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e052      	b.n	80036be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0216 	bic.w	r2, r2, #22
 8003626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <HAL_DMA_Abort+0x62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0208 	bic.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003668:	e013      	b.n	8003692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800366a:	f7ff fe7b 	bl	8003364 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b05      	cmp	r3, #5
 8003676:	d90c      	bls.n	8003692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e015      	b.n	80036be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e4      	bne.n	800366a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	223f      	movs	r2, #63	; 0x3f
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00c      	b.n	80036fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2205      	movs	r2, #5
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e175      	b.n	8003a18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800372c:	2201      	movs	r2, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 8164 	bne.w	8003a12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d00b      	beq.n	800376a <HAL_GPIO_Init+0x5e>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d007      	beq.n	800376a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800375e:	2b11      	cmp	r3, #17
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b12      	cmp	r3, #18
 8003768:	d130      	bne.n	80037cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	2203      	movs	r2, #3
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a0:	2201      	movs	r2, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 0201 	and.w	r2, r3, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x100>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b12      	cmp	r3, #18
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80be 	beq.w	8003a12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_GPIO_Init+0x324>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_GPIO_Init+0x324>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <HAL_GPIO_Init+0x324>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038ae:	4a61      	ldr	r2, [pc, #388]	; (8003a34 <HAL_GPIO_Init+0x328>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d037      	beq.n	800394a <HAL_GPIO_Init+0x23e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a57      	ldr	r2, [pc, #348]	; (8003a3c <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_GPIO_Init+0x23a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a56      	ldr	r2, [pc, #344]	; (8003a40 <HAL_GPIO_Init+0x334>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <HAL_GPIO_Init+0x236>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a55      	ldr	r2, [pc, #340]	; (8003a44 <HAL_GPIO_Init+0x338>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d025      	beq.n	800393e <HAL_GPIO_Init+0x232>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a54      	ldr	r2, [pc, #336]	; (8003a48 <HAL_GPIO_Init+0x33c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <HAL_GPIO_Init+0x22e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_GPIO_Init+0x340>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x22a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_GPIO_Init+0x344>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x226>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_GPIO_Init+0x348>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x222>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_GPIO_Init+0x34c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x21e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4f      	ldr	r2, [pc, #316]	; (8003a5c <HAL_GPIO_Init+0x350>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x21a>
 8003922:	2309      	movs	r3, #9
 8003924:	e012      	b.n	800394c <HAL_GPIO_Init+0x240>
 8003926:	230a      	movs	r3, #10
 8003928:	e010      	b.n	800394c <HAL_GPIO_Init+0x240>
 800392a:	2308      	movs	r3, #8
 800392c:	e00e      	b.n	800394c <HAL_GPIO_Init+0x240>
 800392e:	2307      	movs	r3, #7
 8003930:	e00c      	b.n	800394c <HAL_GPIO_Init+0x240>
 8003932:	2306      	movs	r3, #6
 8003934:	e00a      	b.n	800394c <HAL_GPIO_Init+0x240>
 8003936:	2305      	movs	r3, #5
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x240>
 800393a:	2304      	movs	r3, #4
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x240>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x240>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x240>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x240>
 800394a:	2300      	movs	r3, #0
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f002 0203 	and.w	r2, r2, #3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	; (8003a34 <HAL_GPIO_Init+0x328>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_GPIO_Init+0x354>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800398e:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_GPIO_Init+0x354>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003994:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <HAL_GPIO_Init+0x354>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b8:	4a29      	ldr	r2, [pc, #164]	; (8003a60 <HAL_GPIO_Init+0x354>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039be:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_GPIO_Init+0x354>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_GPIO_Init+0x354>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_GPIO_Init+0x354>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <HAL_GPIO_Init+0x354>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	f67f ae86 	bls.w	800372c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021800 	.word	0x40021800
 8003a54:	40021c00 	.word	0x40021c00
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	40022400 	.word	0x40022400
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f806 	bl	8003ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae0:	b08f      	sub	sp, #60	; 0x3c
 8003ae2:	af0a      	add	r7, sp, #40	; 0x28
 8003ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e116      	b.n	8003d1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fb4a 	bl	80031a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2203      	movs	r2, #3
 8003b14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 ffd8 	bl	8007ae4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	687e      	ldr	r6, [r7, #4]
 8003b3c:	466d      	mov	r5, sp
 8003b3e:	f106 0410 	add.w	r4, r6, #16
 8003b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b52:	1d33      	adds	r3, r6, #4
 8003b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b56:	6838      	ldr	r0, [r7, #0]
 8003b58:	f003 ff6c 	bl	8007a34 <USB_CoreInit>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0d7      	b.n	8003d1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 ffc6 	bl	8007b06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e04a      	b.n	8003c16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	333d      	adds	r3, #61	; 0x3d
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333c      	adds	r3, #60	; 0x3c
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	b298      	uxth	r0, r3
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3342      	adds	r3, #66	; 0x42
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	333f      	adds	r3, #63	; 0x3f
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3344      	adds	r3, #68	; 0x44
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3348      	adds	r3, #72	; 0x48
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3350      	adds	r3, #80	; 0x50
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	3301      	adds	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d3af      	bcc.n	8003b80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	e044      	b.n	8003cb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	3301      	adds	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3b5      	bcc.n	8003c26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	687e      	ldr	r6, [r7, #4]
 8003cc2:	466d      	mov	r5, sp
 8003cc4:	f106 0410 	add.w	r4, r6, #16
 8003cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cd8:	1d33      	adds	r3, r6, #4
 8003cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cdc:	6838      	ldr	r0, [r7, #0]
 8003cde:	f003 ff3d 	bl	8007b5c <USB_DevInit>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e014      	b.n	8003d1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d102      	bne.n	8003d12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f80b 	bl	8003d28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f004 f8ef 	bl	8007efa <USB_DevDisconnect>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PCDEx_ActivateLPM+0x44>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	10000003 	.word	0x10000003

08003d70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	6013      	str	r3, [r2, #0]
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40007000 	.word	0x40007000

08003d90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dbe:	f7ff fad1 	bl	8003364 <HAL_GetTick>
 8003dc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dc4:	e009      	b.n	8003dda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dc6:	f7ff facd 	bl	8003364 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd4:	d901      	bls.n	8003dda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e022      	b.n	8003e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d1ee      	bne.n	8003dc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0f      	ldr	r2, [pc, #60]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003df4:	f7ff fab6 	bl	8003364 <HAL_GetTick>
 8003df8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dfa:	e009      	b.n	8003e10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dfc:	f7ff fab2 	bl	8003364 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e0a:	d901      	bls.n	8003e10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e007      	b.n	8003e20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e1c:	d1ee      	bne.n	8003dfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000

08003e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e29b      	b.n	800437e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8087 	beq.w	8003f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e54:	4b96      	ldr	r3, [pc, #600]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d00c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e60:	4b93      	ldr	r3, [pc, #588]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d112      	bne.n	8003e92 <HAL_RCC_OscConfig+0x62>
 8003e6c:	4b90      	ldr	r3, [pc, #576]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e78:	d10b      	bne.n	8003e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7a:	4b8d      	ldr	r3, [pc, #564]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d06c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x130>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d168      	bne.n	8003f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e275      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x7a>
 8003e9c:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a83      	ldr	r2, [pc, #524]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	e02e      	b.n	8003f08 <HAL_RCC_OscConfig+0xd8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x9c>
 8003eb2:	4b7f      	ldr	r3, [pc, #508]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7e      	ldr	r2, [pc, #504]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7b      	ldr	r2, [pc, #492]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e01d      	b.n	8003f08 <HAL_RCC_OscConfig+0xd8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a72      	ldr	r2, [pc, #456]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0xd8>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7ff fa28 	bl	8003364 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7ff fa24 	bl	8003364 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e229      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7ff fa14 	bl	8003364 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7ff fa10 	bl	8003364 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e215      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x110>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d069      	beq.n	8004042 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f6e:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7a:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d11c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x190>
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x17a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1e9      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	493d      	ldr	r1, [pc, #244]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	e040      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d023      	beq.n	8004010 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc8:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7ff f9c6 	bl	8003364 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7ff f9c2 	bl	8003364 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1c7      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4929      	ldr	r1, [pc, #164]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
 800400e:	e018      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7ff f9a2 	bl	8003364 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7ff f99e 	bl	8003364 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1a3      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d038      	beq.n	80040c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d019      	beq.n	800408a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8004058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7ff f97f 	bl	8003364 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406a:	f7ff f97b 	bl	8003364 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e180      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407c:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x23a>
 8004088:	e01a      	b.n	80040c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 800408c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <HAL_RCC_OscConfig+0x280>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7ff f965 	bl	8003364 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409e:	f7ff f961 	bl	8003364 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d903      	bls.n	80040b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e166      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
 80040b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a4 	beq.w	8004216 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ce:	4b8c      	ldr	r3, [pc, #560]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a88      	ldr	r2, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b86      	ldr	r3, [pc, #536]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f6:	4b83      	ldr	r3, [pc, #524]	; (8004304 <HAL_RCC_OscConfig+0x4d4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004102:	4b80      	ldr	r3, [pc, #512]	; (8004304 <HAL_RCC_OscConfig+0x4d4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7f      	ldr	r2, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x4d4>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7ff f929 	bl	8003364 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7ff f925 	bl	8003364 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b64      	cmp	r3, #100	; 0x64
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e12a      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004128:	4b76      	ldr	r3, [pc, #472]	; (8004304 <HAL_RCC_OscConfig+0x4d4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x31a>
 800413c:	4b70      	ldr	r3, [pc, #448]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a6f      	ldr	r2, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	e02d      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x33c>
 8004152:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a6a      	ldr	r2, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
 800415e:	4b68      	ldr	r3, [pc, #416]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a67      	ldr	r2, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	e01c      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d10c      	bne.n	800418e <HAL_RCC_OscConfig+0x35e>
 8004174:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a61      	ldr	r2, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	4b5f      	ldr	r3, [pc, #380]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a5e      	ldr	r2, [pc, #376]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	e00b      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
 800418e:	4b5c      	ldr	r3, [pc, #368]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a5b      	ldr	r2, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	; 0x70
 800419a:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d015      	beq.n	80041da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7ff f8d9 	bl	8003364 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7ff f8d5 	bl	8003364 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0d8      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041cc:	4b4c      	ldr	r3, [pc, #304]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ee      	beq.n	80041b6 <HAL_RCC_OscConfig+0x386>
 80041d8:	e014      	b.n	8004204 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7ff f8c3 	bl	8003364 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7ff f8bf 	bl	8003364 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0c2      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ee      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80ae 	beq.w	800437c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004220:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d06d      	beq.n	8004308 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d14b      	bne.n	80042cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a31      	ldr	r2, [pc, #196]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7ff f890 	bl	8003364 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7ff f88c 	bl	8003364 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e091      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	491b      	ldr	r1, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 800429e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7ff f85e 	bl	8003364 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ac:	f7ff f85a 	bl	8003364 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e05f      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x47c>
 80042ca:	e057      	b.n	800437c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7ff f844 	bl	8003364 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7ff f840 	bl	8003364 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e045      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4b0>
 80042fe:	e03d      	b.n	800437c <HAL_RCC_OscConfig+0x54c>
 8004300:	40023800 	.word	0x40023800
 8004304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <HAL_RCC_OscConfig+0x558>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d030      	beq.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d129      	bne.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d122      	bne.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004340:	4293      	cmp	r3, r2
 8004342:	d119      	bne.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d10f      	bne.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0d0      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d910      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	4965      	ldr	r1, [pc, #404]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0b8      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043ec:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 80043f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004404:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 800440a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800440e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	494d      	ldr	r1, [pc, #308]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d040      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07f      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e073      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e06b      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4936      	ldr	r1, [pc, #216]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004480:	f7fe ff70 	bl	8003364 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fe ff6c 	bl	8003364 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e053      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d210      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 020f 	bic.w	r2, r3, #15
 80044c6:	4922      	ldr	r1, [pc, #136]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e032      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4916      	ldr	r1, [pc, #88]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	490e      	ldr	r1, [pc, #56]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451e:	f000 f821 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8004522:	4602      	mov	r2, r0
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	490a      	ldr	r1, [pc, #40]	; (8004558 <HAL_RCC_ClockConfig+0x1cc>)
 8004530:	5ccb      	ldrb	r3, [r1, r3]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_ClockConfig+0x1d0>)
 8004538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x1d4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fecc 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023c00 	.word	0x40023c00
 8004554:	40023800 	.word	0x40023800
 8004558:	0800d140 	.word	0x0800d140
 800455c:	2000004c 	.word	0x2000004c
 8004560:	20000050 	.word	0x20000050

08004564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004568:	b094      	sub	sp, #80	; 0x50
 800456a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	2300      	movs	r3, #0
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	2300      	movs	r3, #0
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800457c:	4b79      	ldr	r3, [pc, #484]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d00d      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004588:	2b08      	cmp	r3, #8
 800458a:	f200 80e1 	bhi.w	8004750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x34>
 8004592:	2b04      	cmp	r3, #4
 8004594:	d003      	beq.n	800459e <HAL_RCC_GetSysClockFreq+0x3a>
 8004596:	e0db      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b73      	ldr	r3, [pc, #460]	; (8004768 <HAL_RCC_GetSysClockFreq+0x204>)
 800459a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459c:	e0db      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459e:	4b73      	ldr	r3, [pc, #460]	; (800476c <HAL_RCC_GetSysClockFreq+0x208>)
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045a2:	e0d8      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a4:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045ae:	4b6d      	ldr	r3, [pc, #436]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ba:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	2200      	movs	r2, #0
 80045c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
 80045ce:	2300      	movs	r3, #0
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
 80045d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	f04f 0000 	mov.w	r0, #0
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	0159      	lsls	r1, r3, #5
 80045e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e8:	0150      	lsls	r0, r2, #5
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4621      	mov	r1, r4
 80045f0:	1a51      	subs	r1, r2, r1
 80045f2:	6139      	str	r1, [r7, #16]
 80045f4:	4629      	mov	r1, r5
 80045f6:	eb63 0301 	sbc.w	r3, r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	018b      	lsls	r3, r1, #6
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004612:	4651      	mov	r1, sl
 8004614:	018a      	lsls	r2, r1, #6
 8004616:	4651      	mov	r1, sl
 8004618:	ebb2 0801 	subs.w	r8, r2, r1
 800461c:	4659      	mov	r1, fp
 800461e:	eb63 0901 	sbc.w	r9, r3, r1
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004636:	4690      	mov	r8, r2
 8004638:	4699      	mov	r9, r3
 800463a:	4623      	mov	r3, r4
 800463c:	eb18 0303 	adds.w	r3, r8, r3
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	462b      	mov	r3, r5
 8004644:	eb49 0303 	adc.w	r3, r9, r3
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004656:	4629      	mov	r1, r5
 8004658:	024b      	lsls	r3, r1, #9
 800465a:	4621      	mov	r1, r4
 800465c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004660:	4621      	mov	r1, r4
 8004662:	024a      	lsls	r2, r1, #9
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466a:	2200      	movs	r2, #0
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
 800466e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004674:	f7fb fff8 	bl	8000668 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4613      	mov	r3, r2
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004680:	e058      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004682:	4b38      	ldr	r3, [pc, #224]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	2200      	movs	r2, #0
 800468a:	4618      	mov	r0, r3
 800468c:	4611      	mov	r1, r2
 800468e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	0159      	lsls	r1, r3, #5
 80046aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ae:	0150      	lsls	r0, r2, #5
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4641      	mov	r1, r8
 80046b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ba:	4649      	mov	r1, r9
 80046bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046d4:	ebb2 040a 	subs.w	r4, r2, sl
 80046d8:	eb63 050b 	sbc.w	r5, r3, fp
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	00eb      	lsls	r3, r5, #3
 80046e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ea:	00e2      	lsls	r2, r4, #3
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	18e3      	adds	r3, r4, r3
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	464b      	mov	r3, r9
 80046f8:	eb45 0303 	adc.w	r3, r5, r3
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470a:	4629      	mov	r1, r5
 800470c:	028b      	lsls	r3, r1, #10
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004714:	4621      	mov	r1, r4
 8004716:	028a      	lsls	r2, r1, #10
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	2200      	movs	r2, #0
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	61fa      	str	r2, [r7, #28]
 8004724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004728:	f7fb ff9e 	bl	8000668 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_GetSysClockFreq+0x200>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800474e:	e002      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_GetSysClockFreq+0x204>)
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004758:	4618      	mov	r0, r3
 800475a:	3750      	adds	r7, #80	; 0x50
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	00f42400 	.word	0x00f42400
 800476c:	007a1200 	.word	0x007a1200

08004770 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <HAL_RCC_GetHCLKFreq+0x14>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000004c 	.word	0x2000004c

08004788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800478c:	f7ff fff0 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0a9b      	lsrs	r3, r3, #10
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	0800d150 	.word	0x0800d150

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047b4:	f7ff ffdc 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0b5b      	lsrs	r3, r3, #13
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	0800d150 	.word	0x0800d150

080047d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e09d      	b.n	8004926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d009      	beq.n	8004810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
 8004802:	e005      	b.n	8004810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe f854 	bl	80028d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004850:	d902      	bls.n	8004858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e002      	b.n	800485e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800485c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004866:	d007      	beq.n	8004878 <HAL_SPI_Init+0xa0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	ea42 0103 	orr.w	r1, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	f003 0204 	and.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048f4:	ea42 0103 	orr.w	r1, r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b088      	sub	sp, #32
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_SPI_Transmit+0x22>
 800494c:	2302      	movs	r3, #2
 800494e:	e158      	b.n	8004c02 <HAL_SPI_Transmit+0x2d4>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004958:	f7fe fd04 	bl	8003364 <HAL_GetTick>
 800495c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800496e:	2302      	movs	r3, #2
 8004970:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004972:	e13d      	b.n	8004bf0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_SPI_Transmit+0x52>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004984:	e134      	b.n	8004bf0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2203      	movs	r2, #3
 800498a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d0:	d10f      	bne.n	80049f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d007      	beq.n	8004a10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a18:	d94b      	bls.n	8004ab2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_Transmit+0xfa>
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d13e      	bne.n	8004aa6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	881a      	ldrh	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	1c9a      	adds	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a4c:	e02b      	b.n	8004aa6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d112      	bne.n	8004a82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a80:	e011      	b.n	8004aa6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a82:	f7fe fc6f 	bl	8003364 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d803      	bhi.n	8004a9a <HAL_SPI_Transmit+0x16c>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_Transmit+0x172>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aa4:	e0a4      	b.n	8004bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ce      	bne.n	8004a4e <HAL_SPI_Transmit+0x120>
 8004ab0:	e07c      	b.n	8004bac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x192>
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d170      	bne.n	8004ba2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d912      	bls.n	8004af0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b02      	subs	r3, #2
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aee:	e058      	b.n	8004ba2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	7812      	ldrb	r2, [r2, #0]
 8004afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b16:	e044      	b.n	8004ba2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d12b      	bne.n	8004b7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d912      	bls.n	8004b56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b02      	subs	r3, #2
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b54:	e025      	b.n	8004ba2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b7c:	e011      	b.n	8004ba2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b7e:	f7fe fbf1 	bl	8003364 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d803      	bhi.n	8004b96 <HAL_SPI_Transmit+0x268>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d102      	bne.n	8004b9c <HAL_SPI_Transmit+0x26e>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ba0:	e026      	b.n	8004bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1b5      	bne.n	8004b18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fc77 	bl	80054a4 <SPI_EndRxTxTransaction>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e000      	b.n	8004bf0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b08a      	sub	sp, #40	; 0x28
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x26>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e1fb      	b.n	8005028 <HAL_SPI_TransmitReceive+0x41e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c38:	f7fe fb94 	bl	8003364 <HAL_GetTick>
 8004c3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c50:	887b      	ldrh	r3, [r7, #2]
 8004c52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c54:	7efb      	ldrb	r3, [r7, #27]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00e      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x6e>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x66>
 8004c6a:	7efb      	ldrb	r3, [r7, #27]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d003      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c76:	e1cd      	b.n	8005014 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x80>
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c90:	e1c0      	b.n	8005014 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	887a      	ldrh	r2, [r7, #2]
 8004cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	887a      	ldrh	r2, [r7, #2]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	887a      	ldrh	r2, [r7, #2]
 8004cd2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ce8:	d802      	bhi.n	8004cf0 <HAL_SPI_TransmitReceive+0xe6>
 8004cea:	8a3b      	ldrh	r3, [r7, #16]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d908      	bls.n	8004d02 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	e007      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d007      	beq.n	8004d30 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d38:	d97c      	bls.n	8004e34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x13e>
 8004d42:	8a7b      	ldrh	r3, [r7, #18]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d169      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6c:	e056      	b.n	8004e1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d11b      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x1aa>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x1aa>
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d113      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	881a      	ldrh	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	1c9a      	adds	r2, r3, #2
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d11c      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1f2>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	b292      	uxth	r2, r2
 8004dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dfc:	f7fe fab2 	bl	8003364 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d807      	bhi.n	8004e1c <HAL_SPI_TransmitReceive+0x212>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d003      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e1a:	e0fb      	b.n	8005014 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1a3      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x164>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d19d      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x164>
 8004e32:	e0df      	b.n	8004ff4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x23a>
 8004e3c:	8a7b      	ldrh	r3, [r7, #18]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f040 80cb 	bne.w	8004fda <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d912      	bls.n	8004e74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	881a      	ldrh	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b02      	subs	r3, #2
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e72:	e0b2      	b.n	8004fda <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	7812      	ldrb	r2, [r2, #0]
 8004e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e9a:	e09e      	b.n	8004fda <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d134      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x30a>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02f      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x30a>
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d12c      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d912      	bls.n	8004eea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b02      	subs	r3, #2
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ee8:	e012      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d148      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x3aa>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d042      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d923      	bls.n	8004f82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	b292      	uxth	r2, r2
 8004f46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	1c9a      	adds	r2, r3, #2
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b02      	subs	r3, #2
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d81f      	bhi.n	8004fb0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f7e:	605a      	str	r2, [r3, #4]
 8004f80:	e016      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f103 020c 	add.w	r2, r3, #12
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fb4:	f7fe f9d6 	bl	8003364 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d803      	bhi.n	8004fcc <HAL_SPI_TransmitReceive+0x3c2>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d102      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x3c8>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fd8:	e01c      	b.n	8005014 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f47f af5b 	bne.w	8004e9c <HAL_SPI_TransmitReceive+0x292>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f47f af54 	bne.w	8004e9c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fa53 	bl	80054a4 <SPI_EndRxTxTransaction>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d006      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	661a      	str	r2, [r3, #96]	; 0x60
 8005010:	e000      	b.n	8005014 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005028:	4618      	mov	r0, r3
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10f      	bne.n	8005074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    return;
 8005072:	e0d7      	b.n	8005224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	085b      	lsrs	r3, r3, #1
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_SPI_IRQHandler+0x66>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	09db      	lsrs	r3, r3, #7
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
    return;
 8005094:	e0c6      	b.n	8005224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_SPI_IRQHandler+0x8c>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80b4 	beq.w	8005224 <HAL_SPI_IRQHandler+0x1f4>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80ad 	beq.w	8005224 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d023      	beq.n	800511e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d011      	beq.n	8005106 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	e00b      	b.n	800511e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	693b      	ldr	r3, [r7, #16]
        return;
 800511c:	e082      	b.n	8005224 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d014      	beq.n	8005154 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	f043 0208 	orr.w	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800516c:	2300      	movs	r3, #0
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517e:	2b00      	cmp	r3, #0
 8005180:	d04f      	beq.n	8005222 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005190:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_SPI_IRQHandler+0x17e>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d034      	beq.n	8005218 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0203 	bic.w	r2, r2, #3
 80051bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d011      	beq.n	80051ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	4a18      	ldr	r2, [pc, #96]	; (800522c <HAL_SPI_IRQHandler+0x1fc>)
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fa77 	bl	80036c6 <HAL_DMA_Abort_IT>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_SPI_IRQHandler+0x1fc>)
 80051f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fa61 	bl	80036c6 <HAL_DMA_Abort_IT>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005216:	e003      	b.n	8005220 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f809 	bl	8005230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800521e:	e000      	b.n	8005222 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005220:	bf00      	nop
    return;
 8005222:	bf00      	nop
  }
}
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	08005245 	.word	0x08005245

08005230 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ffe5 	bl	8005230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005280:	f7fe f870 	bl	8003364 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005290:	f7fe f868 	bl	8003364 <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	015b      	lsls	r3, r3, #5
 800529c:	0d1b      	lsrs	r3, r3, #20
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a6:	e054      	b.n	8005352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d050      	beq.n	8005352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052b0:	f7fe f858 	bl	8003364 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d902      	bls.n	80052c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d13d      	bne.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052de:	d111      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e8:	d004      	beq.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d107      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530c:	d10f      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800532c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e017      	b.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3b01      	subs	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4013      	ands	r3, r2
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	bf0c      	ite	eq
 8005362:	2301      	moveq	r3, #1
 8005364:	2300      	movne	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	429a      	cmp	r2, r3
 800536e:	d19b      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	2000004c 	.word	0x2000004c

08005380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800538e:	f7fd ffe9 	bl	8003364 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	4413      	add	r3, r2
 800539c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800539e:	f7fd ffe1 	bl	8003364 <HAL_GetTick>
 80053a2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00da      	lsls	r2, r3, #3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	0d1b      	lsrs	r3, r3, #20
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80053bc:	e062      	b.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053c4:	d109      	bne.n	80053da <SPI_WaitFifoStateUntilTimeout+0x5a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80053d8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d050      	beq.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e2:	f7fd ffbf 	bl	8003364 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d902      	bls.n	80053f8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d13d      	bne.n	8005474 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005406:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005410:	d111      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541a:	d004      	beq.n	8005426 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005424:	d107      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005434:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	d10f      	bne.n	8005460 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e010      	b.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3b01      	subs	r3, #1
 8005482:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d194      	bne.n	80053be <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000004c 	.word	0x2000004c

080054a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff ff5f 	bl	8005380 <SPI_WaitFifoStateUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e027      	b.n	8005528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2200      	movs	r2, #0
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff fec4 	bl	8005270 <SPI_WaitFlagStateUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e014      	b.n	8005528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff ff38 	bl	8005380 <SPI_WaitFifoStateUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e000      	b.n	8005528 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e049      	b.n	80055d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd fcca 	bl	8002ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 fd28 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e054      	b.n	80056a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d022      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d01d      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_TIM_Base_Start_IT+0xdc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d115      	bne.n	800568c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	4b19      	ldr	r3, [pc, #100]	; (80056cc <HAL_TIM_Base_Start_IT+0xec>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d015      	beq.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005678:	d011      	beq.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e008      	b.n	800569e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e000      	b.n	80056a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40001800 	.word	0x40001800
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e049      	b.n	8005776 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f841 	bl	800577e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fc58 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <HAL_TIM_PWM_Start+0x24>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e03c      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d109      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x3e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	e02f      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d109      	bne.n	80057ec <HAL_TIM_PWM_Start+0x58>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e022      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d109      	bne.n	8005806 <HAL_TIM_PWM_Start+0x72>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e015      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b10      	cmp	r3, #16
 800580a:	d109      	bne.n	8005820 <HAL_TIM_PWM_Start+0x8c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e008      	b.n	8005832 <HAL_TIM_PWM_Start+0x9e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e092      	b.n	8005960 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_TIM_PWM_Start+0xb6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005848:	e023      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d104      	bne.n	800585a <HAL_TIM_PWM_Start+0xc6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005858:	e01b      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xd6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005868:	e013      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d104      	bne.n	800587a <HAL_TIM_PWM_Start+0xe6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005878:	e00b      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b10      	cmp	r3, #16
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xf6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005888:	e003      	b.n	8005892 <HAL_TIM_PWM_Start+0xfe>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2201      	movs	r2, #1
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 ff2a 	bl	80066f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_TIM_PWM_Start+0x1d4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_PWM_Start+0x120>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2f      	ldr	r2, [pc, #188]	; (800596c <HAL_TIM_PWM_Start+0x1d8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d101      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x124>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <HAL_TIM_PWM_Start+0x126>
 80058b8:	2300      	movs	r3, #0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a25      	ldr	r2, [pc, #148]	; (8005968 <HAL_TIM_PWM_Start+0x1d4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e0:	d01d      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a22      	ldr	r2, [pc, #136]	; (8005970 <HAL_TIM_PWM_Start+0x1dc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a20      	ldr	r2, [pc, #128]	; (8005974 <HAL_TIM_PWM_Start+0x1e0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <HAL_TIM_PWM_Start+0x1e4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <HAL_TIM_PWM_Start+0x1d8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_PWM_Start+0x1e8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIM_PWM_Start+0x18a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_TIM_PWM_Start+0x1ec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d115      	bne.n	800594a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_TIM_PWM_Start+0x1f0>)
 8005926:	4013      	ands	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b06      	cmp	r3, #6
 800592e:	d015      	beq.n	800595c <HAL_TIM_PWM_Start+0x1c8>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d011      	beq.n	800595c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	e008      	b.n	800595c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e000      	b.n	800595e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40014000 	.word	0x40014000
 8005980:	40001800 	.word	0x40001800
 8005984:	00010007 	.word	0x00010007

08005988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0202 	mvn.w	r2, #2
 80059b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fadc 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 face 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fadf 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0204 	mvn.w	r2, #4
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fab2 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 faa4 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fab5 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0208 	mvn.w	r2, #8
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2204      	movs	r2, #4
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa88 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa7a 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fa8b 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0210 	mvn.w	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa5e 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa50 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fa61 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0201 	mvn.w	r2, #1
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fc fbae 	bl	8002268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fe9c 	bl	8006870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fe8f 	bl	8006884 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa0f 	bl	8005fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0220 	mvn.w	r2, #32
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fe4f 	bl	800685c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e0fd      	b.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x216>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b14      	cmp	r3, #20
 8005bee:	f200 80f0 	bhi.w	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c4d 	.word	0x08005c4d
 8005bfc:	08005dd3 	.word	0x08005dd3
 8005c00:	08005dd3 	.word	0x08005dd3
 8005c04:	08005dd3 	.word	0x08005dd3
 8005c08:	08005c8d 	.word	0x08005c8d
 8005c0c:	08005dd3 	.word	0x08005dd3
 8005c10:	08005dd3 	.word	0x08005dd3
 8005c14:	08005dd3 	.word	0x08005dd3
 8005c18:	08005ccf 	.word	0x08005ccf
 8005c1c:	08005dd3 	.word	0x08005dd3
 8005c20:	08005dd3 	.word	0x08005dd3
 8005c24:	08005dd3 	.word	0x08005dd3
 8005c28:	08005d0f 	.word	0x08005d0f
 8005c2c:	08005dd3 	.word	0x08005dd3
 8005c30:	08005dd3 	.word	0x08005dd3
 8005c34:	08005dd3 	.word	0x08005dd3
 8005c38:	08005d51 	.word	0x08005d51
 8005c3c:	08005dd3 	.word	0x08005dd3
 8005c40:	08005dd3 	.word	0x08005dd3
 8005c44:	08005dd3 	.word	0x08005dd3
 8005c48:	08005d91 	.word	0x08005d91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fa56 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	619a      	str	r2, [r3, #24]
      break;
 8005c8a:	e0a3      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 faa8 	bl	80061e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6999      	ldr	r1, [r3, #24]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
      break;
 8005ccc:	e082      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 faff 	bl	80062d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0208 	orr.w	r2, r2, #8
 8005ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69d9      	ldr	r1, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	61da      	str	r2, [r3, #28]
      break;
 8005d0c:	e062      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fb55 	bl	80063c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69d9      	ldr	r1, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	021a      	lsls	r2, r3, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	61da      	str	r2, [r3, #28]
      break;
 8005d4e:	e041      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb8c 	bl	8006474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d8e:	e021      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fbbe 	bl	8006518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	021a      	lsls	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005dd2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_ConfigClockSource+0x18>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e0b3      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x180>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4b55      	ldr	r3, [pc, #340]	; (8005f70 <HAL_TIM_ConfigClockSource+0x188>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e38:	d03e      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0xd0>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3e:	f200 8087 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	f000 8085 	beq.w	8005f54 <HAL_TIM_ConfigClockSource+0x16c>
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4e:	d87f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e50:	2b70      	cmp	r3, #112	; 0x70
 8005e52:	d01a      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0xa2>
 8005e54:	2b70      	cmp	r3, #112	; 0x70
 8005e56:	d87b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e58:	2b60      	cmp	r3, #96	; 0x60
 8005e5a:	d050      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x116>
 8005e5c:	2b60      	cmp	r3, #96	; 0x60
 8005e5e:	d877      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e60:	2b50      	cmp	r3, #80	; 0x50
 8005e62:	d03c      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0xf6>
 8005e64:	2b50      	cmp	r3, #80	; 0x50
 8005e66:	d873      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d058      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x136>
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d86f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d064      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x156>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d86b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d060      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x156>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d867      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05c      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x156>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d05a      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e88:	e062      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f000 fc0b 	bl	80066b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	609a      	str	r2, [r3, #8]
      break;
 8005eb6:	e04e      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f000 fbf4 	bl	80066b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eda:	609a      	str	r2, [r3, #8]
      break;
 8005edc:	e03b      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fb68 	bl	80065c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2150      	movs	r1, #80	; 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fbc1 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8005efc:	e02b      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 fb87 	bl	800661e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2160      	movs	r1, #96	; 0x60
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fbb1 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e01b      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fb48 	bl	80065c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fba1 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e00b      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f000 fb98 	bl	800667e <TIM_ITRx_SetConfig>
        break;
 8005f4e:	e002      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	fffeff88 	.word	0xfffeff88

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3d      	ldr	r2, [pc, #244]	; (80060dc <TIM_Base_SetConfig+0x118>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3c      	ldr	r2, [pc, #240]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3b      	ldr	r2, [pc, #236]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d027      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2c      	ldr	r2, [pc, #176]	; (80060dc <TIM_Base_SetConfig+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d023      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d017      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a28      	ldr	r2, [pc, #160]	; (80060ec <TIM_Base_SetConfig+0x128>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <TIM_Base_SetConfig+0x12c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_Base_SetConfig+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_Base_SetConfig+0x134>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a24      	ldr	r2, [pc, #144]	; (80060fc <TIM_Base_SetConfig+0x138>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a23      	ldr	r2, [pc, #140]	; (8006100 <TIM_Base_SetConfig+0x13c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	615a      	str	r2, [r3, #20]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	40001800 	.word	0x40001800
 80060fc:	40001c00 	.word	0x40001c00
 8006100:	40002000 	.word	0x40002000

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <TIM_OC1_SetConfig+0xd8>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <TIM_OC1_SetConfig+0xdc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC1_SetConfig+0x64>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a20      	ldr	r2, [pc, #128]	; (80061e4 <TIM_OC1_SetConfig+0xe0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d10c      	bne.n	8006182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0308 	bic.w	r3, r3, #8
 800616e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 0304 	bic.w	r3, r3, #4
 8006180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <TIM_OC1_SetConfig+0xdc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC1_SetConfig+0x8e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <TIM_OC1_SetConfig+0xe0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d111      	bne.n	80061b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	fffeff8f 	.word	0xfffeff8f
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <TIM_OC2_SetConfig+0xe4>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <TIM_OC2_SetConfig+0xe8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0x68>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_OC2_SetConfig+0xec>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10d      	bne.n	800626c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x94>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a17      	ldr	r2, [pc, #92]	; (80062d4 <TIM_OC2_SetConfig+0xec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d113      	bne.n	80062a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	feff8fff 	.word	0xfeff8fff
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <TIM_OC3_SetConfig+0xe0>)
 8006304:	4013      	ands	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <TIM_OC3_SetConfig+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x66>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_OC3_SetConfig+0xe8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10d      	bne.n	800635a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC3_SetConfig+0xe4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x92>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC3_SetConfig+0xe8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	fffeff8f 	.word	0xfffeff8f
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <TIM_OC4_SetConfig+0xa4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <TIM_OC4_SetConfig+0xa8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC4_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <TIM_OC4_SetConfig+0xac>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	feff8fff 	.word	0xfeff8fff
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4b1b      	ldr	r3, [pc, #108]	; (800650c <TIM_OC5_SetConfig+0x98>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a12      	ldr	r2, [pc, #72]	; (8006510 <TIM_OC5_SetConfig+0x9c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC5_SetConfig+0x5e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <TIM_OC5_SetConfig+0xa0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d109      	bne.n	80064e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	fffeff8f 	.word	0xfffeff8f
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <TIM_OC6_SetConfig+0x9c>)
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800655a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	051b      	lsls	r3, r3, #20
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <TIM_OC6_SetConfig+0xa0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC6_SetConfig+0x60>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a12      	ldr	r2, [pc, #72]	; (80065bc <TIM_OC6_SetConfig+0xa4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d109      	bne.n	800658c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	feff8fff 	.word	0xfeff8fff
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400

080065c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 030a 	bic.w	r3, r3, #10
 80065fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661e:	b480      	push	{r7}
 8006620:	b087      	sub	sp, #28
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0210 	bic.w	r2, r3, #16
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	031b      	lsls	r3, r3, #12
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800665a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	f043 0307 	orr.w	r3, r3, #7
 80066a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	021a      	lsls	r2, r3, #8
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2201      	movs	r2, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	43db      	mvns	r3, r3
 8006716:	401a      	ands	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1a      	ldr	r2, [r3, #32]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	fa01 f303 	lsl.w	r3, r1, r3
 800672c:	431a      	orrs	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006754:	2302      	movs	r3, #2
 8006756:	e06d      	b.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a30      	ldr	r2, [pc, #192]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2f      	ldr	r2, [pc, #188]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a20      	ldr	r2, [pc, #128]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d01d      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1c      	ldr	r2, [pc, #112]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a15      	ldr	r2, [pc, #84]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a15      	ldr	r2, [pc, #84]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10c      	bne.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800680e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	4313      	orrs	r3, r2
 8006818:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800
 8006850:	40000c00 	.word	0x40000c00
 8006854:	40014000 	.word	0x40014000
 8006858:	40001800 	.word	0x40001800

0800685c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e040      	b.n	800692c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fc fbf8 	bl	80030b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb26 	bl	8006f28 <UART_SetConfig>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e022      	b.n	800692c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fd7e 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fe05 	bl	8007534 <UART_CheckIdleState>
 800692a:	4603      	mov	r3, r0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	; 0x28
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006948:	2b20      	cmp	r3, #32
 800694a:	f040 8081 	bne.w	8006a50 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_UART_Transmit+0x26>
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e079      	b.n	8006a52 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_UART_Transmit+0x38>
 8006968:	2302      	movs	r3, #2
 800696a:	e072      	b.n	8006a52 <HAL_UART_Transmit+0x11e>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2221      	movs	r2, #33	; 0x21
 8006980:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006982:	f7fc fcef 	bl	8003364 <HAL_GetTick>
 8006986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a0:	d108      	bne.n	80069b4 <HAL_UART_Transmit+0x80>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	e003      	b.n	80069bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069c4:	e02c      	b.n	8006a20 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2180      	movs	r1, #128	; 0x80
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fdf8 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e038      	b.n	8006a52 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	3302      	adds	r3, #2
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e007      	b.n	8006a0e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1cc      	bne.n	80069c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2140      	movs	r1, #64	; 0x40
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fdc5 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e005      	b.n	8006a52 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d12c      	bne.n	8006aca <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_UART_Receive_IT+0x22>
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e025      	b.n	8006acc <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Receive_IT+0x34>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e01e      	b.n	8006acc <HAL_UART_Receive_IT+0x72>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006ab8:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	461a      	mov	r2, r3
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fdfd 	bl	80076c0 <UART_Start_Receive_IT>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e000      	b.n	8006acc <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
  }
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006afa:	4013      	ands	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 81cd 	beq.w	8006ebc <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
      }
      return;
 8006b2a:	e1c7      	b.n	8006ebc <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80e8 	beq.w	8006d04 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4b6e      	ldr	r3, [pc, #440]	; (8006cfc <HAL_UART_IRQHandler+0x228>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80dd 	beq.w	8006d04 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d010      	beq.n	8006b76 <HAL_UART_IRQHandler+0xa2>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00b      	beq.n	8006b76 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xce>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b98:	f043 0204 	orr.w	r2, r3, #4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d010      	beq.n	8006bce <HAL_UART_IRQHandler+0xfa>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc4:	f043 0202 	orr.w	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d015      	beq.n	8006c04 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfa:	f043 0208 	orr.w	r2, r3, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <HAL_UART_IRQHandler+0x15e>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c28:	f043 0220 	orr.w	r2, r3, #32
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8141 	beq.w	8006ec0 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d004      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d031      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fda4 	bl	80077d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d123      	bne.n	8006cde <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d013      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <HAL_UART_IRQHandler+0x22c>)
 8006cb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc fd03 	bl	80036c6 <HAL_DMA_Abort_IT>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e00f      	b.n	8006cf6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f906 	bl	8006ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	e00b      	b.n	8006cf6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f902 	bl	8006ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	e007      	b.n	8006cf6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8fe 	bl	8006ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006cf4:	e0e4      	b.n	8006ec0 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf6:	bf00      	nop
    return;
 8006cf8:	e0e2      	b.n	8006ec0 <HAL_UART_IRQHandler+0x3ec>
 8006cfa:	bf00      	nop
 8006cfc:	04000120 	.word	0x04000120
 8006d00:	0800782f 	.word	0x0800782f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f040 80a3 	bne.w	8006e54 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 809d 	beq.w	8006e54 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8097 	beq.w	8006e54 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d152      	bne.n	8006de2 <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006d46:	893b      	ldrh	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80bb 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d54:	893a      	ldrh	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f080 80b4 	bcs.w	8006ec4 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	893a      	ldrh	r2, [r7, #8]
 8006d60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d6e:	d02a      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0201 	bic.w	r2, r2, #1
 8006d8e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d9e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0210 	bic.w	r2, r2, #16
 8006dba:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fc fc10 	bl	80035e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f88e 	bl	8006efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006de0:	e070      	b.n	8006ec4 <HAL_UART_IRQHandler+0x3f0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d063      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8006e00:	897b      	ldrh	r3, [r7, #10]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d060      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e14:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0210 	bic.w	r2, r2, #16
 8006e46:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e48:	897b      	ldrh	r3, [r7, #10]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f855 	bl	8006efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e52:	e039      	b.n	8006ec8 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <HAL_UART_IRQHandler+0x3a6>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f84e 	bl	8006f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e78:	e029      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x3cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x3cc>
  {
    if (huart->TxISR != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01a      	beq.n	8006ecc <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
    }
    return;
 8006e9e:	e015      	b.n	8006ecc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d011      	beq.n	8006ece <HAL_UART_IRQHandler+0x3fa>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00c      	beq.n	8006ece <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fcd0 	bl	800785a <UART_EndTransmit_IT>
    return;
 8006eba:	e008      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
      return;
 8006ebc:	bf00      	nop
 8006ebe:	e006      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
    return;
 8006ec0:	bf00      	nop
 8006ec2:	e004      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
      return;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
      return;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <HAL_UART_IRQHandler+0x3fa>
    return;
 8006ecc:	bf00      	nop
  }

}
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4ba6      	ldr	r3, [pc, #664]	; (80071ec <UART_SetConfig+0x2c4>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a94      	ldr	r2, [pc, #592]	; (80071f0 <UART_SetConfig+0x2c8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d120      	bne.n	8006fe6 <UART_SetConfig+0xbe>
 8006fa4:	4b93      	ldr	r3, [pc, #588]	; (80071f4 <UART_SetConfig+0x2cc>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d816      	bhi.n	8006fe0 <UART_SetConfig+0xb8>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0x90>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08006fcf 	.word	0x08006fcf
 8006fc4:	08006fdb 	.word	0x08006fdb
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e150      	b.n	8007270 <UART_SetConfig+0x348>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e14d      	b.n	8007270 <UART_SetConfig+0x348>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e14a      	b.n	8007270 <UART_SetConfig+0x348>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e147      	b.n	8007270 <UART_SetConfig+0x348>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e144      	b.n	8007270 <UART_SetConfig+0x348>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a83      	ldr	r2, [pc, #524]	; (80071f8 <UART_SetConfig+0x2d0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d132      	bne.n	8007056 <UART_SetConfig+0x12e>
 8006ff0:	4b80      	ldr	r3, [pc, #512]	; (80071f4 <UART_SetConfig+0x2cc>)
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d828      	bhi.n	8007050 <UART_SetConfig+0x128>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0xdc>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007039 	.word	0x08007039
 8007008:	08007051 	.word	0x08007051
 800700c:	08007051 	.word	0x08007051
 8007010:	08007051 	.word	0x08007051
 8007014:	08007045 	.word	0x08007045
 8007018:	08007051 	.word	0x08007051
 800701c:	08007051 	.word	0x08007051
 8007020:	08007051 	.word	0x08007051
 8007024:	0800703f 	.word	0x0800703f
 8007028:	08007051 	.word	0x08007051
 800702c:	08007051 	.word	0x08007051
 8007030:	08007051 	.word	0x08007051
 8007034:	0800704b 	.word	0x0800704b
 8007038:	2300      	movs	r3, #0
 800703a:	77fb      	strb	r3, [r7, #31]
 800703c:	e118      	b.n	8007270 <UART_SetConfig+0x348>
 800703e:	2302      	movs	r3, #2
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e115      	b.n	8007270 <UART_SetConfig+0x348>
 8007044:	2304      	movs	r3, #4
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e112      	b.n	8007270 <UART_SetConfig+0x348>
 800704a:	2308      	movs	r3, #8
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e10f      	b.n	8007270 <UART_SetConfig+0x348>
 8007050:	2310      	movs	r3, #16
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e10c      	b.n	8007270 <UART_SetConfig+0x348>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a68      	ldr	r2, [pc, #416]	; (80071fc <UART_SetConfig+0x2d4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d120      	bne.n	80070a2 <UART_SetConfig+0x17a>
 8007060:	4b64      	ldr	r3, [pc, #400]	; (80071f4 <UART_SetConfig+0x2cc>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800706a:	2b30      	cmp	r3, #48	; 0x30
 800706c:	d013      	beq.n	8007096 <UART_SetConfig+0x16e>
 800706e:	2b30      	cmp	r3, #48	; 0x30
 8007070:	d814      	bhi.n	800709c <UART_SetConfig+0x174>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d009      	beq.n	800708a <UART_SetConfig+0x162>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d810      	bhi.n	800709c <UART_SetConfig+0x174>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <UART_SetConfig+0x15c>
 800707e:	2b10      	cmp	r3, #16
 8007080:	d006      	beq.n	8007090 <UART_SetConfig+0x168>
 8007082:	e00b      	b.n	800709c <UART_SetConfig+0x174>
 8007084:	2300      	movs	r3, #0
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e0f2      	b.n	8007270 <UART_SetConfig+0x348>
 800708a:	2302      	movs	r3, #2
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e0ef      	b.n	8007270 <UART_SetConfig+0x348>
 8007090:	2304      	movs	r3, #4
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e0ec      	b.n	8007270 <UART_SetConfig+0x348>
 8007096:	2308      	movs	r3, #8
 8007098:	77fb      	strb	r3, [r7, #31]
 800709a:	e0e9      	b.n	8007270 <UART_SetConfig+0x348>
 800709c:	2310      	movs	r3, #16
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e0e6      	b.n	8007270 <UART_SetConfig+0x348>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a56      	ldr	r2, [pc, #344]	; (8007200 <UART_SetConfig+0x2d8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d120      	bne.n	80070ee <UART_SetConfig+0x1c6>
 80070ac:	4b51      	ldr	r3, [pc, #324]	; (80071f4 <UART_SetConfig+0x2cc>)
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070b6:	2bc0      	cmp	r3, #192	; 0xc0
 80070b8:	d013      	beq.n	80070e2 <UART_SetConfig+0x1ba>
 80070ba:	2bc0      	cmp	r3, #192	; 0xc0
 80070bc:	d814      	bhi.n	80070e8 <UART_SetConfig+0x1c0>
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d009      	beq.n	80070d6 <UART_SetConfig+0x1ae>
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d810      	bhi.n	80070e8 <UART_SetConfig+0x1c0>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <UART_SetConfig+0x1a8>
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d006      	beq.n	80070dc <UART_SetConfig+0x1b4>
 80070ce:	e00b      	b.n	80070e8 <UART_SetConfig+0x1c0>
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e0cc      	b.n	8007270 <UART_SetConfig+0x348>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e0c9      	b.n	8007270 <UART_SetConfig+0x348>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e0c6      	b.n	8007270 <UART_SetConfig+0x348>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e0c3      	b.n	8007270 <UART_SetConfig+0x348>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e0c0      	b.n	8007270 <UART_SetConfig+0x348>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a44      	ldr	r2, [pc, #272]	; (8007204 <UART_SetConfig+0x2dc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d125      	bne.n	8007144 <UART_SetConfig+0x21c>
 80070f8:	4b3e      	ldr	r3, [pc, #248]	; (80071f4 <UART_SetConfig+0x2cc>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007106:	d017      	beq.n	8007138 <UART_SetConfig+0x210>
 8007108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710c:	d817      	bhi.n	800713e <UART_SetConfig+0x216>
 800710e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007112:	d00b      	beq.n	800712c <UART_SetConfig+0x204>
 8007114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007118:	d811      	bhi.n	800713e <UART_SetConfig+0x216>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <UART_SetConfig+0x1fe>
 800711e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007122:	d006      	beq.n	8007132 <UART_SetConfig+0x20a>
 8007124:	e00b      	b.n	800713e <UART_SetConfig+0x216>
 8007126:	2300      	movs	r3, #0
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e0a1      	b.n	8007270 <UART_SetConfig+0x348>
 800712c:	2302      	movs	r3, #2
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e09e      	b.n	8007270 <UART_SetConfig+0x348>
 8007132:	2304      	movs	r3, #4
 8007134:	77fb      	strb	r3, [r7, #31]
 8007136:	e09b      	b.n	8007270 <UART_SetConfig+0x348>
 8007138:	2308      	movs	r3, #8
 800713a:	77fb      	strb	r3, [r7, #31]
 800713c:	e098      	b.n	8007270 <UART_SetConfig+0x348>
 800713e:	2310      	movs	r3, #16
 8007140:	77fb      	strb	r3, [r7, #31]
 8007142:	e095      	b.n	8007270 <UART_SetConfig+0x348>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2f      	ldr	r2, [pc, #188]	; (8007208 <UART_SetConfig+0x2e0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d125      	bne.n	800719a <UART_SetConfig+0x272>
 800714e:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <UART_SetConfig+0x2cc>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800715c:	d017      	beq.n	800718e <UART_SetConfig+0x266>
 800715e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007162:	d817      	bhi.n	8007194 <UART_SetConfig+0x26c>
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007168:	d00b      	beq.n	8007182 <UART_SetConfig+0x25a>
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716e:	d811      	bhi.n	8007194 <UART_SetConfig+0x26c>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <UART_SetConfig+0x254>
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d006      	beq.n	8007188 <UART_SetConfig+0x260>
 800717a:	e00b      	b.n	8007194 <UART_SetConfig+0x26c>
 800717c:	2301      	movs	r3, #1
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e076      	b.n	8007270 <UART_SetConfig+0x348>
 8007182:	2302      	movs	r3, #2
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e073      	b.n	8007270 <UART_SetConfig+0x348>
 8007188:	2304      	movs	r3, #4
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e070      	b.n	8007270 <UART_SetConfig+0x348>
 800718e:	2308      	movs	r3, #8
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e06d      	b.n	8007270 <UART_SetConfig+0x348>
 8007194:	2310      	movs	r3, #16
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e06a      	b.n	8007270 <UART_SetConfig+0x348>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	; (800720c <UART_SetConfig+0x2e4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d138      	bne.n	8007216 <UART_SetConfig+0x2ee>
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <UART_SetConfig+0x2cc>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071b2:	d017      	beq.n	80071e4 <UART_SetConfig+0x2bc>
 80071b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071b8:	d82a      	bhi.n	8007210 <UART_SetConfig+0x2e8>
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071be:	d00b      	beq.n	80071d8 <UART_SetConfig+0x2b0>
 80071c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c4:	d824      	bhi.n	8007210 <UART_SetConfig+0x2e8>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <UART_SetConfig+0x2aa>
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d006      	beq.n	80071de <UART_SetConfig+0x2b6>
 80071d0:	e01e      	b.n	8007210 <UART_SetConfig+0x2e8>
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e04b      	b.n	8007270 <UART_SetConfig+0x348>
 80071d8:	2302      	movs	r3, #2
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e048      	b.n	8007270 <UART_SetConfig+0x348>
 80071de:	2304      	movs	r3, #4
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e045      	b.n	8007270 <UART_SetConfig+0x348>
 80071e4:	2308      	movs	r3, #8
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e042      	b.n	8007270 <UART_SetConfig+0x348>
 80071ea:	bf00      	nop
 80071ec:	efff69f3 	.word	0xefff69f3
 80071f0:	40011000 	.word	0x40011000
 80071f4:	40023800 	.word	0x40023800
 80071f8:	40004400 	.word	0x40004400
 80071fc:	40004800 	.word	0x40004800
 8007200:	40004c00 	.word	0x40004c00
 8007204:	40005000 	.word	0x40005000
 8007208:	40011400 	.word	0x40011400
 800720c:	40007800 	.word	0x40007800
 8007210:	2310      	movs	r3, #16
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e02c      	b.n	8007270 <UART_SetConfig+0x348>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a72      	ldr	r2, [pc, #456]	; (80073e4 <UART_SetConfig+0x4bc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d125      	bne.n	800726c <UART_SetConfig+0x344>
 8007220:	4b71      	ldr	r3, [pc, #452]	; (80073e8 <UART_SetConfig+0x4c0>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800722a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800722e:	d017      	beq.n	8007260 <UART_SetConfig+0x338>
 8007230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007234:	d817      	bhi.n	8007266 <UART_SetConfig+0x33e>
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800723a:	d00b      	beq.n	8007254 <UART_SetConfig+0x32c>
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d811      	bhi.n	8007266 <UART_SetConfig+0x33e>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <UART_SetConfig+0x326>
 8007246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800724a:	d006      	beq.n	800725a <UART_SetConfig+0x332>
 800724c:	e00b      	b.n	8007266 <UART_SetConfig+0x33e>
 800724e:	2300      	movs	r3, #0
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e00d      	b.n	8007270 <UART_SetConfig+0x348>
 8007254:	2302      	movs	r3, #2
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e00a      	b.n	8007270 <UART_SetConfig+0x348>
 800725a:	2304      	movs	r3, #4
 800725c:	77fb      	strb	r3, [r7, #31]
 800725e:	e007      	b.n	8007270 <UART_SetConfig+0x348>
 8007260:	2308      	movs	r3, #8
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e004      	b.n	8007270 <UART_SetConfig+0x348>
 8007266:	2310      	movs	r3, #16
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e001      	b.n	8007270 <UART_SetConfig+0x348>
 800726c:	2310      	movs	r3, #16
 800726e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007278:	d15c      	bne.n	8007334 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d828      	bhi.n	80072d2 <UART_SetConfig+0x3aa>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x360>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072d3 	.word	0x080072d3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fd fa6c 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e013      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fd fa7c 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80072b8:	61b8      	str	r0, [r7, #24]
        break;
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b4b      	ldr	r3, [pc, #300]	; (80073ec <UART_SetConfig+0x4c4>)
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e00c      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd f94f 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80072c6:	61b8      	str	r0, [r7, #24]
        break;
 80072c8:	e008      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	61bb      	str	r3, [r7, #24]
        break;
 80072d0:	e004      	b.n	80072dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
        break;
 80072da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d074      	beq.n	80073cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	005a      	lsls	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	441a      	add	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b0f      	cmp	r3, #15
 80072fe:	d916      	bls.n	800732e <UART_SetConfig+0x406>
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007306:	d212      	bcs.n	800732e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f023 030f 	bic.w	r3, r3, #15
 8007310:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	b29b      	uxth	r3, r3
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	b29a      	uxth	r2, r3
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	4313      	orrs	r3, r2
 8007322:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	89fa      	ldrh	r2, [r7, #14]
 800732a:	60da      	str	r2, [r3, #12]
 800732c:	e04e      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	77bb      	strb	r3, [r7, #30]
 8007332:	e04b      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007334:	7ffb      	ldrb	r3, [r7, #31]
 8007336:	2b08      	cmp	r3, #8
 8007338:	d827      	bhi.n	800738a <UART_SetConfig+0x462>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x418>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007365 	.word	0x08007365
 8007344:	0800736d 	.word	0x0800736d
 8007348:	08007375 	.word	0x08007375
 800734c:	0800738b 	.word	0x0800738b
 8007350:	0800737b 	.word	0x0800737b
 8007354:	0800738b 	.word	0x0800738b
 8007358:	0800738b 	.word	0x0800738b
 800735c:	0800738b 	.word	0x0800738b
 8007360:	08007383 	.word	0x08007383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007364:	f7fd fa10 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 8007368:	61b8      	str	r0, [r7, #24]
        break;
 800736a:	e013      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fd fa20 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8007370:	61b8      	str	r0, [r7, #24]
        break;
 8007372:	e00f      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <UART_SetConfig+0x4c4>)
 8007376:	61bb      	str	r3, [r7, #24]
        break;
 8007378:	e00c      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737a:	f7fd f8f3 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 800737e:	61b8      	str	r0, [r7, #24]
        break;
 8007380:	e008      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007386:	61bb      	str	r3, [r7, #24]
        break;
 8007388:	e004      	b.n	8007394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	77bb      	strb	r3, [r7, #30]
        break;
 8007392:	bf00      	nop
    }

    if (pclk != 0U)
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	085a      	lsrs	r2, r3, #1
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	441a      	add	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d908      	bls.n	80073c8 <UART_SetConfig+0x4a0>
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d204      	bcs.n	80073c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e001      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40007c00 	.word	0x40007c00
 80073e8:	40023800 	.word	0x40023800
 80073ec:	00f42400 	.word	0x00f42400

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007544:	f7fb ff0e 	bl	8003364 <HAL_GetTick>
 8007548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10e      	bne.n	8007576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f82d 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e023      	b.n	80075be <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b04      	cmp	r3, #4
 8007582:	d10e      	bne.n	80075a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f817 	bl	80075c6 <UART_WaitOnFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e00d      	b.n	80075be <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d6:	e05e      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d05a      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e0:	f7fb fec0 	bl	8003364 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d11b      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007604:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e043      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02c      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764a:	d124      	bne.n	8007696 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007664:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2220      	movs	r2, #32
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e00f      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d091      	beq.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	88fa      	ldrh	r2, [r7, #6]
 80076d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	88fa      	ldrh	r2, [r7, #6]
 80076e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f2:	d10e      	bne.n	8007712 <UART_Start_Receive_IT+0x52>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d105      	bne.n	8007708 <UART_Start_Receive_IT+0x48>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007702:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007706:	e02d      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	22ff      	movs	r2, #255	; 0xff
 800770c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007710:	e028      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <UART_Start_Receive_IT+0x76>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <UART_Start_Receive_IT+0x6c>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800772a:	e01b      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	227f      	movs	r2, #127	; 0x7f
 8007730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007734:	e016      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773e:	d10d      	bne.n	800775c <UART_Start_Receive_IT+0x9c>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <UART_Start_Receive_IT+0x92>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	227f      	movs	r2, #127	; 0x7f
 800774c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007750:	e008      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	223f      	movs	r2, #63	; 0x3f
 8007756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800775a:	e003      	b.n	8007764 <UART_Start_Receive_IT+0xa4>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2222      	movs	r2, #34	; 0x22
 8007770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d107      	bne.n	800779c <UART_Start_Receive_IT+0xdc>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <UART_Start_Receive_IT+0x108>)
 8007798:	665a      	str	r2, [r3, #100]	; 0x64
 800779a:	e002      	b.n	80077a2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <UART_Start_Receive_IT+0x10c>)
 80077a0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80077b8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	08007961 	.word	0x08007961
 80077cc:	0800788d 	.word	0x0800788d

080077d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80077e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d107      	bne.n	8007810 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0210 	bic.w	r2, r2, #16
 800780e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff fb4b 	bl	8006ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007870:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fb28 	bl	8006ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800789a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a0:	2b22      	cmp	r3, #34	; 0x22
 80078a2:	d151      	bne.n	8007948 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078ac:	89bb      	ldrh	r3, [r7, #12]
 80078ae:	b2d9      	uxtb	r1, r3
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	400a      	ands	r2, r1
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d138      	bne.n	8007958 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078f4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007916:	2b01      	cmp	r3, #1
 8007918:	d10f      	bne.n	800793a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0210 	bic.w	r2, r2, #16
 8007928:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fae2 	bl	8006efc <HAL_UARTEx_RxEventCallback>
 8007938:	e002      	b.n	8007940 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fa fc22 	bl	8002184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007946:	e007      	b.n	8007958 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	619a      	str	r2, [r3, #24]
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800796e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007974:	2b22      	cmp	r3, #34	; 0x22
 8007976:	d151      	bne.n	8007a1c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007986:	89ba      	ldrh	r2, [r7, #12]
 8007988:	89fb      	ldrh	r3, [r7, #14]
 800798a:	4013      	ands	r3, r2
 800798c:	b29a      	uxth	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d138      	bne.n	8007a2c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10f      	bne.n	8007a0e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0210 	bic.w	r2, r2, #16
 80079fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fa78 	bl	8006efc <HAL_UARTEx_RxEventCallback>
 8007a0c:	e002      	b.n	8007a14 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fa fbb8 	bl	8002184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a1a:	e007      	b.n	8007a2c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0208 	orr.w	r2, r2, #8
 8007a2a:	619a      	str	r2, [r3, #24]
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a34:	b084      	sub	sp, #16
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	f107 001c 	add.w	r0, r7, #28
 8007a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d120      	bne.n	8007a8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	4b20      	ldr	r3, [pc, #128]	; (8007ae0 <USB_CoreInit+0xac>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d105      	bne.n	8007a82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa5a 	bl	8007f3c <USB_CoreReset>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
 8007a8c:	e010      	b.n	8007ab0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa4e 	bl	8007f3c <USB_CoreReset>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d10b      	bne.n	8007ace <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f043 0206 	orr.w	r2, r3, #6
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f043 0220 	orr.w	r2, r3, #32
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ada:	b004      	add	sp, #16
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	ffbdffbf 	.word	0xffbdffbf

08007ae4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f023 0201 	bic.w	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d106      	bne.n	8007b32 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
 8007b30:	e00b      	b.n	8007b4a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e001      	b.n	8007b4a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e003      	b.n	8007b52 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b4a:	2032      	movs	r0, #50	; 0x32
 8007b4c:	f7fb fc16 	bl	800337c <HAL_Delay>

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e009      	b.n	8007b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3340      	adds	r3, #64	; 0x40
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	2200      	movs	r2, #0
 8007b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b0e      	cmp	r3, #14
 8007b94:	d9f2      	bls.n	8007b7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11c      	bne.n	8007bd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007baa:	f043 0302 	orr.w	r3, r3, #2
 8007bae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e005      	b.n	8007be2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be8:	461a      	mov	r2, r3
 8007bea:	2300      	movs	r3, #0
 8007bec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	680b      	ldr	r3, [r1, #0]
 8007c00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10c      	bne.n	8007c22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f959 	bl	8007ec8 <USB_SetDevSpeed>
 8007c16:	e018      	b.n	8007c4a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c18:	2101      	movs	r1, #1
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f954 	bl	8007ec8 <USB_SetDevSpeed>
 8007c20:	e013      	b.n	8007c4a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d10c      	bne.n	8007c42 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f949 	bl	8007ec8 <USB_SetDevSpeed>
 8007c36:	e008      	b.n	8007c4a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f944 	bl	8007ec8 <USB_SetDevSpeed>
 8007c40:	e003      	b.n	8007c4a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c42:	2103      	movs	r1, #3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f93f 	bl	8007ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c4a:	2110      	movs	r1, #16
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8f3 	bl	8007e38 <USB_FlushTxFifo>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f911 	bl	8007e84 <USB_FlushRxFifo>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	461a      	mov	r2, r3
 8007c74:	2300      	movs	r3, #0
 8007c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7e:	461a      	mov	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c90:	2300      	movs	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	e043      	b.n	8007d1e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cac:	d118      	bne.n	8007ce0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e013      	b.n	8007cf2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	e008      	b.n	8007cf2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cec:	461a      	mov	r2, r3
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfe:	461a      	mov	r2, r3
 8007d00:	2300      	movs	r3, #0
 8007d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	461a      	mov	r2, r3
 8007d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d3b7      	bcc.n	8007c96 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	e043      	b.n	8007db4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d42:	d118      	bne.n	8007d76 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	461a      	mov	r2, r3
 8007d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e013      	b.n	8007d88 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	e008      	b.n	8007d88 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d82:	461a      	mov	r2, r3
 8007d84:	2300      	movs	r3, #0
 8007d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d94:	461a      	mov	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	461a      	mov	r2, r3
 8007da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3301      	adds	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d3b7      	bcc.n	8007d2c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ddc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f043 0210 	orr.w	r2, r3, #16
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <USB_DevInit+0x2d4>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f043 0208 	orr.w	r2, r3, #8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d105      	bne.n	8007e20 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <USB_DevInit+0x2d8>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e2c:	b004      	add	sp, #16
 8007e2e:	4770      	bx	lr
 8007e30:	803c3800 	.word	0x803c3800
 8007e34:	40000004 	.word	0x40000004

08007e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	f043 0220 	orr.w	r2, r3, #32
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4a09      	ldr	r2, [pc, #36]	; (8007e80 <USB_FlushTxFifo+0x48>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d901      	bls.n	8007e64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e006      	b.n	8007e72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d0f0      	beq.n	8007e52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	00030d40 	.word	0x00030d40

08007e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2210      	movs	r2, #16
 8007e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <USB_FlushRxFifo+0x40>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d901      	bls.n	8007ea8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e006      	b.n	8007eb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d0f0      	beq.n	8007e96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	00030d40 	.word	0x00030d40

08007ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f14:	f023 0303 	bic.w	r3, r3, #3
 8007f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <USB_CoreReset+0x64>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e01b      	b.n	8007f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	daf2      	bge.n	8007f48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f043 0201 	orr.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3301      	adds	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <USB_CoreReset+0x64>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d901      	bls.n	8007f84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e006      	b.n	8007f92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d0f0      	beq.n	8007f72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	00030d40 	.word	0x00030d40

08007fa4 <arm_pid_init_f32>:
 8007fa4:	ed90 7a08 	vldr	s14, [r0, #32]
 8007fa8:	edd0 7a06 	vldr	s15, [r0, #24]
 8007fac:	ed90 6a07 	vldr	s12, [r0, #28]
 8007fb0:	eef1 6a67 	vneg.f32	s13, s15
 8007fb4:	ed80 7a02 	vstr	s14, [r0, #8]
 8007fb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007fbc:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fc4:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007fc8:	edc0 7a00 	vstr	s15, [r0]
 8007fcc:	ed80 7a01 	vstr	s14, [r0, #4]
 8007fd0:	b901      	cbnz	r1, 8007fd4 <arm_pid_init_f32+0x30>
 8007fd2:	4770      	bx	lr
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60c3      	str	r3, [r0, #12]
 8007fd8:	6103      	str	r3, [r0, #16]
 8007fda:	6143      	str	r3, [r0, #20]
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop

08007fe0 <__errno>:
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <__errno+0x8>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000058 	.word	0x20000058

08007fec <__libc_init_array>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	4d0d      	ldr	r5, [pc, #52]	; (8008024 <__libc_init_array+0x38>)
 8007ff0:	4c0d      	ldr	r4, [pc, #52]	; (8008028 <__libc_init_array+0x3c>)
 8007ff2:	1b64      	subs	r4, r4, r5
 8007ff4:	10a4      	asrs	r4, r4, #2
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	42a6      	cmp	r6, r4
 8007ffa:	d109      	bne.n	8008010 <__libc_init_array+0x24>
 8007ffc:	4d0b      	ldr	r5, [pc, #44]	; (800802c <__libc_init_array+0x40>)
 8007ffe:	4c0c      	ldr	r4, [pc, #48]	; (8008030 <__libc_init_array+0x44>)
 8008000:	f004 fff8 	bl	800cff4 <_init>
 8008004:	1b64      	subs	r4, r4, r5
 8008006:	10a4      	asrs	r4, r4, #2
 8008008:	2600      	movs	r6, #0
 800800a:	42a6      	cmp	r6, r4
 800800c:	d105      	bne.n	800801a <__libc_init_array+0x2e>
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	f855 3b04 	ldr.w	r3, [r5], #4
 8008014:	4798      	blx	r3
 8008016:	3601      	adds	r6, #1
 8008018:	e7ee      	b.n	8007ff8 <__libc_init_array+0xc>
 800801a:	f855 3b04 	ldr.w	r3, [r5], #4
 800801e:	4798      	blx	r3
 8008020:	3601      	adds	r6, #1
 8008022:	e7f2      	b.n	800800a <__libc_init_array+0x1e>
 8008024:	0800d61c 	.word	0x0800d61c
 8008028:	0800d61c 	.word	0x0800d61c
 800802c:	0800d61c 	.word	0x0800d61c
 8008030:	0800d620 	.word	0x0800d620

08008034 <memcpy>:
 8008034:	440a      	add	r2, r1
 8008036:	4291      	cmp	r1, r2
 8008038:	f100 33ff 	add.w	r3, r0, #4294967295
 800803c:	d100      	bne.n	8008040 <memcpy+0xc>
 800803e:	4770      	bx	lr
 8008040:	b510      	push	{r4, lr}
 8008042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804a:	4291      	cmp	r1, r2
 800804c:	d1f9      	bne.n	8008042 <memcpy+0xe>
 800804e:	bd10      	pop	{r4, pc}

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <__cvt>:
 8008060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008062:	ed2d 8b02 	vpush	{d8}
 8008066:	eeb0 8b40 	vmov.f64	d8, d0
 800806a:	b085      	sub	sp, #20
 800806c:	4617      	mov	r7, r2
 800806e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008070:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008072:	ee18 2a90 	vmov	r2, s17
 8008076:	f025 0520 	bic.w	r5, r5, #32
 800807a:	2a00      	cmp	r2, #0
 800807c:	bfb6      	itet	lt
 800807e:	222d      	movlt	r2, #45	; 0x2d
 8008080:	2200      	movge	r2, #0
 8008082:	eeb1 8b40 	vneglt.f64	d8, d0
 8008086:	2d46      	cmp	r5, #70	; 0x46
 8008088:	460c      	mov	r4, r1
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	d004      	beq.n	8008098 <__cvt+0x38>
 800808e:	2d45      	cmp	r5, #69	; 0x45
 8008090:	d100      	bne.n	8008094 <__cvt+0x34>
 8008092:	3401      	adds	r4, #1
 8008094:	2102      	movs	r1, #2
 8008096:	e000      	b.n	800809a <__cvt+0x3a>
 8008098:	2103      	movs	r1, #3
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	ab02      	add	r3, sp, #8
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4622      	mov	r2, r4
 80080a4:	4633      	mov	r3, r6
 80080a6:	eeb0 0b48 	vmov.f64	d0, d8
 80080aa:	f001 fdfd 	bl	8009ca8 <_dtoa_r>
 80080ae:	2d47      	cmp	r5, #71	; 0x47
 80080b0:	d101      	bne.n	80080b6 <__cvt+0x56>
 80080b2:	07fb      	lsls	r3, r7, #31
 80080b4:	d51a      	bpl.n	80080ec <__cvt+0x8c>
 80080b6:	2d46      	cmp	r5, #70	; 0x46
 80080b8:	eb00 0204 	add.w	r2, r0, r4
 80080bc:	d10c      	bne.n	80080d8 <__cvt+0x78>
 80080be:	7803      	ldrb	r3, [r0, #0]
 80080c0:	2b30      	cmp	r3, #48	; 0x30
 80080c2:	d107      	bne.n	80080d4 <__cvt+0x74>
 80080c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080cc:	bf1c      	itt	ne
 80080ce:	f1c4 0401 	rsbne	r4, r4, #1
 80080d2:	6034      	strne	r4, [r6, #0]
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	441a      	add	r2, r3
 80080d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	bf08      	it	eq
 80080e2:	9203      	streq	r2, [sp, #12]
 80080e4:	2130      	movs	r1, #48	; 0x30
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d307      	bcc.n	80080fc <__cvt+0x9c>
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080f0:	1a1b      	subs	r3, r3, r0
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	b005      	add	sp, #20
 80080f6:	ecbd 8b02 	vpop	{d8}
 80080fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fc:	1c5c      	adds	r4, r3, #1
 80080fe:	9403      	str	r4, [sp, #12]
 8008100:	7019      	strb	r1, [r3, #0]
 8008102:	e7f0      	b.n	80080e6 <__cvt+0x86>

08008104 <__exponent>:
 8008104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008106:	4603      	mov	r3, r0
 8008108:	2900      	cmp	r1, #0
 800810a:	bfb8      	it	lt
 800810c:	4249      	neglt	r1, r1
 800810e:	f803 2b02 	strb.w	r2, [r3], #2
 8008112:	bfb4      	ite	lt
 8008114:	222d      	movlt	r2, #45	; 0x2d
 8008116:	222b      	movge	r2, #43	; 0x2b
 8008118:	2909      	cmp	r1, #9
 800811a:	7042      	strb	r2, [r0, #1]
 800811c:	dd2a      	ble.n	8008174 <__exponent+0x70>
 800811e:	f10d 0407 	add.w	r4, sp, #7
 8008122:	46a4      	mov	ip, r4
 8008124:	270a      	movs	r7, #10
 8008126:	46a6      	mov	lr, r4
 8008128:	460a      	mov	r2, r1
 800812a:	fb91 f6f7 	sdiv	r6, r1, r7
 800812e:	fb07 1516 	mls	r5, r7, r6, r1
 8008132:	3530      	adds	r5, #48	; 0x30
 8008134:	2a63      	cmp	r2, #99	; 0x63
 8008136:	f104 34ff 	add.w	r4, r4, #4294967295
 800813a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800813e:	4631      	mov	r1, r6
 8008140:	dcf1      	bgt.n	8008126 <__exponent+0x22>
 8008142:	3130      	adds	r1, #48	; 0x30
 8008144:	f1ae 0502 	sub.w	r5, lr, #2
 8008148:	f804 1c01 	strb.w	r1, [r4, #-1]
 800814c:	1c44      	adds	r4, r0, #1
 800814e:	4629      	mov	r1, r5
 8008150:	4561      	cmp	r1, ip
 8008152:	d30a      	bcc.n	800816a <__exponent+0x66>
 8008154:	f10d 0209 	add.w	r2, sp, #9
 8008158:	eba2 020e 	sub.w	r2, r2, lr
 800815c:	4565      	cmp	r5, ip
 800815e:	bf88      	it	hi
 8008160:	2200      	movhi	r2, #0
 8008162:	4413      	add	r3, r2
 8008164:	1a18      	subs	r0, r3, r0
 8008166:	b003      	add	sp, #12
 8008168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800816e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008172:	e7ed      	b.n	8008150 <__exponent+0x4c>
 8008174:	2330      	movs	r3, #48	; 0x30
 8008176:	3130      	adds	r1, #48	; 0x30
 8008178:	7083      	strb	r3, [r0, #2]
 800817a:	70c1      	strb	r1, [r0, #3]
 800817c:	1d03      	adds	r3, r0, #4
 800817e:	e7f1      	b.n	8008164 <__exponent+0x60>

08008180 <_printf_float>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b08b      	sub	sp, #44	; 0x2c
 8008186:	460c      	mov	r4, r1
 8008188:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800818c:	4616      	mov	r6, r2
 800818e:	461f      	mov	r7, r3
 8008190:	4605      	mov	r5, r0
 8008192:	f002 fe67 	bl	800ae64 <_localeconv_r>
 8008196:	f8d0 b000 	ldr.w	fp, [r0]
 800819a:	4658      	mov	r0, fp
 800819c:	f7f8 f850 	bl	8000240 <strlen>
 80081a0:	2300      	movs	r3, #0
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	f8d8 3000 	ldr.w	r3, [r8]
 80081a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	3307      	adds	r3, #7
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	f103 0108 	add.w	r1, r3, #8
 80081b8:	f8c8 1000 	str.w	r1, [r8]
 80081bc:	4682      	mov	sl, r0
 80081be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80081c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008428 <_printf_float+0x2a8>
 80081ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80081ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80081d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80081d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081da:	dd24      	ble.n	8008226 <_printf_float+0xa6>
 80081dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80081e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e4:	d502      	bpl.n	80081ec <_printf_float+0x6c>
 80081e6:	232d      	movs	r3, #45	; 0x2d
 80081e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ec:	4b90      	ldr	r3, [pc, #576]	; (8008430 <_printf_float+0x2b0>)
 80081ee:	4891      	ldr	r0, [pc, #580]	; (8008434 <_printf_float+0x2b4>)
 80081f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80081f4:	bf94      	ite	ls
 80081f6:	4698      	movls	r8, r3
 80081f8:	4680      	movhi	r8, r0
 80081fa:	2303      	movs	r3, #3
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	f022 0204 	bic.w	r2, r2, #4
 8008202:	2300      	movs	r3, #0
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	9700      	str	r7, [sp, #0]
 800820a:	4633      	mov	r3, r6
 800820c:	aa09      	add	r2, sp, #36	; 0x24
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 f9d3 	bl	80085bc <_printf_common>
 8008216:	3001      	adds	r0, #1
 8008218:	f040 808a 	bne.w	8008330 <_printf_float+0x1b0>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	b00b      	add	sp, #44	; 0x2c
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	eeb4 0b40 	vcmp.f64	d0, d0
 800822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822e:	d709      	bvc.n	8008244 <_printf_float+0xc4>
 8008230:	ee10 3a90 	vmov	r3, s1
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfbc      	itt	lt
 8008238:	232d      	movlt	r3, #45	; 0x2d
 800823a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800823e:	487e      	ldr	r0, [pc, #504]	; (8008438 <_printf_float+0x2b8>)
 8008240:	4b7e      	ldr	r3, [pc, #504]	; (800843c <_printf_float+0x2bc>)
 8008242:	e7d5      	b.n	80081f0 <_printf_float+0x70>
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800824a:	9104      	str	r1, [sp, #16]
 800824c:	1c59      	adds	r1, r3, #1
 800824e:	d13c      	bne.n	80082ca <_printf_float+0x14a>
 8008250:	2306      	movs	r3, #6
 8008252:	6063      	str	r3, [r4, #4]
 8008254:	2300      	movs	r3, #0
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	ab08      	add	r3, sp, #32
 800825a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800825e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008262:	ab07      	add	r3, sp, #28
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	6022      	str	r2, [r4, #0]
 800826a:	f10d 031b 	add.w	r3, sp, #27
 800826e:	4628      	mov	r0, r5
 8008270:	f7ff fef6 	bl	8008060 <__cvt>
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	9907      	ldr	r1, [sp, #28]
 8008278:	2b47      	cmp	r3, #71	; 0x47
 800827a:	4680      	mov	r8, r0
 800827c:	d108      	bne.n	8008290 <_printf_float+0x110>
 800827e:	1cc8      	adds	r0, r1, #3
 8008280:	db02      	blt.n	8008288 <_printf_float+0x108>
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	4299      	cmp	r1, r3
 8008286:	dd41      	ble.n	800830c <_printf_float+0x18c>
 8008288:	f1a9 0902 	sub.w	r9, r9, #2
 800828c:	fa5f f989 	uxtb.w	r9, r9
 8008290:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008294:	d820      	bhi.n	80082d8 <_printf_float+0x158>
 8008296:	3901      	subs	r1, #1
 8008298:	464a      	mov	r2, r9
 800829a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800829e:	9107      	str	r1, [sp, #28]
 80082a0:	f7ff ff30 	bl	8008104 <__exponent>
 80082a4:	9a08      	ldr	r2, [sp, #32]
 80082a6:	9004      	str	r0, [sp, #16]
 80082a8:	1813      	adds	r3, r2, r0
 80082aa:	2a01      	cmp	r2, #1
 80082ac:	6123      	str	r3, [r4, #16]
 80082ae:	dc02      	bgt.n	80082b6 <_printf_float+0x136>
 80082b0:	6822      	ldr	r2, [r4, #0]
 80082b2:	07d2      	lsls	r2, r2, #31
 80082b4:	d501      	bpl.n	80082ba <_printf_float+0x13a>
 80082b6:	3301      	adds	r3, #1
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0a2      	beq.n	8008208 <_printf_float+0x88>
 80082c2:	232d      	movs	r3, #45	; 0x2d
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c8:	e79e      	b.n	8008208 <_printf_float+0x88>
 80082ca:	9904      	ldr	r1, [sp, #16]
 80082cc:	2947      	cmp	r1, #71	; 0x47
 80082ce:	d1c1      	bne.n	8008254 <_printf_float+0xd4>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1bf      	bne.n	8008254 <_printf_float+0xd4>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e7bc      	b.n	8008252 <_printf_float+0xd2>
 80082d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082dc:	d118      	bne.n	8008310 <_printf_float+0x190>
 80082de:	2900      	cmp	r1, #0
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	dd0b      	ble.n	80082fc <_printf_float+0x17c>
 80082e4:	6121      	str	r1, [r4, #16]
 80082e6:	b913      	cbnz	r3, 80082ee <_printf_float+0x16e>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	07d0      	lsls	r0, r2, #31
 80082ec:	d502      	bpl.n	80082f4 <_printf_float+0x174>
 80082ee:	3301      	adds	r3, #1
 80082f0:	440b      	add	r3, r1
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	2300      	movs	r3, #0
 80082f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	e7de      	b.n	80082ba <_printf_float+0x13a>
 80082fc:	b913      	cbnz	r3, 8008304 <_printf_float+0x184>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	07d2      	lsls	r2, r2, #31
 8008302:	d501      	bpl.n	8008308 <_printf_float+0x188>
 8008304:	3302      	adds	r3, #2
 8008306:	e7f4      	b.n	80082f2 <_printf_float+0x172>
 8008308:	2301      	movs	r3, #1
 800830a:	e7f2      	b.n	80082f2 <_printf_float+0x172>
 800830c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	4299      	cmp	r1, r3
 8008314:	db05      	blt.n	8008322 <_printf_float+0x1a2>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6121      	str	r1, [r4, #16]
 800831a:	07d8      	lsls	r0, r3, #31
 800831c:	d5ea      	bpl.n	80082f4 <_printf_float+0x174>
 800831e:	1c4b      	adds	r3, r1, #1
 8008320:	e7e7      	b.n	80082f2 <_printf_float+0x172>
 8008322:	2900      	cmp	r1, #0
 8008324:	bfd4      	ite	le
 8008326:	f1c1 0202 	rsble	r2, r1, #2
 800832a:	2201      	movgt	r2, #1
 800832c:	4413      	add	r3, r2
 800832e:	e7e0      	b.n	80082f2 <_printf_float+0x172>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	055a      	lsls	r2, r3, #21
 8008334:	d407      	bmi.n	8008346 <_printf_float+0x1c6>
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	4642      	mov	r2, r8
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d12a      	bne.n	800839a <_printf_float+0x21a>
 8008344:	e76a      	b.n	800821c <_printf_float+0x9c>
 8008346:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800834a:	f240 80e2 	bls.w	8008512 <_printf_float+0x392>
 800834e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008352:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835a:	d133      	bne.n	80083c4 <_printf_float+0x244>
 800835c:	4a38      	ldr	r2, [pc, #224]	; (8008440 <_printf_float+0x2c0>)
 800835e:	2301      	movs	r3, #1
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af58 	beq.w	800821c <_printf_float+0x9c>
 800836c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008370:	429a      	cmp	r2, r3
 8008372:	db02      	blt.n	800837a <_printf_float+0x1fa>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	07d8      	lsls	r0, r3, #31
 8008378:	d50f      	bpl.n	800839a <_printf_float+0x21a>
 800837a:	4653      	mov	r3, sl
 800837c:	465a      	mov	r2, fp
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f af49 	beq.w	800821c <_printf_float+0x9c>
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	f104 091a 	add.w	r9, r4, #26
 8008392:	9b08      	ldr	r3, [sp, #32]
 8008394:	3b01      	subs	r3, #1
 8008396:	4543      	cmp	r3, r8
 8008398:	dc09      	bgt.n	80083ae <_printf_float+0x22e>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	079b      	lsls	r3, r3, #30
 800839e:	f100 8108 	bmi.w	80085b2 <_printf_float+0x432>
 80083a2:	68e0      	ldr	r0, [r4, #12]
 80083a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a6:	4298      	cmp	r0, r3
 80083a8:	bfb8      	it	lt
 80083aa:	4618      	movlt	r0, r3
 80083ac:	e738      	b.n	8008220 <_printf_float+0xa0>
 80083ae:	2301      	movs	r3, #1
 80083b0:	464a      	mov	r2, r9
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f af2f 	beq.w	800821c <_printf_float+0x9c>
 80083be:	f108 0801 	add.w	r8, r8, #1
 80083c2:	e7e6      	b.n	8008392 <_printf_float+0x212>
 80083c4:	9b07      	ldr	r3, [sp, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	dc3c      	bgt.n	8008444 <_printf_float+0x2c4>
 80083ca:	4a1d      	ldr	r2, [pc, #116]	; (8008440 <_printf_float+0x2c0>)
 80083cc:	2301      	movs	r3, #1
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f af21 	beq.w	800821c <_printf_float+0x9c>
 80083da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80083de:	4313      	orrs	r3, r2
 80083e0:	d102      	bne.n	80083e8 <_printf_float+0x268>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	07d9      	lsls	r1, r3, #31
 80083e6:	d5d8      	bpl.n	800839a <_printf_float+0x21a>
 80083e8:	4653      	mov	r3, sl
 80083ea:	465a      	mov	r2, fp
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f af12 	beq.w	800821c <_printf_float+0x9c>
 80083f8:	f04f 0900 	mov.w	r9, #0
 80083fc:	f104 0a1a 	add.w	sl, r4, #26
 8008400:	9b07      	ldr	r3, [sp, #28]
 8008402:	425b      	negs	r3, r3
 8008404:	454b      	cmp	r3, r9
 8008406:	dc01      	bgt.n	800840c <_printf_float+0x28c>
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	e795      	b.n	8008338 <_printf_float+0x1b8>
 800840c:	2301      	movs	r3, #1
 800840e:	4652      	mov	r2, sl
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f af00 	beq.w	800821c <_printf_float+0x9c>
 800841c:	f109 0901 	add.w	r9, r9, #1
 8008420:	e7ee      	b.n	8008400 <_printf_float+0x280>
 8008422:	bf00      	nop
 8008424:	f3af 8000 	nop.w
 8008428:	ffffffff 	.word	0xffffffff
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	0800d260 	.word	0x0800d260
 8008434:	0800d264 	.word	0x0800d264
 8008438:	0800d26c 	.word	0x0800d26c
 800843c:	0800d268 	.word	0x0800d268
 8008440:	0800d561 	.word	0x0800d561
 8008444:	9a08      	ldr	r2, [sp, #32]
 8008446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008448:	429a      	cmp	r2, r3
 800844a:	bfa8      	it	ge
 800844c:	461a      	movge	r2, r3
 800844e:	2a00      	cmp	r2, #0
 8008450:	4691      	mov	r9, r2
 8008452:	dc38      	bgt.n	80084c6 <_printf_float+0x346>
 8008454:	2300      	movs	r3, #0
 8008456:	9305      	str	r3, [sp, #20]
 8008458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845c:	f104 021a 	add.w	r2, r4, #26
 8008460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008462:	9905      	ldr	r1, [sp, #20]
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	eba3 0309 	sub.w	r3, r3, r9
 800846a:	428b      	cmp	r3, r1
 800846c:	dc33      	bgt.n	80084d6 <_printf_float+0x356>
 800846e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008472:	429a      	cmp	r2, r3
 8008474:	db3c      	blt.n	80084f0 <_printf_float+0x370>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	07da      	lsls	r2, r3, #31
 800847a:	d439      	bmi.n	80084f0 <_printf_float+0x370>
 800847c:	9b08      	ldr	r3, [sp, #32]
 800847e:	9a04      	ldr	r2, [sp, #16]
 8008480:	9907      	ldr	r1, [sp, #28]
 8008482:	1a9a      	subs	r2, r3, r2
 8008484:	eba3 0901 	sub.w	r9, r3, r1
 8008488:	4591      	cmp	r9, r2
 800848a:	bfa8      	it	ge
 800848c:	4691      	movge	r9, r2
 800848e:	f1b9 0f00 	cmp.w	r9, #0
 8008492:	dc35      	bgt.n	8008500 <_printf_float+0x380>
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800849c:	f104 0a1a 	add.w	sl, r4, #26
 80084a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	eba3 0309 	sub.w	r3, r3, r9
 80084aa:	4543      	cmp	r3, r8
 80084ac:	f77f af75 	ble.w	800839a <_printf_float+0x21a>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f aeae 	beq.w	800821c <_printf_float+0x9c>
 80084c0:	f108 0801 	add.w	r8, r8, #1
 80084c4:	e7ec      	b.n	80084a0 <_printf_float+0x320>
 80084c6:	4613      	mov	r3, r2
 80084c8:	4631      	mov	r1, r6
 80084ca:	4642      	mov	r2, r8
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1bf      	bne.n	8008454 <_printf_float+0x2d4>
 80084d4:	e6a2      	b.n	800821c <_printf_float+0x9c>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4631      	mov	r1, r6
 80084da:	4628      	mov	r0, r5
 80084dc:	9204      	str	r2, [sp, #16]
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f ae9b 	beq.w	800821c <_printf_float+0x9c>
 80084e6:	9b05      	ldr	r3, [sp, #20]
 80084e8:	9a04      	ldr	r2, [sp, #16]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	e7b7      	b.n	8008460 <_printf_float+0x2e0>
 80084f0:	4653      	mov	r3, sl
 80084f2:	465a      	mov	r2, fp
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	d1be      	bne.n	800847c <_printf_float+0x2fc>
 80084fe:	e68d      	b.n	800821c <_printf_float+0x9c>
 8008500:	9a04      	ldr	r2, [sp, #16]
 8008502:	464b      	mov	r3, r9
 8008504:	4442      	add	r2, r8
 8008506:	4631      	mov	r1, r6
 8008508:	4628      	mov	r0, r5
 800850a:	47b8      	blx	r7
 800850c:	3001      	adds	r0, #1
 800850e:	d1c1      	bne.n	8008494 <_printf_float+0x314>
 8008510:	e684      	b.n	800821c <_printf_float+0x9c>
 8008512:	9a08      	ldr	r2, [sp, #32]
 8008514:	2a01      	cmp	r2, #1
 8008516:	dc01      	bgt.n	800851c <_printf_float+0x39c>
 8008518:	07db      	lsls	r3, r3, #31
 800851a:	d537      	bpl.n	800858c <_printf_float+0x40c>
 800851c:	2301      	movs	r3, #1
 800851e:	4642      	mov	r2, r8
 8008520:	4631      	mov	r1, r6
 8008522:	4628      	mov	r0, r5
 8008524:	47b8      	blx	r7
 8008526:	3001      	adds	r0, #1
 8008528:	f43f ae78 	beq.w	800821c <_printf_float+0x9c>
 800852c:	4653      	mov	r3, sl
 800852e:	465a      	mov	r2, fp
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f ae70 	beq.w	800821c <_printf_float+0x9c>
 800853c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008540:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d01b      	beq.n	8008582 <_printf_float+0x402>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	f108 0201 	add.w	r2, r8, #1
 8008550:	3b01      	subs	r3, #1
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d10e      	bne.n	800857a <_printf_float+0x3fa>
 800855c:	e65e      	b.n	800821c <_printf_float+0x9c>
 800855e:	2301      	movs	r3, #1
 8008560:	464a      	mov	r2, r9
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	f43f ae57 	beq.w	800821c <_printf_float+0x9c>
 800856e:	f108 0801 	add.w	r8, r8, #1
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	3b01      	subs	r3, #1
 8008576:	4543      	cmp	r3, r8
 8008578:	dcf1      	bgt.n	800855e <_printf_float+0x3de>
 800857a:	9b04      	ldr	r3, [sp, #16]
 800857c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008580:	e6db      	b.n	800833a <_printf_float+0x1ba>
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	f104 091a 	add.w	r9, r4, #26
 800858a:	e7f2      	b.n	8008572 <_printf_float+0x3f2>
 800858c:	2301      	movs	r3, #1
 800858e:	4642      	mov	r2, r8
 8008590:	e7df      	b.n	8008552 <_printf_float+0x3d2>
 8008592:	2301      	movs	r3, #1
 8008594:	464a      	mov	r2, r9
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	f43f ae3d 	beq.w	800821c <_printf_float+0x9c>
 80085a2:	f108 0801 	add.w	r8, r8, #1
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085aa:	1a5b      	subs	r3, r3, r1
 80085ac:	4543      	cmp	r3, r8
 80085ae:	dcf0      	bgt.n	8008592 <_printf_float+0x412>
 80085b0:	e6f7      	b.n	80083a2 <_printf_float+0x222>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	f104 0919 	add.w	r9, r4, #25
 80085ba:	e7f4      	b.n	80085a6 <_printf_float+0x426>

080085bc <_printf_common>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	4616      	mov	r6, r2
 80085c2:	4699      	mov	r9, r3
 80085c4:	688a      	ldr	r2, [r1, #8]
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfb8      	it	lt
 80085d0:	4613      	movlt	r3, r2
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d8:	4607      	mov	r7, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b10a      	cbz	r2, 80085e2 <_printf_common+0x26>
 80085de:	3301      	adds	r3, #1
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	6833      	ldrmi	r3, [r6, #0]
 80085ea:	3302      	addmi	r3, #2
 80085ec:	6033      	strmi	r3, [r6, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d106      	bne.n	8008604 <_printf_common+0x48>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	6832      	ldr	r2, [r6, #0]
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc26      	bgt.n	8008652 <_printf_common+0x96>
 8008604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008608:	1e13      	subs	r3, r2, #0
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	0692      	lsls	r2, r2, #26
 8008612:	d42b      	bmi.n	800866c <_printf_common+0xb0>
 8008614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008618:	4649      	mov	r1, r9
 800861a:	4638      	mov	r0, r7
 800861c:	47c0      	blx	r8
 800861e:	3001      	adds	r0, #1
 8008620:	d01e      	beq.n	8008660 <_printf_common+0xa4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	68e5      	ldr	r5, [r4, #12]
 8008626:	6832      	ldr	r2, [r6, #0]
 8008628:	f003 0306 	and.w	r3, r3, #6
 800862c:	2b04      	cmp	r3, #4
 800862e:	bf08      	it	eq
 8008630:	1aad      	subeq	r5, r5, r2
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	bf0c      	ite	eq
 8008638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800863c:	2500      	movne	r5, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfc4      	itt	gt
 8008642:	1a9b      	subgt	r3, r3, r2
 8008644:	18ed      	addgt	r5, r5, r3
 8008646:	2600      	movs	r6, #0
 8008648:	341a      	adds	r4, #26
 800864a:	42b5      	cmp	r5, r6
 800864c:	d11a      	bne.n	8008684 <_printf_common+0xc8>
 800864e:	2000      	movs	r0, #0
 8008650:	e008      	b.n	8008664 <_printf_common+0xa8>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4649      	mov	r1, r9
 8008658:	4638      	mov	r0, r7
 800865a:	47c0      	blx	r8
 800865c:	3001      	adds	r0, #1
 800865e:	d103      	bne.n	8008668 <_printf_common+0xac>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	3501      	adds	r5, #1
 800866a:	e7c6      	b.n	80085fa <_printf_common+0x3e>
 800866c:	18e1      	adds	r1, r4, r3
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	2030      	movs	r0, #48	; 0x30
 8008672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008676:	4422      	add	r2, r4
 8008678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800867c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008680:	3302      	adds	r3, #2
 8008682:	e7c7      	b.n	8008614 <_printf_common+0x58>
 8008684:	2301      	movs	r3, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4649      	mov	r1, r9
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	3001      	adds	r0, #1
 8008690:	d0e6      	beq.n	8008660 <_printf_common+0xa4>
 8008692:	3601      	adds	r6, #1
 8008694:	e7d9      	b.n	800864a <_printf_common+0x8e>
	...

08008698 <_printf_i>:
 8008698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	7e0f      	ldrb	r7, [r1, #24]
 800869e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a0:	2f78      	cmp	r7, #120	; 0x78
 80086a2:	4691      	mov	r9, r2
 80086a4:	4680      	mov	r8, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	469a      	mov	sl, r3
 80086aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ae:	d807      	bhi.n	80086c0 <_printf_i+0x28>
 80086b0:	2f62      	cmp	r7, #98	; 0x62
 80086b2:	d80a      	bhi.n	80086ca <_printf_i+0x32>
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	f000 80d8 	beq.w	800886a <_printf_i+0x1d2>
 80086ba:	2f58      	cmp	r7, #88	; 0x58
 80086bc:	f000 80a3 	beq.w	8008806 <_printf_i+0x16e>
 80086c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086c8:	e03a      	b.n	8008740 <_printf_i+0xa8>
 80086ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ce:	2b15      	cmp	r3, #21
 80086d0:	d8f6      	bhi.n	80086c0 <_printf_i+0x28>
 80086d2:	a101      	add	r1, pc, #4	; (adr r1, 80086d8 <_printf_i+0x40>)
 80086d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080086c1 	.word	0x080086c1
 80086e4:	080086c1 	.word	0x080086c1
 80086e8:	080086c1 	.word	0x080086c1
 80086ec:	080086c1 	.word	0x080086c1
 80086f0:	08008745 	.word	0x08008745
 80086f4:	080086c1 	.word	0x080086c1
 80086f8:	080086c1 	.word	0x080086c1
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	08008851 	.word	0x08008851
 8008708:	08008775 	.word	0x08008775
 800870c:	08008833 	.word	0x08008833
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008873 	.word	0x08008873
 800871c:	080086c1 	.word	0x080086c1
 8008720:	08008775 	.word	0x08008775
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	0800883b 	.word	0x0800883b
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	602a      	str	r2, [r5, #0]
 8008738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e0a3      	b.n	800888c <_printf_i+0x1f4>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	6829      	ldr	r1, [r5, #0]
 8008748:	0606      	lsls	r6, r0, #24
 800874a:	f101 0304 	add.w	r3, r1, #4
 800874e:	d50a      	bpl.n	8008766 <_printf_i+0xce>
 8008750:	680e      	ldr	r6, [r1, #0]
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	2e00      	cmp	r6, #0
 8008756:	da03      	bge.n	8008760 <_printf_i+0xc8>
 8008758:	232d      	movs	r3, #45	; 0x2d
 800875a:	4276      	negs	r6, r6
 800875c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008760:	485e      	ldr	r0, [pc, #376]	; (80088dc <_printf_i+0x244>)
 8008762:	230a      	movs	r3, #10
 8008764:	e019      	b.n	800879a <_printf_i+0x102>
 8008766:	680e      	ldr	r6, [r1, #0]
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800876e:	bf18      	it	ne
 8008770:	b236      	sxthne	r6, r6
 8008772:	e7ef      	b.n	8008754 <_printf_i+0xbc>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	6029      	str	r1, [r5, #0]
 800877c:	0601      	lsls	r1, r0, #24
 800877e:	d501      	bpl.n	8008784 <_printf_i+0xec>
 8008780:	681e      	ldr	r6, [r3, #0]
 8008782:	e002      	b.n	800878a <_printf_i+0xf2>
 8008784:	0646      	lsls	r6, r0, #25
 8008786:	d5fb      	bpl.n	8008780 <_printf_i+0xe8>
 8008788:	881e      	ldrh	r6, [r3, #0]
 800878a:	4854      	ldr	r0, [pc, #336]	; (80088dc <_printf_i+0x244>)
 800878c:	2f6f      	cmp	r7, #111	; 0x6f
 800878e:	bf0c      	ite	eq
 8008790:	2308      	moveq	r3, #8
 8008792:	230a      	movne	r3, #10
 8008794:	2100      	movs	r1, #0
 8008796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879a:	6865      	ldr	r5, [r4, #4]
 800879c:	60a5      	str	r5, [r4, #8]
 800879e:	2d00      	cmp	r5, #0
 80087a0:	bfa2      	ittt	ge
 80087a2:	6821      	ldrge	r1, [r4, #0]
 80087a4:	f021 0104 	bicge.w	r1, r1, #4
 80087a8:	6021      	strge	r1, [r4, #0]
 80087aa:	b90e      	cbnz	r6, 80087b0 <_printf_i+0x118>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	d04d      	beq.n	800884c <_printf_i+0x1b4>
 80087b0:	4615      	mov	r5, r2
 80087b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087b6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ba:	5dc7      	ldrb	r7, [r0, r7]
 80087bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c0:	4637      	mov	r7, r6
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	460e      	mov	r6, r1
 80087c6:	d9f4      	bls.n	80087b2 <_printf_i+0x11a>
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d10b      	bne.n	80087e4 <_printf_i+0x14c>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07de      	lsls	r6, r3, #31
 80087d0:	d508      	bpl.n	80087e4 <_printf_i+0x14c>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4299      	cmp	r1, r3
 80087d8:	bfde      	ittt	le
 80087da:	2330      	movle	r3, #48	; 0x30
 80087dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e4:	1b52      	subs	r2, r2, r5
 80087e6:	6122      	str	r2, [r4, #16]
 80087e8:	f8cd a000 	str.w	sl, [sp]
 80087ec:	464b      	mov	r3, r9
 80087ee:	aa03      	add	r2, sp, #12
 80087f0:	4621      	mov	r1, r4
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7ff fee2 	bl	80085bc <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d14c      	bne.n	8008896 <_printf_i+0x1fe>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b004      	add	sp, #16
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	4835      	ldr	r0, [pc, #212]	; (80088dc <_printf_i+0x244>)
 8008808:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800880c:	6829      	ldr	r1, [r5, #0]
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f851 6b04 	ldr.w	r6, [r1], #4
 8008814:	6029      	str	r1, [r5, #0]
 8008816:	061d      	lsls	r5, r3, #24
 8008818:	d514      	bpl.n	8008844 <_printf_i+0x1ac>
 800881a:	07df      	lsls	r7, r3, #31
 800881c:	bf44      	itt	mi
 800881e:	f043 0320 	orrmi.w	r3, r3, #32
 8008822:	6023      	strmi	r3, [r4, #0]
 8008824:	b91e      	cbnz	r6, 800882e <_printf_i+0x196>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	f023 0320 	bic.w	r3, r3, #32
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	2310      	movs	r3, #16
 8008830:	e7b0      	b.n	8008794 <_printf_i+0xfc>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f043 0320 	orr.w	r3, r3, #32
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	2378      	movs	r3, #120	; 0x78
 800883c:	4828      	ldr	r0, [pc, #160]	; (80088e0 <_printf_i+0x248>)
 800883e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008842:	e7e3      	b.n	800880c <_printf_i+0x174>
 8008844:	0659      	lsls	r1, r3, #25
 8008846:	bf48      	it	mi
 8008848:	b2b6      	uxthmi	r6, r6
 800884a:	e7e6      	b.n	800881a <_printf_i+0x182>
 800884c:	4615      	mov	r5, r2
 800884e:	e7bb      	b.n	80087c8 <_printf_i+0x130>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6826      	ldr	r6, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6028      	str	r0, [r5, #0]
 800885a:	0635      	lsls	r5, r6, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1cc>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1d2>
 8008864:	0670      	lsls	r0, r6, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1c8>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4615      	mov	r5, r2
 8008870:	e7ba      	b.n	80087e8 <_printf_i+0x150>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	681d      	ldr	r5, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4628      	mov	r0, r5
 8008880:	f7f7 fce6 	bl	8000250 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1f2>
 8008886:	1b40      	subs	r0, r0, r5
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	e7a8      	b.n	80087e8 <_printf_i+0x150>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	462a      	mov	r2, r5
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ab      	beq.n	80087fc <_printf_i+0x164>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x23a>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a4      	b.n	8008800 <_printf_i+0x168>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09b      	beq.n	80087fc <_printf_i+0x164>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x21e>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x212>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x22e>
 80088da:	bf00      	nop
 80088dc:	0800d270 	.word	0x0800d270
 80088e0:	0800d281 	.word	0x0800d281

080088e4 <_scanf_float>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	b087      	sub	sp, #28
 80088ea:	4617      	mov	r7, r2
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	688b      	ldr	r3, [r1, #8]
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80088f6:	bf83      	ittte	hi
 80088f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088fc:	195b      	addhi	r3, r3, r5
 80088fe:	9302      	strhi	r3, [sp, #8]
 8008900:	2300      	movls	r3, #0
 8008902:	bf86      	itte	hi
 8008904:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008908:	608b      	strhi	r3, [r1, #8]
 800890a:	9302      	strls	r3, [sp, #8]
 800890c:	680b      	ldr	r3, [r1, #0]
 800890e:	468b      	mov	fp, r1
 8008910:	2500      	movs	r5, #0
 8008912:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008916:	f84b 3b1c 	str.w	r3, [fp], #28
 800891a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800891e:	4680      	mov	r8, r0
 8008920:	460c      	mov	r4, r1
 8008922:	465e      	mov	r6, fp
 8008924:	46aa      	mov	sl, r5
 8008926:	46a9      	mov	r9, r5
 8008928:	9501      	str	r5, [sp, #4]
 800892a:	68a2      	ldr	r2, [r4, #8]
 800892c:	b152      	cbz	r2, 8008944 <_scanf_float+0x60>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b4e      	cmp	r3, #78	; 0x4e
 8008934:	d864      	bhi.n	8008a00 <_scanf_float+0x11c>
 8008936:	2b40      	cmp	r3, #64	; 0x40
 8008938:	d83c      	bhi.n	80089b4 <_scanf_float+0xd0>
 800893a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800893e:	b2c8      	uxtb	r0, r1
 8008940:	280e      	cmp	r0, #14
 8008942:	d93a      	bls.n	80089ba <_scanf_float+0xd6>
 8008944:	f1b9 0f00 	cmp.w	r9, #0
 8008948:	d003      	beq.n	8008952 <_scanf_float+0x6e>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008956:	f1ba 0f01 	cmp.w	sl, #1
 800895a:	f200 8113 	bhi.w	8008b84 <_scanf_float+0x2a0>
 800895e:	455e      	cmp	r6, fp
 8008960:	f200 8105 	bhi.w	8008b6e <_scanf_float+0x28a>
 8008964:	2501      	movs	r5, #1
 8008966:	4628      	mov	r0, r5
 8008968:	b007      	add	sp, #28
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008972:	2a0d      	cmp	r2, #13
 8008974:	d8e6      	bhi.n	8008944 <_scanf_float+0x60>
 8008976:	a101      	add	r1, pc, #4	; (adr r1, 800897c <_scanf_float+0x98>)
 8008978:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800897c:	08008abb 	.word	0x08008abb
 8008980:	08008945 	.word	0x08008945
 8008984:	08008945 	.word	0x08008945
 8008988:	08008945 	.word	0x08008945
 800898c:	08008b1b 	.word	0x08008b1b
 8008990:	08008af3 	.word	0x08008af3
 8008994:	08008945 	.word	0x08008945
 8008998:	08008945 	.word	0x08008945
 800899c:	08008ac9 	.word	0x08008ac9
 80089a0:	08008945 	.word	0x08008945
 80089a4:	08008945 	.word	0x08008945
 80089a8:	08008945 	.word	0x08008945
 80089ac:	08008945 	.word	0x08008945
 80089b0:	08008a81 	.word	0x08008a81
 80089b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80089b8:	e7db      	b.n	8008972 <_scanf_float+0x8e>
 80089ba:	290e      	cmp	r1, #14
 80089bc:	d8c2      	bhi.n	8008944 <_scanf_float+0x60>
 80089be:	a001      	add	r0, pc, #4	; (adr r0, 80089c4 <_scanf_float+0xe0>)
 80089c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80089c4:	08008a73 	.word	0x08008a73
 80089c8:	08008945 	.word	0x08008945
 80089cc:	08008a73 	.word	0x08008a73
 80089d0:	08008b07 	.word	0x08008b07
 80089d4:	08008945 	.word	0x08008945
 80089d8:	08008a21 	.word	0x08008a21
 80089dc:	08008a5d 	.word	0x08008a5d
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a5d 	.word	0x08008a5d
 80089ec:	08008a5d 	.word	0x08008a5d
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a5d 	.word	0x08008a5d
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	2b6e      	cmp	r3, #110	; 0x6e
 8008a02:	d809      	bhi.n	8008a18 <_scanf_float+0x134>
 8008a04:	2b60      	cmp	r3, #96	; 0x60
 8008a06:	d8b2      	bhi.n	800896e <_scanf_float+0x8a>
 8008a08:	2b54      	cmp	r3, #84	; 0x54
 8008a0a:	d077      	beq.n	8008afc <_scanf_float+0x218>
 8008a0c:	2b59      	cmp	r3, #89	; 0x59
 8008a0e:	d199      	bne.n	8008944 <_scanf_float+0x60>
 8008a10:	2d07      	cmp	r5, #7
 8008a12:	d197      	bne.n	8008944 <_scanf_float+0x60>
 8008a14:	2508      	movs	r5, #8
 8008a16:	e029      	b.n	8008a6c <_scanf_float+0x188>
 8008a18:	2b74      	cmp	r3, #116	; 0x74
 8008a1a:	d06f      	beq.n	8008afc <_scanf_float+0x218>
 8008a1c:	2b79      	cmp	r3, #121	; 0x79
 8008a1e:	e7f6      	b.n	8008a0e <_scanf_float+0x12a>
 8008a20:	6821      	ldr	r1, [r4, #0]
 8008a22:	05c8      	lsls	r0, r1, #23
 8008a24:	d51a      	bpl.n	8008a5c <_scanf_float+0x178>
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a2c:	6021      	str	r1, [r4, #0]
 8008a2e:	f109 0901 	add.w	r9, r9, #1
 8008a32:	b11b      	cbz	r3, 8008a3c <_scanf_float+0x158>
 8008a34:	3b01      	subs	r3, #1
 8008a36:	3201      	adds	r2, #1
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	60a2      	str	r2, [r4, #8]
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	60a3      	str	r3, [r4, #8]
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	3301      	adds	r3, #1
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	f340 8084 	ble.w	8008b5c <_scanf_float+0x278>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	3301      	adds	r3, #1
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	e766      	b.n	800892a <_scanf_float+0x46>
 8008a5c:	eb1a 0f05 	cmn.w	sl, r5
 8008a60:	f47f af70 	bne.w	8008944 <_scanf_float+0x60>
 8008a64:	6822      	ldr	r2, [r4, #0]
 8008a66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008a70:	e7e4      	b.n	8008a3c <_scanf_float+0x158>
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	0610      	lsls	r0, r2, #24
 8008a76:	f57f af65 	bpl.w	8008944 <_scanf_float+0x60>
 8008a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a7e:	e7f4      	b.n	8008a6a <_scanf_float+0x186>
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	d10e      	bne.n	8008aa4 <_scanf_float+0x1c0>
 8008a86:	f1b9 0f00 	cmp.w	r9, #0
 8008a8a:	d10e      	bne.n	8008aaa <_scanf_float+0x1c6>
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a96:	d108      	bne.n	8008aaa <_scanf_float+0x1c6>
 8008a98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a9c:	6022      	str	r2, [r4, #0]
 8008a9e:	f04f 0a01 	mov.w	sl, #1
 8008aa2:	e7e3      	b.n	8008a6c <_scanf_float+0x188>
 8008aa4:	f1ba 0f02 	cmp.w	sl, #2
 8008aa8:	d055      	beq.n	8008b56 <_scanf_float+0x272>
 8008aaa:	2d01      	cmp	r5, #1
 8008aac:	d002      	beq.n	8008ab4 <_scanf_float+0x1d0>
 8008aae:	2d04      	cmp	r5, #4
 8008ab0:	f47f af48 	bne.w	8008944 <_scanf_float+0x60>
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	b2ed      	uxtb	r5, r5
 8008ab8:	e7d8      	b.n	8008a6c <_scanf_float+0x188>
 8008aba:	f1ba 0f01 	cmp.w	sl, #1
 8008abe:	f47f af41 	bne.w	8008944 <_scanf_float+0x60>
 8008ac2:	f04f 0a02 	mov.w	sl, #2
 8008ac6:	e7d1      	b.n	8008a6c <_scanf_float+0x188>
 8008ac8:	b97d      	cbnz	r5, 8008aea <_scanf_float+0x206>
 8008aca:	f1b9 0f00 	cmp.w	r9, #0
 8008ace:	f47f af3c 	bne.w	800894a <_scanf_float+0x66>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ad8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008adc:	f47f af39 	bne.w	8008952 <_scanf_float+0x6e>
 8008ae0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ae4:	6022      	str	r2, [r4, #0]
 8008ae6:	2501      	movs	r5, #1
 8008ae8:	e7c0      	b.n	8008a6c <_scanf_float+0x188>
 8008aea:	2d03      	cmp	r5, #3
 8008aec:	d0e2      	beq.n	8008ab4 <_scanf_float+0x1d0>
 8008aee:	2d05      	cmp	r5, #5
 8008af0:	e7de      	b.n	8008ab0 <_scanf_float+0x1cc>
 8008af2:	2d02      	cmp	r5, #2
 8008af4:	f47f af26 	bne.w	8008944 <_scanf_float+0x60>
 8008af8:	2503      	movs	r5, #3
 8008afa:	e7b7      	b.n	8008a6c <_scanf_float+0x188>
 8008afc:	2d06      	cmp	r5, #6
 8008afe:	f47f af21 	bne.w	8008944 <_scanf_float+0x60>
 8008b02:	2507      	movs	r5, #7
 8008b04:	e7b2      	b.n	8008a6c <_scanf_float+0x188>
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	0591      	lsls	r1, r2, #22
 8008b0a:	f57f af1b 	bpl.w	8008944 <_scanf_float+0x60>
 8008b0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b18:	e7a8      	b.n	8008a6c <_scanf_float+0x188>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008b20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b24:	d006      	beq.n	8008b34 <_scanf_float+0x250>
 8008b26:	0550      	lsls	r0, r2, #21
 8008b28:	f57f af0c 	bpl.w	8008944 <_scanf_float+0x60>
 8008b2c:	f1b9 0f00 	cmp.w	r9, #0
 8008b30:	f43f af0f 	beq.w	8008952 <_scanf_float+0x6e>
 8008b34:	0591      	lsls	r1, r2, #22
 8008b36:	bf58      	it	pl
 8008b38:	9901      	ldrpl	r1, [sp, #4]
 8008b3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b3e:	bf58      	it	pl
 8008b40:	eba9 0101 	subpl.w	r1, r9, r1
 8008b44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b48:	bf58      	it	pl
 8008b4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	f04f 0900 	mov.w	r9, #0
 8008b54:	e78a      	b.n	8008a6c <_scanf_float+0x188>
 8008b56:	f04f 0a03 	mov.w	sl, #3
 8008b5a:	e787      	b.n	8008a6c <_scanf_float+0x188>
 8008b5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b60:	4639      	mov	r1, r7
 8008b62:	4640      	mov	r0, r8
 8008b64:	4798      	blx	r3
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f aedf 	beq.w	800892a <_scanf_float+0x46>
 8008b6c:	e6ea      	b.n	8008944 <_scanf_float+0x60>
 8008b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b76:	463a      	mov	r2, r7
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4798      	blx	r3
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	e6ec      	b.n	800895e <_scanf_float+0x7a>
 8008b84:	1e6b      	subs	r3, r5, #1
 8008b86:	2b06      	cmp	r3, #6
 8008b88:	d825      	bhi.n	8008bd6 <_scanf_float+0x2f2>
 8008b8a:	2d02      	cmp	r5, #2
 8008b8c:	d836      	bhi.n	8008bfc <_scanf_float+0x318>
 8008b8e:	455e      	cmp	r6, fp
 8008b90:	f67f aee8 	bls.w	8008964 <_scanf_float+0x80>
 8008b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b9c:	463a      	mov	r2, r7
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4798      	blx	r3
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	6123      	str	r3, [r4, #16]
 8008ba8:	e7f1      	b.n	8008b8e <_scanf_float+0x2aa>
 8008baa:	9802      	ldr	r0, [sp, #8]
 8008bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	4640      	mov	r0, r8
 8008bba:	4798      	blx	r3
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bc6:	fa5f fa8a 	uxtb.w	sl, sl
 8008bca:	f1ba 0f02 	cmp.w	sl, #2
 8008bce:	d1ec      	bne.n	8008baa <_scanf_float+0x2c6>
 8008bd0:	3d03      	subs	r5, #3
 8008bd2:	b2ed      	uxtb	r5, r5
 8008bd4:	1b76      	subs	r6, r6, r5
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	05da      	lsls	r2, r3, #23
 8008bda:	d52f      	bpl.n	8008c3c <_scanf_float+0x358>
 8008bdc:	055b      	lsls	r3, r3, #21
 8008bde:	d510      	bpl.n	8008c02 <_scanf_float+0x31e>
 8008be0:	455e      	cmp	r6, fp
 8008be2:	f67f aebf 	bls.w	8008964 <_scanf_float+0x80>
 8008be6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bee:	463a      	mov	r2, r7
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4798      	blx	r3
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	e7f1      	b.n	8008be0 <_scanf_float+0x2fc>
 8008bfc:	46aa      	mov	sl, r5
 8008bfe:	9602      	str	r6, [sp, #8]
 8008c00:	e7df      	b.n	8008bc2 <_scanf_float+0x2de>
 8008c02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	2965      	cmp	r1, #101	; 0x65
 8008c0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	d00c      	beq.n	8008c30 <_scanf_float+0x34c>
 8008c16:	2945      	cmp	r1, #69	; 0x45
 8008c18:	d00a      	beq.n	8008c30 <_scanf_float+0x34c>
 8008c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4640      	mov	r0, r8
 8008c22:	4798      	blx	r3
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	1eb5      	subs	r5, r6, #2
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c34:	463a      	mov	r2, r7
 8008c36:	4640      	mov	r0, r8
 8008c38:	4798      	blx	r3
 8008c3a:	462e      	mov	r6, r5
 8008c3c:	6825      	ldr	r5, [r4, #0]
 8008c3e:	f015 0510 	ands.w	r5, r5, #16
 8008c42:	d14e      	bne.n	8008ce2 <_scanf_float+0x3fe>
 8008c44:	7035      	strb	r5, [r6, #0]
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c50:	d119      	bne.n	8008c86 <_scanf_float+0x3a2>
 8008c52:	9b01      	ldr	r3, [sp, #4]
 8008c54:	454b      	cmp	r3, r9
 8008c56:	eba3 0209 	sub.w	r2, r3, r9
 8008c5a:	d121      	bne.n	8008ca0 <_scanf_float+0x3bc>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4659      	mov	r1, fp
 8008c60:	4640      	mov	r0, r8
 8008c62:	f000 feaf 	bl	80099c4 <_strtod_r>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	f012 0f02 	tst.w	r2, #2
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	d021      	beq.n	8008cb6 <_scanf_float+0x3d2>
 8008c72:	9903      	ldr	r1, [sp, #12]
 8008c74:	1d1a      	adds	r2, r3, #4
 8008c76:	600a      	str	r2, [r1, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	ed83 0b00 	vstr	d0, [r3]
 8008c7e:	68e3      	ldr	r3, [r4, #12]
 8008c80:	3301      	adds	r3, #1
 8008c82:	60e3      	str	r3, [r4, #12]
 8008c84:	e66f      	b.n	8008966 <_scanf_float+0x82>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0e7      	beq.n	8008c5c <_scanf_float+0x378>
 8008c8c:	9905      	ldr	r1, [sp, #20]
 8008c8e:	230a      	movs	r3, #10
 8008c90:	462a      	mov	r2, r5
 8008c92:	3101      	adds	r1, #1
 8008c94:	4640      	mov	r0, r8
 8008c96:	f000 ff1d 	bl	8009ad4 <_strtol_r>
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	9e05      	ldr	r6, [sp, #20]
 8008c9e:	1ac2      	subs	r2, r0, r3
 8008ca0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ca4:	429e      	cmp	r6, r3
 8008ca6:	bf28      	it	cs
 8008ca8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008cac:	490e      	ldr	r1, [pc, #56]	; (8008ce8 <_scanf_float+0x404>)
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f000 f824 	bl	8008cfc <siprintf>
 8008cb4:	e7d2      	b.n	8008c5c <_scanf_float+0x378>
 8008cb6:	9903      	ldr	r1, [sp, #12]
 8008cb8:	f012 0f04 	tst.w	r2, #4
 8008cbc:	f103 0204 	add.w	r2, r3, #4
 8008cc0:	600a      	str	r2, [r1, #0]
 8008cc2:	d1d9      	bne.n	8008c78 <_scanf_float+0x394>
 8008cc4:	eeb4 0b40 	vcmp.f64	d0, d0
 8008cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ccc:	681e      	ldr	r6, [r3, #0]
 8008cce:	d705      	bvc.n	8008cdc <_scanf_float+0x3f8>
 8008cd0:	4806      	ldr	r0, [pc, #24]	; (8008cec <_scanf_float+0x408>)
 8008cd2:	f000 f80d 	bl	8008cf0 <nanf>
 8008cd6:	ed86 0a00 	vstr	s0, [r6]
 8008cda:	e7d0      	b.n	8008c7e <_scanf_float+0x39a>
 8008cdc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008ce0:	e7f9      	b.n	8008cd6 <_scanf_float+0x3f2>
 8008ce2:	2500      	movs	r5, #0
 8008ce4:	e63f      	b.n	8008966 <_scanf_float+0x82>
 8008ce6:	bf00      	nop
 8008ce8:	0800d292 	.word	0x0800d292
 8008cec:	0800d5b3 	.word	0x0800d5b3

08008cf0 <nanf>:
 8008cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cf8 <nanf+0x8>
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	7fc00000 	.word	0x7fc00000

08008cfc <siprintf>:
 8008cfc:	b40e      	push	{r1, r2, r3}
 8008cfe:	b500      	push	{lr}
 8008d00:	b09c      	sub	sp, #112	; 0x70
 8008d02:	ab1d      	add	r3, sp, #116	; 0x74
 8008d04:	9002      	str	r0, [sp, #8]
 8008d06:	9006      	str	r0, [sp, #24]
 8008d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d0c:	4809      	ldr	r0, [pc, #36]	; (8008d34 <siprintf+0x38>)
 8008d0e:	9107      	str	r1, [sp, #28]
 8008d10:	9104      	str	r1, [sp, #16]
 8008d12:	4909      	ldr	r1, [pc, #36]	; (8008d38 <siprintf+0x3c>)
 8008d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	6800      	ldr	r0, [r0, #0]
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	a902      	add	r1, sp, #8
 8008d20:	f002 fee0 	bl	800bae4 <_svfiprintf_r>
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	b01c      	add	sp, #112	; 0x70
 8008d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d30:	b003      	add	sp, #12
 8008d32:	4770      	bx	lr
 8008d34:	20000058 	.word	0x20000058
 8008d38:	ffff0208 	.word	0xffff0208

08008d3c <siscanf>:
 8008d3c:	b40e      	push	{r1, r2, r3}
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	b09f      	sub	sp, #124	; 0x7c
 8008d42:	ac21      	add	r4, sp, #132	; 0x84
 8008d44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008d48:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008d52:	9004      	str	r0, [sp, #16]
 8008d54:	9008      	str	r0, [sp, #32]
 8008d56:	f7f7 fa73 	bl	8000240 <strlen>
 8008d5a:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <siscanf+0x50>)
 8008d5c:	9005      	str	r0, [sp, #20]
 8008d5e:	9009      	str	r0, [sp, #36]	; 0x24
 8008d60:	930d      	str	r3, [sp, #52]	; 0x34
 8008d62:	480b      	ldr	r0, [pc, #44]	; (8008d90 <siscanf+0x54>)
 8008d64:	9a01      	ldr	r2, [sp, #4]
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9403      	str	r4, [sp, #12]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9311      	str	r3, [sp, #68]	; 0x44
 8008d6e:	9316      	str	r3, [sp, #88]	; 0x58
 8008d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d74:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	f003 f80c 	bl	800bd98 <__ssvfiscanf_r>
 8008d80:	b01f      	add	sp, #124	; 0x7c
 8008d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d86:	b003      	add	sp, #12
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	08008db7 	.word	0x08008db7
 8008d90:	20000058 	.word	0x20000058

08008d94 <__sread>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	f003 fac6 	bl	800c32c <_read_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	bfab      	itete	ge
 8008da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008da6:	89a3      	ldrhlt	r3, [r4, #12]
 8008da8:	181b      	addge	r3, r3, r0
 8008daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dae:	bfac      	ite	ge
 8008db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db2:	81a3      	strhlt	r3, [r4, #12]
 8008db4:	bd10      	pop	{r4, pc}

08008db6 <__seofread>:
 8008db6:	2000      	movs	r0, #0
 8008db8:	4770      	bx	lr

08008dba <__swrite>:
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	05db      	lsls	r3, r3, #23
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	4616      	mov	r6, r2
 8008dca:	d505      	bpl.n	8008dd8 <__swrite+0x1e>
 8008dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f002 f84a 	bl	800ae6c <_lseek_r>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	4632      	mov	r2, r6
 8008de6:	463b      	mov	r3, r7
 8008de8:	4628      	mov	r0, r5
 8008dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	f000 bead 	b.w	8009b4c <_write_r>

08008df2 <__sseek>:
 8008df2:	b510      	push	{r4, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f002 f837 	bl	800ae6c <_lseek_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	bf15      	itete	ne
 8008e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0e:	81a3      	strheq	r3, [r4, #12]
 8008e10:	bf18      	it	ne
 8008e12:	81a3      	strhne	r3, [r4, #12]
 8008e14:	bd10      	pop	{r4, pc}

08008e16 <__sclose>:
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 bea9 	b.w	8009b70 <_close_r>

08008e1e <sulp>:
 8008e1e:	b570      	push	{r4, r5, r6, lr}
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	4616      	mov	r6, r2
 8008e26:	ec45 4b10 	vmov	d0, r4, r5
 8008e2a:	f002 fbbd 	bl	800b5a8 <__ulp>
 8008e2e:	b17e      	cbz	r6, 8008e50 <sulp+0x32>
 8008e30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dd09      	ble.n	8008e50 <sulp+0x32>
 8008e3c:	051b      	lsls	r3, r3, #20
 8008e3e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008e42:	2000      	movs	r0, #0
 8008e44:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008e48:	ec41 0b17 	vmov	d7, r0, r1
 8008e4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	0000      	movs	r0, r0
 8008e54:	0000      	movs	r0, r0
	...

08008e58 <_strtod_l>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	ed2d 8b0e 	vpush	{d8-d14}
 8008e60:	b097      	sub	sp, #92	; 0x5c
 8008e62:	461f      	mov	r7, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	9312      	str	r3, [sp, #72]	; 0x48
 8008e68:	4ba1      	ldr	r3, [pc, #644]	; (80090f0 <_strtod_l+0x298>)
 8008e6a:	920d      	str	r2, [sp, #52]	; 0x34
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	4604      	mov	r4, r0
 8008e72:	4618      	mov	r0, r3
 8008e74:	468b      	mov	fp, r1
 8008e76:	f7f7 f9e3 	bl	8000240 <strlen>
 8008e7a:	f04f 0800 	mov.w	r8, #0
 8008e7e:	4605      	mov	r5, r0
 8008e80:	f04f 0900 	mov.w	r9, #0
 8008e84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e8a:	7813      	ldrb	r3, [r2, #0]
 8008e8c:	2b2b      	cmp	r3, #43	; 0x2b
 8008e8e:	d04d      	beq.n	8008f2c <_strtod_l+0xd4>
 8008e90:	d83a      	bhi.n	8008f08 <_strtod_l+0xb0>
 8008e92:	2b0d      	cmp	r3, #13
 8008e94:	d833      	bhi.n	8008efe <_strtod_l+0xa6>
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	d833      	bhi.n	8008f02 <_strtod_l+0xaa>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d03d      	beq.n	8008f1a <_strtod_l+0xc2>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008ea4:	7833      	ldrb	r3, [r6, #0]
 8008ea6:	2b30      	cmp	r3, #48	; 0x30
 8008ea8:	f040 80b0 	bne.w	800900c <_strtod_l+0x1b4>
 8008eac:	7873      	ldrb	r3, [r6, #1]
 8008eae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008eb2:	2b58      	cmp	r3, #88	; 0x58
 8008eb4:	d167      	bne.n	8008f86 <_strtod_l+0x12e>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	ab12      	add	r3, sp, #72	; 0x48
 8008ebc:	9702      	str	r7, [sp, #8]
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	4a8c      	ldr	r2, [pc, #560]	; (80090f4 <_strtod_l+0x29c>)
 8008ec2:	ab13      	add	r3, sp, #76	; 0x4c
 8008ec4:	a911      	add	r1, sp, #68	; 0x44
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f001 fcc4 	bl	800a854 <__gethex>
 8008ecc:	f010 0507 	ands.w	r5, r0, #7
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	d005      	beq.n	8008ee0 <_strtod_l+0x88>
 8008ed4:	2d06      	cmp	r5, #6
 8008ed6:	d12b      	bne.n	8008f30 <_strtod_l+0xd8>
 8008ed8:	3601      	adds	r6, #1
 8008eda:	2300      	movs	r3, #0
 8008edc:	9611      	str	r6, [sp, #68]	; 0x44
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f040 854e 	bne.w	8009984 <_strtod_l+0xb2c>
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	b1e3      	cbz	r3, 8008f26 <_strtod_l+0xce>
 8008eec:	ec49 8b17 	vmov	d7, r8, r9
 8008ef0:	eeb1 0b47 	vneg.f64	d0, d7
 8008ef4:	b017      	add	sp, #92	; 0x5c
 8008ef6:	ecbd 8b0e 	vpop	{d8-d14}
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d1cd      	bne.n	8008e9e <_strtod_l+0x46>
 8008f02:	3201      	adds	r2, #1
 8008f04:	9211      	str	r2, [sp, #68]	; 0x44
 8008f06:	e7bf      	b.n	8008e88 <_strtod_l+0x30>
 8008f08:	2b2d      	cmp	r3, #45	; 0x2d
 8008f0a:	d1c8      	bne.n	8008e9e <_strtod_l+0x46>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	9308      	str	r3, [sp, #32]
 8008f10:	1c53      	adds	r3, r2, #1
 8008f12:	9311      	str	r3, [sp, #68]	; 0x44
 8008f14:	7853      	ldrb	r3, [r2, #1]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1c3      	bne.n	8008ea2 <_strtod_l+0x4a>
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f040 852d 	bne.w	8009980 <_strtod_l+0xb28>
 8008f26:	ec49 8b10 	vmov	d0, r8, r9
 8008f2a:	e7e3      	b.n	8008ef4 <_strtod_l+0x9c>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e7ee      	b.n	8008f0e <_strtod_l+0xb6>
 8008f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f32:	b13a      	cbz	r2, 8008f44 <_strtod_l+0xec>
 8008f34:	2135      	movs	r1, #53	; 0x35
 8008f36:	a814      	add	r0, sp, #80	; 0x50
 8008f38:	f002 fc3e 	bl	800b7b8 <__copybits>
 8008f3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f002 f800 	bl	800af44 <_Bfree>
 8008f44:	3d01      	subs	r5, #1
 8008f46:	2d04      	cmp	r5, #4
 8008f48:	d806      	bhi.n	8008f58 <_strtod_l+0x100>
 8008f4a:	e8df f005 	tbb	[pc, r5]
 8008f4e:	030a      	.short	0x030a
 8008f50:	1714      	.short	0x1714
 8008f52:	0a          	.byte	0x0a
 8008f53:	00          	.byte	0x00
 8008f54:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008f58:	073f      	lsls	r7, r7, #28
 8008f5a:	d5c1      	bpl.n	8008ee0 <_strtod_l+0x88>
 8008f5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008f60:	e7be      	b.n	8008ee0 <_strtod_l+0x88>
 8008f62:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008f66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008f74:	e7f0      	b.n	8008f58 <_strtod_l+0x100>
 8008f76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80090f8 <_strtod_l+0x2a0>
 8008f7a:	e7ed      	b.n	8008f58 <_strtod_l+0x100>
 8008f7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008f80:	f04f 38ff 	mov.w	r8, #4294967295
 8008f84:	e7e8      	b.n	8008f58 <_strtod_l+0x100>
 8008f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	9211      	str	r2, [sp, #68]	; 0x44
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b30      	cmp	r3, #48	; 0x30
 8008f90:	d0f9      	beq.n	8008f86 <_strtod_l+0x12e>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0a4      	beq.n	8008ee0 <_strtod_l+0x88>
 8008f96:	2301      	movs	r3, #1
 8008f98:	f04f 0a00 	mov.w	sl, #0
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8008fa2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008fa6:	f8cd a018 	str.w	sl, [sp, #24]
 8008faa:	220a      	movs	r2, #10
 8008fac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008fae:	7807      	ldrb	r7, [r0, #0]
 8008fb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008fb4:	b2d9      	uxtb	r1, r3
 8008fb6:	2909      	cmp	r1, #9
 8008fb8:	d92a      	bls.n	8009010 <_strtod_l+0x1b8>
 8008fba:	9907      	ldr	r1, [sp, #28]
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	f003 fa17 	bl	800c3f0 <strncmp>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d033      	beq.n	800902e <_strtod_l+0x1d6>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	9b06      	ldr	r3, [sp, #24]
 8008fca:	463a      	mov	r2, r7
 8008fcc:	4601      	mov	r1, r0
 8008fce:	4607      	mov	r7, r0
 8008fd0:	2a65      	cmp	r2, #101	; 0x65
 8008fd2:	d001      	beq.n	8008fd8 <_strtod_l+0x180>
 8008fd4:	2a45      	cmp	r2, #69	; 0x45
 8008fd6:	d117      	bne.n	8009008 <_strtod_l+0x1b0>
 8008fd8:	b91b      	cbnz	r3, 8008fe2 <_strtod_l+0x18a>
 8008fda:	9b04      	ldr	r3, [sp, #16]
 8008fdc:	4303      	orrs	r3, r0
 8008fde:	d09c      	beq.n	8008f1a <_strtod_l+0xc2>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008fe6:	f10b 0201 	add.w	r2, fp, #1
 8008fea:	9211      	str	r2, [sp, #68]	; 0x44
 8008fec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008ff0:	2a2b      	cmp	r2, #43	; 0x2b
 8008ff2:	d071      	beq.n	80090d8 <_strtod_l+0x280>
 8008ff4:	2a2d      	cmp	r2, #45	; 0x2d
 8008ff6:	d077      	beq.n	80090e8 <_strtod_l+0x290>
 8008ff8:	f04f 0e00 	mov.w	lr, #0
 8008ffc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009000:	2d09      	cmp	r5, #9
 8009002:	d97f      	bls.n	8009104 <_strtod_l+0x2ac>
 8009004:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009008:	2500      	movs	r5, #0
 800900a:	e09b      	b.n	8009144 <_strtod_l+0x2ec>
 800900c:	2300      	movs	r3, #0
 800900e:	e7c3      	b.n	8008f98 <_strtod_l+0x140>
 8009010:	9906      	ldr	r1, [sp, #24]
 8009012:	2908      	cmp	r1, #8
 8009014:	bfdd      	ittte	le
 8009016:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009018:	fb02 3301 	mlale	r3, r2, r1, r3
 800901c:	9309      	strle	r3, [sp, #36]	; 0x24
 800901e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	3001      	adds	r0, #1
 8009026:	3301      	adds	r3, #1
 8009028:	9306      	str	r3, [sp, #24]
 800902a:	9011      	str	r0, [sp, #68]	; 0x44
 800902c:	e7be      	b.n	8008fac <_strtod_l+0x154>
 800902e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009030:	195a      	adds	r2, r3, r5
 8009032:	9211      	str	r2, [sp, #68]	; 0x44
 8009034:	5d5a      	ldrb	r2, [r3, r5]
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	b3a3      	cbz	r3, 80090a4 <_strtod_l+0x24c>
 800903a:	4607      	mov	r7, r0
 800903c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009040:	2909      	cmp	r1, #9
 8009042:	d912      	bls.n	800906a <_strtod_l+0x212>
 8009044:	2101      	movs	r1, #1
 8009046:	e7c3      	b.n	8008fd0 <_strtod_l+0x178>
 8009048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	9211      	str	r2, [sp, #68]	; 0x44
 800904e:	785a      	ldrb	r2, [r3, #1]
 8009050:	3001      	adds	r0, #1
 8009052:	2a30      	cmp	r2, #48	; 0x30
 8009054:	d0f8      	beq.n	8009048 <_strtod_l+0x1f0>
 8009056:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800905a:	2b08      	cmp	r3, #8
 800905c:	f200 8497 	bhi.w	800998e <_strtod_l+0xb36>
 8009060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009062:	930a      	str	r3, [sp, #40]	; 0x28
 8009064:	4607      	mov	r7, r0
 8009066:	2000      	movs	r0, #0
 8009068:	4603      	mov	r3, r0
 800906a:	3a30      	subs	r2, #48	; 0x30
 800906c:	f100 0101 	add.w	r1, r0, #1
 8009070:	d012      	beq.n	8009098 <_strtod_l+0x240>
 8009072:	440f      	add	r7, r1
 8009074:	eb00 0c03 	add.w	ip, r0, r3
 8009078:	4619      	mov	r1, r3
 800907a:	250a      	movs	r5, #10
 800907c:	4561      	cmp	r1, ip
 800907e:	d113      	bne.n	80090a8 <_strtod_l+0x250>
 8009080:	1819      	adds	r1, r3, r0
 8009082:	2908      	cmp	r1, #8
 8009084:	f103 0301 	add.w	r3, r3, #1
 8009088:	4403      	add	r3, r0
 800908a:	dc1c      	bgt.n	80090c6 <_strtod_l+0x26e>
 800908c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800908e:	210a      	movs	r1, #10
 8009090:	fb01 2200 	mla	r2, r1, r0, r2
 8009094:	9209      	str	r2, [sp, #36]	; 0x24
 8009096:	2100      	movs	r1, #0
 8009098:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800909a:	1c50      	adds	r0, r2, #1
 800909c:	9011      	str	r0, [sp, #68]	; 0x44
 800909e:	7852      	ldrb	r2, [r2, #1]
 80090a0:	4608      	mov	r0, r1
 80090a2:	e7cb      	b.n	800903c <_strtod_l+0x1e4>
 80090a4:	9806      	ldr	r0, [sp, #24]
 80090a6:	e7d4      	b.n	8009052 <_strtod_l+0x1fa>
 80090a8:	2908      	cmp	r1, #8
 80090aa:	dc04      	bgt.n	80090b6 <_strtod_l+0x25e>
 80090ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090ae:	436e      	muls	r6, r5
 80090b0:	9609      	str	r6, [sp, #36]	; 0x24
 80090b2:	3101      	adds	r1, #1
 80090b4:	e7e2      	b.n	800907c <_strtod_l+0x224>
 80090b6:	f101 0e01 	add.w	lr, r1, #1
 80090ba:	f1be 0f10 	cmp.w	lr, #16
 80090be:	bfd8      	it	le
 80090c0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80090c4:	e7f5      	b.n	80090b2 <_strtod_l+0x25a>
 80090c6:	2b10      	cmp	r3, #16
 80090c8:	bfdc      	itt	le
 80090ca:	210a      	movle	r1, #10
 80090cc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80090d0:	e7e1      	b.n	8009096 <_strtod_l+0x23e>
 80090d2:	2700      	movs	r7, #0
 80090d4:	2101      	movs	r1, #1
 80090d6:	e780      	b.n	8008fda <_strtod_l+0x182>
 80090d8:	f04f 0e00 	mov.w	lr, #0
 80090dc:	f10b 0202 	add.w	r2, fp, #2
 80090e0:	9211      	str	r2, [sp, #68]	; 0x44
 80090e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80090e6:	e789      	b.n	8008ffc <_strtod_l+0x1a4>
 80090e8:	f04f 0e01 	mov.w	lr, #1
 80090ec:	e7f6      	b.n	80090dc <_strtod_l+0x284>
 80090ee:	bf00      	nop
 80090f0:	0800d3e0 	.word	0x0800d3e0
 80090f4:	0800d298 	.word	0x0800d298
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090fe:	1c55      	adds	r5, r2, #1
 8009100:	9511      	str	r5, [sp, #68]	; 0x44
 8009102:	7852      	ldrb	r2, [r2, #1]
 8009104:	2a30      	cmp	r2, #48	; 0x30
 8009106:	d0f9      	beq.n	80090fc <_strtod_l+0x2a4>
 8009108:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800910c:	2d08      	cmp	r5, #8
 800910e:	f63f af7b 	bhi.w	8009008 <_strtod_l+0x1b0>
 8009112:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009116:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009118:	9207      	str	r2, [sp, #28]
 800911a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800911c:	1c55      	adds	r5, r2, #1
 800911e:	9511      	str	r5, [sp, #68]	; 0x44
 8009120:	7852      	ldrb	r2, [r2, #1]
 8009122:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009126:	2e09      	cmp	r6, #9
 8009128:	d937      	bls.n	800919a <_strtod_l+0x342>
 800912a:	9e07      	ldr	r6, [sp, #28]
 800912c:	1bad      	subs	r5, r5, r6
 800912e:	2d08      	cmp	r5, #8
 8009130:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009134:	dc02      	bgt.n	800913c <_strtod_l+0x2e4>
 8009136:	4565      	cmp	r5, ip
 8009138:	bfa8      	it	ge
 800913a:	4665      	movge	r5, ip
 800913c:	f1be 0f00 	cmp.w	lr, #0
 8009140:	d000      	beq.n	8009144 <_strtod_l+0x2ec>
 8009142:	426d      	negs	r5, r5
 8009144:	2b00      	cmp	r3, #0
 8009146:	d14d      	bne.n	80091e4 <_strtod_l+0x38c>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	4303      	orrs	r3, r0
 800914c:	f47f aec8 	bne.w	8008ee0 <_strtod_l+0x88>
 8009150:	2900      	cmp	r1, #0
 8009152:	f47f aee2 	bne.w	8008f1a <_strtod_l+0xc2>
 8009156:	2a69      	cmp	r2, #105	; 0x69
 8009158:	d027      	beq.n	80091aa <_strtod_l+0x352>
 800915a:	dc24      	bgt.n	80091a6 <_strtod_l+0x34e>
 800915c:	2a49      	cmp	r2, #73	; 0x49
 800915e:	d024      	beq.n	80091aa <_strtod_l+0x352>
 8009160:	2a4e      	cmp	r2, #78	; 0x4e
 8009162:	f47f aeda 	bne.w	8008f1a <_strtod_l+0xc2>
 8009166:	4996      	ldr	r1, [pc, #600]	; (80093c0 <_strtod_l+0x568>)
 8009168:	a811      	add	r0, sp, #68	; 0x44
 800916a:	f001 fdcb 	bl	800ad04 <__match>
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f aed3 	beq.w	8008f1a <_strtod_l+0xc2>
 8009174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b28      	cmp	r3, #40	; 0x28
 800917a:	d12d      	bne.n	80091d8 <_strtod_l+0x380>
 800917c:	4991      	ldr	r1, [pc, #580]	; (80093c4 <_strtod_l+0x56c>)
 800917e:	aa14      	add	r2, sp, #80	; 0x50
 8009180:	a811      	add	r0, sp, #68	; 0x44
 8009182:	f001 fdd3 	bl	800ad2c <__hexnan>
 8009186:	2805      	cmp	r0, #5
 8009188:	d126      	bne.n	80091d8 <_strtod_l+0x380>
 800918a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800918c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009190:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009194:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009198:	e6a2      	b.n	8008ee0 <_strtod_l+0x88>
 800919a:	250a      	movs	r5, #10
 800919c:	fb05 250c 	mla	r5, r5, ip, r2
 80091a0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80091a4:	e7b9      	b.n	800911a <_strtod_l+0x2c2>
 80091a6:	2a6e      	cmp	r2, #110	; 0x6e
 80091a8:	e7db      	b.n	8009162 <_strtod_l+0x30a>
 80091aa:	4987      	ldr	r1, [pc, #540]	; (80093c8 <_strtod_l+0x570>)
 80091ac:	a811      	add	r0, sp, #68	; 0x44
 80091ae:	f001 fda9 	bl	800ad04 <__match>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aeb1 	beq.w	8008f1a <_strtod_l+0xc2>
 80091b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ba:	4984      	ldr	r1, [pc, #528]	; (80093cc <_strtod_l+0x574>)
 80091bc:	3b01      	subs	r3, #1
 80091be:	a811      	add	r0, sp, #68	; 0x44
 80091c0:	9311      	str	r3, [sp, #68]	; 0x44
 80091c2:	f001 fd9f 	bl	800ad04 <__match>
 80091c6:	b910      	cbnz	r0, 80091ce <_strtod_l+0x376>
 80091c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ca:	3301      	adds	r3, #1
 80091cc:	9311      	str	r3, [sp, #68]	; 0x44
 80091ce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80093e0 <_strtod_l+0x588>
 80091d2:	f04f 0800 	mov.w	r8, #0
 80091d6:	e683      	b.n	8008ee0 <_strtod_l+0x88>
 80091d8:	487d      	ldr	r0, [pc, #500]	; (80093d0 <_strtod_l+0x578>)
 80091da:	f003 f8b9 	bl	800c350 <nan>
 80091de:	ec59 8b10 	vmov	r8, r9, d0
 80091e2:	e67d      	b.n	8008ee0 <_strtod_l+0x88>
 80091e4:	1bea      	subs	r2, r5, r7
 80091e6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80091ea:	9207      	str	r2, [sp, #28]
 80091ec:	9a06      	ldr	r2, [sp, #24]
 80091ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	bf08      	it	eq
 80091f6:	461a      	moveq	r2, r3
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	9206      	str	r2, [sp, #24]
 80091fc:	461a      	mov	r2, r3
 80091fe:	bfa8      	it	ge
 8009200:	2210      	movge	r2, #16
 8009202:	2b09      	cmp	r3, #9
 8009204:	ec59 8b17 	vmov	r8, r9, d7
 8009208:	dd0c      	ble.n	8009224 <_strtod_l+0x3cc>
 800920a:	4972      	ldr	r1, [pc, #456]	; (80093d4 <_strtod_l+0x57c>)
 800920c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009210:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009214:	ee06 aa90 	vmov	s13, sl
 8009218:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800921c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009220:	ec59 8b16 	vmov	r8, r9, d6
 8009224:	2b0f      	cmp	r3, #15
 8009226:	dc36      	bgt.n	8009296 <_strtod_l+0x43e>
 8009228:	9907      	ldr	r1, [sp, #28]
 800922a:	2900      	cmp	r1, #0
 800922c:	f43f ae58 	beq.w	8008ee0 <_strtod_l+0x88>
 8009230:	dd23      	ble.n	800927a <_strtod_l+0x422>
 8009232:	2916      	cmp	r1, #22
 8009234:	dc0b      	bgt.n	800924e <_strtod_l+0x3f6>
 8009236:	4b67      	ldr	r3, [pc, #412]	; (80093d4 <_strtod_l+0x57c>)
 8009238:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800923c:	ed93 7b00 	vldr	d7, [r3]
 8009240:	ec49 8b16 	vmov	d6, r8, r9
 8009244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009248:	ec59 8b17 	vmov	r8, r9, d7
 800924c:	e648      	b.n	8008ee0 <_strtod_l+0x88>
 800924e:	9807      	ldr	r0, [sp, #28]
 8009250:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009254:	4281      	cmp	r1, r0
 8009256:	db1e      	blt.n	8009296 <_strtod_l+0x43e>
 8009258:	4a5e      	ldr	r2, [pc, #376]	; (80093d4 <_strtod_l+0x57c>)
 800925a:	f1c3 030f 	rsb	r3, r3, #15
 800925e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009262:	ed91 7b00 	vldr	d7, [r1]
 8009266:	ec49 8b16 	vmov	d6, r8, r9
 800926a:	1ac3      	subs	r3, r0, r3
 800926c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009270:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009274:	ed92 6b00 	vldr	d6, [r2]
 8009278:	e7e4      	b.n	8009244 <_strtod_l+0x3ec>
 800927a:	9907      	ldr	r1, [sp, #28]
 800927c:	3116      	adds	r1, #22
 800927e:	db0a      	blt.n	8009296 <_strtod_l+0x43e>
 8009280:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <_strtod_l+0x57c>)
 8009282:	1b7d      	subs	r5, r7, r5
 8009284:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009288:	ed95 7b00 	vldr	d7, [r5]
 800928c:	ec49 8b16 	vmov	d6, r8, r9
 8009290:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009294:	e7d8      	b.n	8009248 <_strtod_l+0x3f0>
 8009296:	9907      	ldr	r1, [sp, #28]
 8009298:	1a9a      	subs	r2, r3, r2
 800929a:	440a      	add	r2, r1
 800929c:	2a00      	cmp	r2, #0
 800929e:	dd6f      	ble.n	8009380 <_strtod_l+0x528>
 80092a0:	f012 000f 	ands.w	r0, r2, #15
 80092a4:	d00a      	beq.n	80092bc <_strtod_l+0x464>
 80092a6:	494b      	ldr	r1, [pc, #300]	; (80093d4 <_strtod_l+0x57c>)
 80092a8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80092ac:	ed91 7b00 	vldr	d7, [r1]
 80092b0:	ec49 8b16 	vmov	d6, r8, r9
 80092b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092b8:	ec59 8b17 	vmov	r8, r9, d7
 80092bc:	f032 020f 	bics.w	r2, r2, #15
 80092c0:	d04f      	beq.n	8009362 <_strtod_l+0x50a>
 80092c2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80092c6:	dd22      	ble.n	800930e <_strtod_l+0x4b6>
 80092c8:	2500      	movs	r5, #0
 80092ca:	462e      	mov	r6, r5
 80092cc:	9506      	str	r5, [sp, #24]
 80092ce:	462f      	mov	r7, r5
 80092d0:	2322      	movs	r3, #34	; 0x22
 80092d2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80093e0 <_strtod_l+0x588>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	f04f 0800 	mov.w	r8, #0
 80092dc:	9b06      	ldr	r3, [sp, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f43f adfe 	beq.w	8008ee0 <_strtod_l+0x88>
 80092e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 fe2c 	bl	800af44 <_Bfree>
 80092ec:	4639      	mov	r1, r7
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 fe28 	bl	800af44 <_Bfree>
 80092f4:	4631      	mov	r1, r6
 80092f6:	4620      	mov	r0, r4
 80092f8:	f001 fe24 	bl	800af44 <_Bfree>
 80092fc:	9906      	ldr	r1, [sp, #24]
 80092fe:	4620      	mov	r0, r4
 8009300:	f001 fe20 	bl	800af44 <_Bfree>
 8009304:	4629      	mov	r1, r5
 8009306:	4620      	mov	r0, r4
 8009308:	f001 fe1c 	bl	800af44 <_Bfree>
 800930c:	e5e8      	b.n	8008ee0 <_strtod_l+0x88>
 800930e:	2000      	movs	r0, #0
 8009310:	ec49 8b17 	vmov	d7, r8, r9
 8009314:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80093d8 <_strtod_l+0x580>
 8009318:	1112      	asrs	r2, r2, #4
 800931a:	4601      	mov	r1, r0
 800931c:	2a01      	cmp	r2, #1
 800931e:	dc23      	bgt.n	8009368 <_strtod_l+0x510>
 8009320:	b108      	cbz	r0, 8009326 <_strtod_l+0x4ce>
 8009322:	ec59 8b17 	vmov	r8, r9, d7
 8009326:	4a2c      	ldr	r2, [pc, #176]	; (80093d8 <_strtod_l+0x580>)
 8009328:	482c      	ldr	r0, [pc, #176]	; (80093dc <_strtod_l+0x584>)
 800932a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800932e:	ed92 7b00 	vldr	d7, [r2]
 8009332:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009336:	ec49 8b16 	vmov	d6, r8, r9
 800933a:	4a29      	ldr	r2, [pc, #164]	; (80093e0 <_strtod_l+0x588>)
 800933c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009340:	ee17 1a90 	vmov	r1, s15
 8009344:	400a      	ands	r2, r1
 8009346:	4282      	cmp	r2, r0
 8009348:	ec59 8b17 	vmov	r8, r9, d7
 800934c:	d8bc      	bhi.n	80092c8 <_strtod_l+0x470>
 800934e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009352:	4282      	cmp	r2, r0
 8009354:	bf86      	itte	hi
 8009356:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80093e4 <_strtod_l+0x58c>
 800935a:	f04f 38ff 	movhi.w	r8, #4294967295
 800935e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009362:	2200      	movs	r2, #0
 8009364:	9204      	str	r2, [sp, #16]
 8009366:	e078      	b.n	800945a <_strtod_l+0x602>
 8009368:	07d6      	lsls	r6, r2, #31
 800936a:	d504      	bpl.n	8009376 <_strtod_l+0x51e>
 800936c:	ed9c 6b00 	vldr	d6, [ip]
 8009370:	2001      	movs	r0, #1
 8009372:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009376:	3101      	adds	r1, #1
 8009378:	1052      	asrs	r2, r2, #1
 800937a:	f10c 0c08 	add.w	ip, ip, #8
 800937e:	e7cd      	b.n	800931c <_strtod_l+0x4c4>
 8009380:	d0ef      	beq.n	8009362 <_strtod_l+0x50a>
 8009382:	4252      	negs	r2, r2
 8009384:	f012 000f 	ands.w	r0, r2, #15
 8009388:	d00a      	beq.n	80093a0 <_strtod_l+0x548>
 800938a:	4912      	ldr	r1, [pc, #72]	; (80093d4 <_strtod_l+0x57c>)
 800938c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009390:	ed91 7b00 	vldr	d7, [r1]
 8009394:	ec49 8b16 	vmov	d6, r8, r9
 8009398:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800939c:	ec59 8b17 	vmov	r8, r9, d7
 80093a0:	1112      	asrs	r2, r2, #4
 80093a2:	d0de      	beq.n	8009362 <_strtod_l+0x50a>
 80093a4:	2a1f      	cmp	r2, #31
 80093a6:	dd1f      	ble.n	80093e8 <_strtod_l+0x590>
 80093a8:	2500      	movs	r5, #0
 80093aa:	462e      	mov	r6, r5
 80093ac:	9506      	str	r5, [sp, #24]
 80093ae:	462f      	mov	r7, r5
 80093b0:	2322      	movs	r3, #34	; 0x22
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	e78e      	b.n	80092dc <_strtod_l+0x484>
 80093be:	bf00      	nop
 80093c0:	0800d26d 	.word	0x0800d26d
 80093c4:	0800d2ac 	.word	0x0800d2ac
 80093c8:	0800d265 	.word	0x0800d265
 80093cc:	0800d2eb 	.word	0x0800d2eb
 80093d0:	0800d5b3 	.word	0x0800d5b3
 80093d4:	0800d478 	.word	0x0800d478
 80093d8:	0800d450 	.word	0x0800d450
 80093dc:	7ca00000 	.word	0x7ca00000
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	7fefffff 	.word	0x7fefffff
 80093e8:	f012 0110 	ands.w	r1, r2, #16
 80093ec:	bf18      	it	ne
 80093ee:	216a      	movne	r1, #106	; 0x6a
 80093f0:	9104      	str	r1, [sp, #16]
 80093f2:	ec49 8b17 	vmov	d7, r8, r9
 80093f6:	49be      	ldr	r1, [pc, #760]	; (80096f0 <_strtod_l+0x898>)
 80093f8:	2000      	movs	r0, #0
 80093fa:	07d6      	lsls	r6, r2, #31
 80093fc:	d504      	bpl.n	8009408 <_strtod_l+0x5b0>
 80093fe:	ed91 6b00 	vldr	d6, [r1]
 8009402:	2001      	movs	r0, #1
 8009404:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009408:	1052      	asrs	r2, r2, #1
 800940a:	f101 0108 	add.w	r1, r1, #8
 800940e:	d1f4      	bne.n	80093fa <_strtod_l+0x5a2>
 8009410:	b108      	cbz	r0, 8009416 <_strtod_l+0x5be>
 8009412:	ec59 8b17 	vmov	r8, r9, d7
 8009416:	9a04      	ldr	r2, [sp, #16]
 8009418:	b1c2      	cbz	r2, 800944c <_strtod_l+0x5f4>
 800941a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800941e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009422:	2a00      	cmp	r2, #0
 8009424:	4648      	mov	r0, r9
 8009426:	dd11      	ble.n	800944c <_strtod_l+0x5f4>
 8009428:	2a1f      	cmp	r2, #31
 800942a:	f340 812e 	ble.w	800968a <_strtod_l+0x832>
 800942e:	2a34      	cmp	r2, #52	; 0x34
 8009430:	bfde      	ittt	le
 8009432:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009436:	f04f 32ff 	movle.w	r2, #4294967295
 800943a:	fa02 f101 	lslle.w	r1, r2, r1
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	bfcc      	ite	gt
 8009444:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009448:	ea01 0900 	andle.w	r9, r1, r0
 800944c:	ec49 8b17 	vmov	d7, r8, r9
 8009450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009458:	d0a6      	beq.n	80093a8 <_strtod_l+0x550>
 800945a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800945c:	9200      	str	r2, [sp, #0]
 800945e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009460:	9a06      	ldr	r2, [sp, #24]
 8009462:	4620      	mov	r0, r4
 8009464:	f001 fdd6 	bl	800b014 <__s2b>
 8009468:	9006      	str	r0, [sp, #24]
 800946a:	2800      	cmp	r0, #0
 800946c:	f43f af2c 	beq.w	80092c8 <_strtod_l+0x470>
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	1b7d      	subs	r5, r7, r5
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfb4      	ite	lt
 8009478:	462b      	movlt	r3, r5
 800947a:	2300      	movge	r3, #0
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	9b07      	ldr	r3, [sp, #28]
 8009480:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80096d0 <_strtod_l+0x878>
 8009484:	ed9f ab94 	vldr	d10, [pc, #592]	; 80096d8 <_strtod_l+0x880>
 8009488:	ed9f bb95 	vldr	d11, [pc, #596]	; 80096e0 <_strtod_l+0x888>
 800948c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009490:	2500      	movs	r5, #0
 8009492:	930c      	str	r3, [sp, #48]	; 0x30
 8009494:	462e      	mov	r6, r5
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	4620      	mov	r0, r4
 800949a:	6859      	ldr	r1, [r3, #4]
 800949c:	f001 fd12 	bl	800aec4 <_Balloc>
 80094a0:	4607      	mov	r7, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f43f af14 	beq.w	80092d0 <_strtod_l+0x478>
 80094a8:	9b06      	ldr	r3, [sp, #24]
 80094aa:	691a      	ldr	r2, [r3, #16]
 80094ac:	3202      	adds	r2, #2
 80094ae:	f103 010c 	add.w	r1, r3, #12
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	300c      	adds	r0, #12
 80094b6:	f7fe fdbd 	bl	8008034 <memcpy>
 80094ba:	ec49 8b10 	vmov	d0, r8, r9
 80094be:	aa14      	add	r2, sp, #80	; 0x50
 80094c0:	a913      	add	r1, sp, #76	; 0x4c
 80094c2:	4620      	mov	r0, r4
 80094c4:	f002 f8ec 	bl	800b6a0 <__d2b>
 80094c8:	ec49 8b18 	vmov	d8, r8, r9
 80094cc:	9012      	str	r0, [sp, #72]	; 0x48
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f43f aefe 	beq.w	80092d0 <_strtod_l+0x478>
 80094d4:	2101      	movs	r1, #1
 80094d6:	4620      	mov	r0, r4
 80094d8:	f001 fe36 	bl	800b148 <__i2b>
 80094dc:	4606      	mov	r6, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aef6 	beq.w	80092d0 <_strtod_l+0x478>
 80094e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bfab      	itete	ge
 80094ec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80094ee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80094f0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80094f4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80094f8:	bfac      	ite	ge
 80094fa:	eb03 0b02 	addge.w	fp, r3, r2
 80094fe:	eba2 0a03 	sublt.w	sl, r2, r3
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	440b      	add	r3, r1
 8009508:	4a7a      	ldr	r2, [pc, #488]	; (80096f4 <_strtod_l+0x89c>)
 800950a:	3b01      	subs	r3, #1
 800950c:	4293      	cmp	r3, r2
 800950e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009512:	f280 80cd 	bge.w	80096b0 <_strtod_l+0x858>
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	2a1f      	cmp	r2, #31
 800951a:	eba1 0102 	sub.w	r1, r1, r2
 800951e:	f04f 0001 	mov.w	r0, #1
 8009522:	f300 80b9 	bgt.w	8009698 <_strtod_l+0x840>
 8009526:	fa00 f302 	lsl.w	r3, r0, r2
 800952a:	930b      	str	r3, [sp, #44]	; 0x2c
 800952c:	2300      	movs	r3, #0
 800952e:	930a      	str	r3, [sp, #40]	; 0x28
 8009530:	eb0b 0301 	add.w	r3, fp, r1
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	459b      	cmp	fp, r3
 8009538:	448a      	add	sl, r1
 800953a:	4492      	add	sl, r2
 800953c:	465a      	mov	r2, fp
 800953e:	bfa8      	it	ge
 8009540:	461a      	movge	r2, r3
 8009542:	4552      	cmp	r2, sl
 8009544:	bfa8      	it	ge
 8009546:	4652      	movge	r2, sl
 8009548:	2a00      	cmp	r2, #0
 800954a:	bfc2      	ittt	gt
 800954c:	1a9b      	subgt	r3, r3, r2
 800954e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009552:	ebab 0b02 	subgt.w	fp, fp, r2
 8009556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009558:	2a00      	cmp	r2, #0
 800955a:	dd18      	ble.n	800958e <_strtod_l+0x736>
 800955c:	4631      	mov	r1, r6
 800955e:	4620      	mov	r0, r4
 8009560:	930f      	str	r3, [sp, #60]	; 0x3c
 8009562:	f001 feb1 	bl	800b2c8 <__pow5mult>
 8009566:	4606      	mov	r6, r0
 8009568:	2800      	cmp	r0, #0
 800956a:	f43f aeb1 	beq.w	80092d0 <_strtod_l+0x478>
 800956e:	4601      	mov	r1, r0
 8009570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009572:	4620      	mov	r0, r4
 8009574:	f001 fdfe 	bl	800b174 <__multiply>
 8009578:	900e      	str	r0, [sp, #56]	; 0x38
 800957a:	2800      	cmp	r0, #0
 800957c:	f43f aea8 	beq.w	80092d0 <_strtod_l+0x478>
 8009580:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009582:	4620      	mov	r0, r4
 8009584:	f001 fcde 	bl	800af44 <_Bfree>
 8009588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800958a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800958c:	9212      	str	r2, [sp, #72]	; 0x48
 800958e:	2b00      	cmp	r3, #0
 8009590:	f300 8093 	bgt.w	80096ba <_strtod_l+0x862>
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd08      	ble.n	80095ac <_strtod_l+0x754>
 800959a:	4639      	mov	r1, r7
 800959c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800959e:	4620      	mov	r0, r4
 80095a0:	f001 fe92 	bl	800b2c8 <__pow5mult>
 80095a4:	4607      	mov	r7, r0
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f ae92 	beq.w	80092d0 <_strtod_l+0x478>
 80095ac:	f1ba 0f00 	cmp.w	sl, #0
 80095b0:	dd08      	ble.n	80095c4 <_strtod_l+0x76c>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4652      	mov	r2, sl
 80095b6:	4620      	mov	r0, r4
 80095b8:	f001 fee0 	bl	800b37c <__lshift>
 80095bc:	4607      	mov	r7, r0
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f ae86 	beq.w	80092d0 <_strtod_l+0x478>
 80095c4:	f1bb 0f00 	cmp.w	fp, #0
 80095c8:	dd08      	ble.n	80095dc <_strtod_l+0x784>
 80095ca:	4631      	mov	r1, r6
 80095cc:	465a      	mov	r2, fp
 80095ce:	4620      	mov	r0, r4
 80095d0:	f001 fed4 	bl	800b37c <__lshift>
 80095d4:	4606      	mov	r6, r0
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f ae7a 	beq.w	80092d0 <_strtod_l+0x478>
 80095dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80095de:	463a      	mov	r2, r7
 80095e0:	4620      	mov	r0, r4
 80095e2:	f001 ff57 	bl	800b494 <__mdiff>
 80095e6:	4605      	mov	r5, r0
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f43f ae71 	beq.w	80092d0 <_strtod_l+0x478>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80095f4:	60c3      	str	r3, [r0, #12]
 80095f6:	4631      	mov	r1, r6
 80095f8:	f001 ff30 	bl	800b45c <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	da7d      	bge.n	80096fc <_strtod_l+0x8a4>
 8009600:	ea5a 0308 	orrs.w	r3, sl, r8
 8009604:	f040 80a3 	bne.w	800974e <_strtod_l+0x8f6>
 8009608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 809e 	bne.w	800974e <_strtod_l+0x8f6>
 8009612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009616:	0d1b      	lsrs	r3, r3, #20
 8009618:	051b      	lsls	r3, r3, #20
 800961a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800961e:	f240 8096 	bls.w	800974e <_strtod_l+0x8f6>
 8009622:	696b      	ldr	r3, [r5, #20]
 8009624:	b91b      	cbnz	r3, 800962e <_strtod_l+0x7d6>
 8009626:	692b      	ldr	r3, [r5, #16]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f340 8090 	ble.w	800974e <_strtod_l+0x8f6>
 800962e:	4629      	mov	r1, r5
 8009630:	2201      	movs	r2, #1
 8009632:	4620      	mov	r0, r4
 8009634:	f001 fea2 	bl	800b37c <__lshift>
 8009638:	4631      	mov	r1, r6
 800963a:	4605      	mov	r5, r0
 800963c:	f001 ff0e 	bl	800b45c <__mcmp>
 8009640:	2800      	cmp	r0, #0
 8009642:	f340 8084 	ble.w	800974e <_strtod_l+0x8f6>
 8009646:	9904      	ldr	r1, [sp, #16]
 8009648:	4a2b      	ldr	r2, [pc, #172]	; (80096f8 <_strtod_l+0x8a0>)
 800964a:	464b      	mov	r3, r9
 800964c:	2900      	cmp	r1, #0
 800964e:	f000 809d 	beq.w	800978c <_strtod_l+0x934>
 8009652:	ea02 0109 	and.w	r1, r2, r9
 8009656:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800965a:	f300 8097 	bgt.w	800978c <_strtod_l+0x934>
 800965e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009662:	f77f aea5 	ble.w	80093b0 <_strtod_l+0x558>
 8009666:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80096e8 <_strtod_l+0x890>
 800966a:	ec49 8b16 	vmov	d6, r8, r9
 800966e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009672:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009676:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	bf08      	it	eq
 800967e:	2322      	moveq	r3, #34	; 0x22
 8009680:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009684:	bf08      	it	eq
 8009686:	6023      	streq	r3, [r4, #0]
 8009688:	e62c      	b.n	80092e4 <_strtod_l+0x48c>
 800968a:	f04f 31ff 	mov.w	r1, #4294967295
 800968e:	fa01 f202 	lsl.w	r2, r1, r2
 8009692:	ea02 0808 	and.w	r8, r2, r8
 8009696:	e6d9      	b.n	800944c <_strtod_l+0x5f4>
 8009698:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800969c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80096a0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80096a4:	33e2      	adds	r3, #226	; 0xe2
 80096a6:	fa00 f303 	lsl.w	r3, r0, r3
 80096aa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80096ae:	e73f      	b.n	8009530 <_strtod_l+0x6d8>
 80096b0:	2200      	movs	r2, #0
 80096b2:	2301      	movs	r3, #1
 80096b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096b8:	e73a      	b.n	8009530 <_strtod_l+0x6d8>
 80096ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80096bc:	461a      	mov	r2, r3
 80096be:	4620      	mov	r0, r4
 80096c0:	f001 fe5c 	bl	800b37c <__lshift>
 80096c4:	9012      	str	r0, [sp, #72]	; 0x48
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f47f af64 	bne.w	8009594 <_strtod_l+0x73c>
 80096cc:	e600      	b.n	80092d0 <_strtod_l+0x478>
 80096ce:	bf00      	nop
 80096d0:	94a03595 	.word	0x94a03595
 80096d4:	3fcfffff 	.word	0x3fcfffff
 80096d8:	94a03595 	.word	0x94a03595
 80096dc:	3fdfffff 	.word	0x3fdfffff
 80096e0:	35afe535 	.word	0x35afe535
 80096e4:	3fe00000 	.word	0x3fe00000
 80096e8:	00000000 	.word	0x00000000
 80096ec:	39500000 	.word	0x39500000
 80096f0:	0800d2c0 	.word	0x0800d2c0
 80096f4:	fffffc02 	.word	0xfffffc02
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	46cb      	mov	fp, r9
 80096fe:	d15f      	bne.n	80097c0 <_strtod_l+0x968>
 8009700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009704:	f1ba 0f00 	cmp.w	sl, #0
 8009708:	d02a      	beq.n	8009760 <_strtod_l+0x908>
 800970a:	4aa7      	ldr	r2, [pc, #668]	; (80099a8 <_strtod_l+0xb50>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d12b      	bne.n	8009768 <_strtod_l+0x910>
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	4642      	mov	r2, r8
 8009714:	b1fb      	cbz	r3, 8009756 <_strtod_l+0x8fe>
 8009716:	4ba5      	ldr	r3, [pc, #660]	; (80099ac <_strtod_l+0xb54>)
 8009718:	ea09 0303 	and.w	r3, r9, r3
 800971c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009720:	f04f 31ff 	mov.w	r1, #4294967295
 8009724:	d81a      	bhi.n	800975c <_strtod_l+0x904>
 8009726:	0d1b      	lsrs	r3, r3, #20
 8009728:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800972c:	fa01 f303 	lsl.w	r3, r1, r3
 8009730:	429a      	cmp	r2, r3
 8009732:	d119      	bne.n	8009768 <_strtod_l+0x910>
 8009734:	4b9e      	ldr	r3, [pc, #632]	; (80099b0 <_strtod_l+0xb58>)
 8009736:	459b      	cmp	fp, r3
 8009738:	d102      	bne.n	8009740 <_strtod_l+0x8e8>
 800973a:	3201      	adds	r2, #1
 800973c:	f43f adc8 	beq.w	80092d0 <_strtod_l+0x478>
 8009740:	4b9a      	ldr	r3, [pc, #616]	; (80099ac <_strtod_l+0xb54>)
 8009742:	ea0b 0303 	and.w	r3, fp, r3
 8009746:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d188      	bne.n	8009666 <_strtod_l+0x80e>
 8009754:	e5c6      	b.n	80092e4 <_strtod_l+0x48c>
 8009756:	f04f 33ff 	mov.w	r3, #4294967295
 800975a:	e7e9      	b.n	8009730 <_strtod_l+0x8d8>
 800975c:	460b      	mov	r3, r1
 800975e:	e7e7      	b.n	8009730 <_strtod_l+0x8d8>
 8009760:	ea53 0308 	orrs.w	r3, r3, r8
 8009764:	f43f af6f 	beq.w	8009646 <_strtod_l+0x7ee>
 8009768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976a:	b1cb      	cbz	r3, 80097a0 <_strtod_l+0x948>
 800976c:	ea13 0f0b 	tst.w	r3, fp
 8009770:	d0ed      	beq.n	800974e <_strtod_l+0x8f6>
 8009772:	9a04      	ldr	r2, [sp, #16]
 8009774:	4640      	mov	r0, r8
 8009776:	4649      	mov	r1, r9
 8009778:	f1ba 0f00 	cmp.w	sl, #0
 800977c:	d014      	beq.n	80097a8 <_strtod_l+0x950>
 800977e:	f7ff fb4e 	bl	8008e1e <sulp>
 8009782:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009786:	ec59 8b17 	vmov	r8, r9, d7
 800978a:	e7e0      	b.n	800974e <_strtod_l+0x8f6>
 800978c:	4013      	ands	r3, r2
 800978e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009792:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009796:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800979a:	f04f 38ff 	mov.w	r8, #4294967295
 800979e:	e7d6      	b.n	800974e <_strtod_l+0x8f6>
 80097a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a2:	ea13 0f08 	tst.w	r3, r8
 80097a6:	e7e3      	b.n	8009770 <_strtod_l+0x918>
 80097a8:	f7ff fb39 	bl	8008e1e <sulp>
 80097ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 80097b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	ec59 8b10 	vmov	r8, r9, d0
 80097bc:	d1c7      	bne.n	800974e <_strtod_l+0x8f6>
 80097be:	e5f7      	b.n	80093b0 <_strtod_l+0x558>
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	f001 ffc8 	bl	800b758 <__ratio>
 80097c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80097cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d4:	d865      	bhi.n	80098a2 <_strtod_l+0xa4a>
 80097d6:	f1ba 0f00 	cmp.w	sl, #0
 80097da:	d042      	beq.n	8009862 <_strtod_l+0xa0a>
 80097dc:	4b75      	ldr	r3, [pc, #468]	; (80099b4 <_strtod_l+0xb5c>)
 80097de:	2200      	movs	r2, #0
 80097e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80097e4:	4871      	ldr	r0, [pc, #452]	; (80099ac <_strtod_l+0xb54>)
 80097e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80099c0 <_strtod_l+0xb68>
 80097ea:	ea0b 0100 	and.w	r1, fp, r0
 80097ee:	4561      	cmp	r1, ip
 80097f0:	f040 808e 	bne.w	8009910 <_strtod_l+0xab8>
 80097f4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80097f8:	ec49 8b10 	vmov	d0, r8, r9
 80097fc:	ec43 2b1c 	vmov	d12, r2, r3
 8009800:	910a      	str	r1, [sp, #40]	; 0x28
 8009802:	f001 fed1 	bl	800b5a8 <__ulp>
 8009806:	ec49 8b1e 	vmov	d14, r8, r9
 800980a:	4868      	ldr	r0, [pc, #416]	; (80099ac <_strtod_l+0xb54>)
 800980c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009810:	ee1e 3a90 	vmov	r3, s29
 8009814:	4a68      	ldr	r2, [pc, #416]	; (80099b8 <_strtod_l+0xb60>)
 8009816:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009818:	4018      	ands	r0, r3
 800981a:	4290      	cmp	r0, r2
 800981c:	ec59 8b1e 	vmov	r8, r9, d14
 8009820:	d94e      	bls.n	80098c0 <_strtod_l+0xa68>
 8009822:	ee18 3a90 	vmov	r3, s17
 8009826:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800982a:	4293      	cmp	r3, r2
 800982c:	d104      	bne.n	8009838 <_strtod_l+0x9e0>
 800982e:	ee18 3a10 	vmov	r3, s16
 8009832:	3301      	adds	r3, #1
 8009834:	f43f ad4c 	beq.w	80092d0 <_strtod_l+0x478>
 8009838:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80099b0 <_strtod_l+0xb58>
 800983c:	f04f 38ff 	mov.w	r8, #4294967295
 8009840:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009842:	4620      	mov	r0, r4
 8009844:	f001 fb7e 	bl	800af44 <_Bfree>
 8009848:	4639      	mov	r1, r7
 800984a:	4620      	mov	r0, r4
 800984c:	f001 fb7a 	bl	800af44 <_Bfree>
 8009850:	4631      	mov	r1, r6
 8009852:	4620      	mov	r0, r4
 8009854:	f001 fb76 	bl	800af44 <_Bfree>
 8009858:	4629      	mov	r1, r5
 800985a:	4620      	mov	r0, r4
 800985c:	f001 fb72 	bl	800af44 <_Bfree>
 8009860:	e619      	b.n	8009496 <_strtod_l+0x63e>
 8009862:	f1b8 0f00 	cmp.w	r8, #0
 8009866:	d112      	bne.n	800988e <_strtod_l+0xa36>
 8009868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800986c:	b9b3      	cbnz	r3, 800989c <_strtod_l+0xa44>
 800986e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009872:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800987e:	bf58      	it	pl
 8009880:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009884:	eeb1 7b4d 	vneg.f64	d7, d13
 8009888:	ec53 2b17 	vmov	r2, r3, d7
 800988c:	e7aa      	b.n	80097e4 <_strtod_l+0x98c>
 800988e:	f1b8 0f01 	cmp.w	r8, #1
 8009892:	d103      	bne.n	800989c <_strtod_l+0xa44>
 8009894:	f1b9 0f00 	cmp.w	r9, #0
 8009898:	f43f ad8a 	beq.w	80093b0 <_strtod_l+0x558>
 800989c:	4b47      	ldr	r3, [pc, #284]	; (80099bc <_strtod_l+0xb64>)
 800989e:	2200      	movs	r2, #0
 80098a0:	e79e      	b.n	80097e0 <_strtod_l+0x988>
 80098a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80098a6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80098aa:	f1ba 0f00 	cmp.w	sl, #0
 80098ae:	d104      	bne.n	80098ba <_strtod_l+0xa62>
 80098b0:	eeb1 7b4d 	vneg.f64	d7, d13
 80098b4:	ec53 2b17 	vmov	r2, r3, d7
 80098b8:	e794      	b.n	80097e4 <_strtod_l+0x98c>
 80098ba:	eeb0 7b4d 	vmov.f64	d7, d13
 80098be:	e7f9      	b.n	80098b4 <_strtod_l+0xa5c>
 80098c0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1ba      	bne.n	8009840 <_strtod_l+0x9e8>
 80098ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098ce:	0d1b      	lsrs	r3, r3, #20
 80098d0:	051b      	lsls	r3, r3, #20
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d1b4      	bne.n	8009840 <_strtod_l+0x9e8>
 80098d6:	ec51 0b1d 	vmov	r0, r1, d13
 80098da:	f7f6 fedd 	bl	8000698 <__aeabi_d2lz>
 80098de:	f7f6 fe95 	bl	800060c <__aeabi_l2d>
 80098e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098e6:	ec41 0b17 	vmov	d7, r0, r1
 80098ea:	ea43 0308 	orr.w	r3, r3, r8
 80098ee:	ea53 030a 	orrs.w	r3, r3, sl
 80098f2:	ee3d db47 	vsub.f64	d13, d13, d7
 80098f6:	d03c      	beq.n	8009972 <_strtod_l+0xb1a>
 80098f8:	eeb4 dbca 	vcmpe.f64	d13, d10
 80098fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009900:	f53f acf0 	bmi.w	80092e4 <_strtod_l+0x48c>
 8009904:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	dd98      	ble.n	8009840 <_strtod_l+0x9e8>
 800990e:	e4e9      	b.n	80092e4 <_strtod_l+0x48c>
 8009910:	9804      	ldr	r0, [sp, #16]
 8009912:	b1f0      	cbz	r0, 8009952 <_strtod_l+0xafa>
 8009914:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009918:	d81b      	bhi.n	8009952 <_strtod_l+0xafa>
 800991a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80099a0 <_strtod_l+0xb48>
 800991e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009926:	d811      	bhi.n	800994c <_strtod_l+0xaf4>
 8009928:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800992c:	ee1d 3a10 	vmov	r3, s26
 8009930:	2b01      	cmp	r3, #1
 8009932:	bf38      	it	cc
 8009934:	2301      	movcc	r3, #1
 8009936:	ee0d 3a10 	vmov	s26, r3
 800993a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	d113      	bne.n	800996c <_strtod_l+0xb14>
 8009944:	eeb1 7b4d 	vneg.f64	d7, d13
 8009948:	ec53 2b17 	vmov	r2, r3, d7
 800994c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009950:	1a43      	subs	r3, r0, r1
 8009952:	eeb0 0b48 	vmov.f64	d0, d8
 8009956:	ec43 2b1c 	vmov	d12, r2, r3
 800995a:	910a      	str	r1, [sp, #40]	; 0x28
 800995c:	f001 fe24 	bl	800b5a8 <__ulp>
 8009960:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009962:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009966:	ec59 8b18 	vmov	r8, r9, d8
 800996a:	e7ab      	b.n	80098c4 <_strtod_l+0xa6c>
 800996c:	eeb0 7b4d 	vmov.f64	d7, d13
 8009970:	e7ea      	b.n	8009948 <_strtod_l+0xaf0>
 8009972:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997a:	f57f af61 	bpl.w	8009840 <_strtod_l+0x9e8>
 800997e:	e4b1      	b.n	80092e4 <_strtod_l+0x48c>
 8009980:	2300      	movs	r3, #0
 8009982:	9308      	str	r3, [sp, #32]
 8009984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	f7ff baad 	b.w	8008ee8 <_strtod_l+0x90>
 800998e:	2a65      	cmp	r2, #101	; 0x65
 8009990:	f43f ab9f 	beq.w	80090d2 <_strtod_l+0x27a>
 8009994:	2a45      	cmp	r2, #69	; 0x45
 8009996:	f43f ab9c 	beq.w	80090d2 <_strtod_l+0x27a>
 800999a:	2101      	movs	r1, #1
 800999c:	f7ff bbd4 	b.w	8009148 <_strtod_l+0x2f0>
 80099a0:	ffc00000 	.word	0xffc00000
 80099a4:	41dfffff 	.word	0x41dfffff
 80099a8:	000fffff 	.word	0x000fffff
 80099ac:	7ff00000 	.word	0x7ff00000
 80099b0:	7fefffff 	.word	0x7fefffff
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	7c9fffff 	.word	0x7c9fffff
 80099bc:	bff00000 	.word	0xbff00000
 80099c0:	7fe00000 	.word	0x7fe00000

080099c4 <_strtod_r>:
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <_strtod_r+0x8>)
 80099c6:	f7ff ba47 	b.w	8008e58 <_strtod_l>
 80099ca:	bf00      	nop
 80099cc:	200000c0 	.word	0x200000c0

080099d0 <_strtol_l.constprop.0>:
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d6:	d001      	beq.n	80099dc <_strtol_l.constprop.0+0xc>
 80099d8:	2b24      	cmp	r3, #36	; 0x24
 80099da:	d906      	bls.n	80099ea <_strtol_l.constprop.0+0x1a>
 80099dc:	f7fe fb00 	bl	8007fe0 <__errno>
 80099e0:	2316      	movs	r3, #22
 80099e2:	6003      	str	r3, [r0, #0]
 80099e4:	2000      	movs	r0, #0
 80099e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009ad0 <_strtol_l.constprop.0+0x100>
 80099ee:	460d      	mov	r5, r1
 80099f0:	462e      	mov	r6, r5
 80099f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80099fa:	f017 0708 	ands.w	r7, r7, #8
 80099fe:	d1f7      	bne.n	80099f0 <_strtol_l.constprop.0+0x20>
 8009a00:	2c2d      	cmp	r4, #45	; 0x2d
 8009a02:	d132      	bne.n	8009a6a <_strtol_l.constprop.0+0x9a>
 8009a04:	782c      	ldrb	r4, [r5, #0]
 8009a06:	2701      	movs	r7, #1
 8009a08:	1cb5      	adds	r5, r6, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d05b      	beq.n	8009ac6 <_strtol_l.constprop.0+0xf6>
 8009a0e:	2b10      	cmp	r3, #16
 8009a10:	d109      	bne.n	8009a26 <_strtol_l.constprop.0+0x56>
 8009a12:	2c30      	cmp	r4, #48	; 0x30
 8009a14:	d107      	bne.n	8009a26 <_strtol_l.constprop.0+0x56>
 8009a16:	782c      	ldrb	r4, [r5, #0]
 8009a18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a1c:	2c58      	cmp	r4, #88	; 0x58
 8009a1e:	d14d      	bne.n	8009abc <_strtol_l.constprop.0+0xec>
 8009a20:	786c      	ldrb	r4, [r5, #1]
 8009a22:	2310      	movs	r3, #16
 8009a24:	3502      	adds	r5, #2
 8009a26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a2e:	f04f 0c00 	mov.w	ip, #0
 8009a32:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a36:	4666      	mov	r6, ip
 8009a38:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009a40:	f1be 0f09 	cmp.w	lr, #9
 8009a44:	d816      	bhi.n	8009a74 <_strtol_l.constprop.0+0xa4>
 8009a46:	4674      	mov	r4, lr
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	dd24      	ble.n	8009a96 <_strtol_l.constprop.0+0xc6>
 8009a4c:	f1bc 0f00 	cmp.w	ip, #0
 8009a50:	db1e      	blt.n	8009a90 <_strtol_l.constprop.0+0xc0>
 8009a52:	45b1      	cmp	r9, r6
 8009a54:	d31c      	bcc.n	8009a90 <_strtol_l.constprop.0+0xc0>
 8009a56:	d101      	bne.n	8009a5c <_strtol_l.constprop.0+0x8c>
 8009a58:	45a2      	cmp	sl, r4
 8009a5a:	db19      	blt.n	8009a90 <_strtol_l.constprop.0+0xc0>
 8009a5c:	fb06 4603 	mla	r6, r6, r3, r4
 8009a60:	f04f 0c01 	mov.w	ip, #1
 8009a64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a68:	e7e8      	b.n	8009a3c <_strtol_l.constprop.0+0x6c>
 8009a6a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a6c:	bf04      	itt	eq
 8009a6e:	782c      	ldrbeq	r4, [r5, #0]
 8009a70:	1cb5      	addeq	r5, r6, #2
 8009a72:	e7ca      	b.n	8009a0a <_strtol_l.constprop.0+0x3a>
 8009a74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009a78:	f1be 0f19 	cmp.w	lr, #25
 8009a7c:	d801      	bhi.n	8009a82 <_strtol_l.constprop.0+0xb2>
 8009a7e:	3c37      	subs	r4, #55	; 0x37
 8009a80:	e7e2      	b.n	8009a48 <_strtol_l.constprop.0+0x78>
 8009a82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009a86:	f1be 0f19 	cmp.w	lr, #25
 8009a8a:	d804      	bhi.n	8009a96 <_strtol_l.constprop.0+0xc6>
 8009a8c:	3c57      	subs	r4, #87	; 0x57
 8009a8e:	e7db      	b.n	8009a48 <_strtol_l.constprop.0+0x78>
 8009a90:	f04f 3cff 	mov.w	ip, #4294967295
 8009a94:	e7e6      	b.n	8009a64 <_strtol_l.constprop.0+0x94>
 8009a96:	f1bc 0f00 	cmp.w	ip, #0
 8009a9a:	da05      	bge.n	8009aa8 <_strtol_l.constprop.0+0xd8>
 8009a9c:	2322      	movs	r3, #34	; 0x22
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	4646      	mov	r6, r8
 8009aa2:	b942      	cbnz	r2, 8009ab6 <_strtol_l.constprop.0+0xe6>
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	e79e      	b.n	80099e6 <_strtol_l.constprop.0+0x16>
 8009aa8:	b107      	cbz	r7, 8009aac <_strtol_l.constprop.0+0xdc>
 8009aaa:	4276      	negs	r6, r6
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	d0f9      	beq.n	8009aa4 <_strtol_l.constprop.0+0xd4>
 8009ab0:	f1bc 0f00 	cmp.w	ip, #0
 8009ab4:	d000      	beq.n	8009ab8 <_strtol_l.constprop.0+0xe8>
 8009ab6:	1e69      	subs	r1, r5, #1
 8009ab8:	6011      	str	r1, [r2, #0]
 8009aba:	e7f3      	b.n	8009aa4 <_strtol_l.constprop.0+0xd4>
 8009abc:	2430      	movs	r4, #48	; 0x30
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1b1      	bne.n	8009a26 <_strtol_l.constprop.0+0x56>
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	e7af      	b.n	8009a26 <_strtol_l.constprop.0+0x56>
 8009ac6:	2c30      	cmp	r4, #48	; 0x30
 8009ac8:	d0a5      	beq.n	8009a16 <_strtol_l.constprop.0+0x46>
 8009aca:	230a      	movs	r3, #10
 8009acc:	e7ab      	b.n	8009a26 <_strtol_l.constprop.0+0x56>
 8009ace:	bf00      	nop
 8009ad0:	0800d159 	.word	0x0800d159

08009ad4 <_strtol_r>:
 8009ad4:	f7ff bf7c 	b.w	80099d0 <_strtol_l.constprop.0>

08009ad8 <_vsniprintf_r>:
 8009ad8:	b530      	push	{r4, r5, lr}
 8009ada:	4614      	mov	r4, r2
 8009adc:	2c00      	cmp	r4, #0
 8009ade:	b09b      	sub	sp, #108	; 0x6c
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	da05      	bge.n	8009af2 <_vsniprintf_r+0x1a>
 8009ae6:	238b      	movs	r3, #139	; 0x8b
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	f04f 30ff 	mov.w	r0, #4294967295
 8009aee:	b01b      	add	sp, #108	; 0x6c
 8009af0:	bd30      	pop	{r4, r5, pc}
 8009af2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009af6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009afa:	bf14      	ite	ne
 8009afc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b00:	4623      	moveq	r3, r4
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b0a:	9100      	str	r1, [sp, #0]
 8009b0c:	9104      	str	r1, [sp, #16]
 8009b0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b12:	4669      	mov	r1, sp
 8009b14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b16:	f001 ffe5 	bl	800bae4 <_svfiprintf_r>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	bfbc      	itt	lt
 8009b1e:	238b      	movlt	r3, #139	; 0x8b
 8009b20:	602b      	strlt	r3, [r5, #0]
 8009b22:	2c00      	cmp	r4, #0
 8009b24:	d0e3      	beq.n	8009aee <_vsniprintf_r+0x16>
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	e7df      	b.n	8009aee <_vsniprintf_r+0x16>
	...

08009b30 <vsniprintf>:
 8009b30:	b507      	push	{r0, r1, r2, lr}
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4613      	mov	r3, r2
 8009b36:	460a      	mov	r2, r1
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4803      	ldr	r0, [pc, #12]	; (8009b48 <vsniprintf+0x18>)
 8009b3c:	6800      	ldr	r0, [r0, #0]
 8009b3e:	f7ff ffcb 	bl	8009ad8 <_vsniprintf_r>
 8009b42:	b003      	add	sp, #12
 8009b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b48:	20000058 	.word	0x20000058

08009b4c <_write_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	; (8009b6c <_write_r+0x20>)
 8009b50:	4604      	mov	r4, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	4611      	mov	r1, r2
 8009b56:	2200      	movs	r2, #0
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f7f8 ffd9 	bl	8002b12 <_write>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_write_r+0x1e>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_write_r+0x1e>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200008dc 	.word	0x200008dc

08009b70 <_close_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	; (8009b8c <_close_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f8 ffe5 	bl	8002b4a <_close>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_close_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_close_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	200008dc 	.word	0x200008dc

08009b90 <quorem>:
 8009b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	6903      	ldr	r3, [r0, #16]
 8009b96:	690c      	ldr	r4, [r1, #16]
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	4607      	mov	r7, r0
 8009b9c:	f2c0 8081 	blt.w	8009ca2 <quorem+0x112>
 8009ba0:	3c01      	subs	r4, #1
 8009ba2:	f101 0814 	add.w	r8, r1, #20
 8009ba6:	f100 0514 	add.w	r5, r0, #20
 8009baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bc8:	d331      	bcc.n	8009c2e <quorem+0x9e>
 8009bca:	f04f 0e00 	mov.w	lr, #0
 8009bce:	4640      	mov	r0, r8
 8009bd0:	46ac      	mov	ip, r5
 8009bd2:	46f2      	mov	sl, lr
 8009bd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bd8:	b293      	uxth	r3, r2
 8009bda:	fb06 e303 	mla	r3, r6, r3, lr
 8009bde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ebaa 0303 	sub.w	r3, sl, r3
 8009be8:	f8dc a000 	ldr.w	sl, [ip]
 8009bec:	0c12      	lsrs	r2, r2, #16
 8009bee:	fa13 f38a 	uxtah	r3, r3, sl
 8009bf2:	fb06 e202 	mla	r2, r6, r2, lr
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bfe:	b292      	uxth	r2, r2
 8009c00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c08:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c0c:	4581      	cmp	r9, r0
 8009c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c12:	f84c 3b04 	str.w	r3, [ip], #4
 8009c16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c1a:	d2db      	bcs.n	8009bd4 <quorem+0x44>
 8009c1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c20:	b92b      	cbnz	r3, 8009c2e <quorem+0x9e>
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	3b04      	subs	r3, #4
 8009c26:	429d      	cmp	r5, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	d32e      	bcc.n	8009c8a <quorem+0xfa>
 8009c2c:	613c      	str	r4, [r7, #16]
 8009c2e:	4638      	mov	r0, r7
 8009c30:	f001 fc14 	bl	800b45c <__mcmp>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	db24      	blt.n	8009c82 <quorem+0xf2>
 8009c38:	3601      	adds	r6, #1
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	f04f 0c00 	mov.w	ip, #0
 8009c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c44:	f8d0 e000 	ldr.w	lr, [r0]
 8009c48:	b293      	uxth	r3, r2
 8009c4a:	ebac 0303 	sub.w	r3, ip, r3
 8009c4e:	0c12      	lsrs	r2, r2, #16
 8009c50:	fa13 f38e 	uxtah	r3, r3, lr
 8009c54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c62:	45c1      	cmp	r9, r8
 8009c64:	f840 3b04 	str.w	r3, [r0], #4
 8009c68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c6c:	d2e8      	bcs.n	8009c40 <quorem+0xb0>
 8009c6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c76:	b922      	cbnz	r2, 8009c82 <quorem+0xf2>
 8009c78:	3b04      	subs	r3, #4
 8009c7a:	429d      	cmp	r5, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	d30a      	bcc.n	8009c96 <quorem+0x106>
 8009c80:	613c      	str	r4, [r7, #16]
 8009c82:	4630      	mov	r0, r6
 8009c84:	b003      	add	sp, #12
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	d1cc      	bne.n	8009c2c <quorem+0x9c>
 8009c92:	3c01      	subs	r4, #1
 8009c94:	e7c7      	b.n	8009c26 <quorem+0x96>
 8009c96:	6812      	ldr	r2, [r2, #0]
 8009c98:	3b04      	subs	r3, #4
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	d1f0      	bne.n	8009c80 <quorem+0xf0>
 8009c9e:	3c01      	subs	r4, #1
 8009ca0:	e7eb      	b.n	8009c7a <quorem+0xea>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e7ee      	b.n	8009c84 <quorem+0xf4>
	...

08009ca8 <_dtoa_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	ed2d 8b02 	vpush	{d8}
 8009cb0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009cb2:	b091      	sub	sp, #68	; 0x44
 8009cb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cb8:	ec59 8b10 	vmov	r8, r9, d0
 8009cbc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009cbe:	9106      	str	r1, [sp, #24]
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	9208      	str	r2, [sp, #32]
 8009cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc6:	b975      	cbnz	r5, 8009ce6 <_dtoa_r+0x3e>
 8009cc8:	2010      	movs	r0, #16
 8009cca:	f001 f8e1 	bl	800ae90 <malloc>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6270      	str	r0, [r6, #36]	; 0x24
 8009cd2:	b920      	cbnz	r0, 8009cde <_dtoa_r+0x36>
 8009cd4:	4baa      	ldr	r3, [pc, #680]	; (8009f80 <_dtoa_r+0x2d8>)
 8009cd6:	21ea      	movs	r1, #234	; 0xea
 8009cd8:	48aa      	ldr	r0, [pc, #680]	; (8009f84 <_dtoa_r+0x2dc>)
 8009cda:	f002 fc59 	bl	800c590 <__assert_func>
 8009cde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ce2:	6005      	str	r5, [r0, #0]
 8009ce4:	60c5      	str	r5, [r0, #12]
 8009ce6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ce8:	6819      	ldr	r1, [r3, #0]
 8009cea:	b151      	cbz	r1, 8009d02 <_dtoa_r+0x5a>
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	604a      	str	r2, [r1, #4]
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	4093      	lsls	r3, r2
 8009cf4:	608b      	str	r3, [r1, #8]
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f001 f924 	bl	800af44 <_Bfree>
 8009cfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	f1b9 0300 	subs.w	r3, r9, #0
 8009d06:	bfbb      	ittet	lt
 8009d08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d0c:	9303      	strlt	r3, [sp, #12]
 8009d0e:	2300      	movge	r3, #0
 8009d10:	2201      	movlt	r2, #1
 8009d12:	bfac      	ite	ge
 8009d14:	6023      	strge	r3, [r4, #0]
 8009d16:	6022      	strlt	r2, [r4, #0]
 8009d18:	4b9b      	ldr	r3, [pc, #620]	; (8009f88 <_dtoa_r+0x2e0>)
 8009d1a:	9c03      	ldr	r4, [sp, #12]
 8009d1c:	43a3      	bics	r3, r4
 8009d1e:	d11c      	bne.n	8009d5a <_dtoa_r+0xb2>
 8009d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d22:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009d2c:	ea53 0308 	orrs.w	r3, r3, r8
 8009d30:	f000 84fd 	beq.w	800a72e <_dtoa_r+0xa86>
 8009d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d36:	b963      	cbnz	r3, 8009d52 <_dtoa_r+0xaa>
 8009d38:	4b94      	ldr	r3, [pc, #592]	; (8009f8c <_dtoa_r+0x2e4>)
 8009d3a:	e01f      	b.n	8009d7c <_dtoa_r+0xd4>
 8009d3c:	4b94      	ldr	r3, [pc, #592]	; (8009f90 <_dtoa_r+0x2e8>)
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	3308      	adds	r3, #8
 8009d42:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	9801      	ldr	r0, [sp, #4]
 8009d48:	b011      	add	sp, #68	; 0x44
 8009d4a:	ecbd 8b02 	vpop	{d8}
 8009d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d52:	4b8e      	ldr	r3, [pc, #568]	; (8009f8c <_dtoa_r+0x2e4>)
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	3303      	adds	r3, #3
 8009d58:	e7f3      	b.n	8009d42 <_dtoa_r+0x9a>
 8009d5a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009d5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d66:	d10b      	bne.n	8009d80 <_dtoa_r+0xd8>
 8009d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 84d9 	beq.w	800a728 <_dtoa_r+0xa80>
 8009d76:	4887      	ldr	r0, [pc, #540]	; (8009f94 <_dtoa_r+0x2ec>)
 8009d78:	6018      	str	r0, [r3, #0]
 8009d7a:	1e43      	subs	r3, r0, #1
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	e7e2      	b.n	8009d46 <_dtoa_r+0x9e>
 8009d80:	a90f      	add	r1, sp, #60	; 0x3c
 8009d82:	aa0e      	add	r2, sp, #56	; 0x38
 8009d84:	4630      	mov	r0, r6
 8009d86:	eeb0 0b48 	vmov.f64	d0, d8
 8009d8a:	f001 fc89 	bl	800b6a0 <__d2b>
 8009d8e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009d92:	4605      	mov	r5, r0
 8009d94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d96:	2900      	cmp	r1, #0
 8009d98:	d046      	beq.n	8009e28 <_dtoa_r+0x180>
 8009d9a:	ee18 4a90 	vmov	r4, s17
 8009d9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009da2:	ec53 2b18 	vmov	r2, r3, d8
 8009da6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009db2:	2400      	movs	r4, #0
 8009db4:	ec43 2b16 	vmov	d6, r2, r3
 8009db8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009dbc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009f68 <_dtoa_r+0x2c0>
 8009dc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009dc4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009f70 <_dtoa_r+0x2c8>
 8009dc8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009dcc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009f78 <_dtoa_r+0x2d0>
 8009dd0:	ee07 1a90 	vmov	s15, r1
 8009dd4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009dd8:	eeb0 7b46 	vmov.f64	d7, d6
 8009ddc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009de0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009de4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dec:	ee16 ba90 	vmov	fp, s13
 8009df0:	940a      	str	r4, [sp, #40]	; 0x28
 8009df2:	d508      	bpl.n	8009e06 <_dtoa_r+0x15e>
 8009df4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009df8:	eeb4 6b47 	vcmp.f64	d6, d7
 8009dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e00:	bf18      	it	ne
 8009e02:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009e06:	f1bb 0f16 	cmp.w	fp, #22
 8009e0a:	d82f      	bhi.n	8009e6c <_dtoa_r+0x1c4>
 8009e0c:	4b62      	ldr	r3, [pc, #392]	; (8009f98 <_dtoa_r+0x2f0>)
 8009e0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e12:	ed93 7b00 	vldr	d7, [r3]
 8009e16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1e:	d501      	bpl.n	8009e24 <_dtoa_r+0x17c>
 8009e20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e24:	2300      	movs	r3, #0
 8009e26:	e022      	b.n	8009e6e <_dtoa_r+0x1c6>
 8009e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e2a:	4401      	add	r1, r0
 8009e2c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	bfc1      	itttt	gt
 8009e34:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e38:	fa04 f303 	lslgt.w	r3, r4, r3
 8009e3c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009e40:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009e44:	bfd6      	itet	le
 8009e46:	f1c3 0320 	rsble	r3, r3, #32
 8009e4a:	ea43 0808 	orrgt.w	r8, r3, r8
 8009e4e:	fa08 f803 	lslle.w	r8, r8, r3
 8009e52:	ee07 8a90 	vmov	s15, r8
 8009e56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	ee17 4a90 	vmov	r4, s15
 8009e60:	ec53 2b17 	vmov	r2, r3, d7
 8009e64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009e68:	2401      	movs	r4, #1
 8009e6a:	e7a3      	b.n	8009db4 <_dtoa_r+0x10c>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e70:	1a43      	subs	r3, r0, r1
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	bf45      	ittet	mi
 8009e76:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e7a:	9304      	strmi	r3, [sp, #16]
 8009e7c:	2300      	movpl	r3, #0
 8009e7e:	2300      	movmi	r3, #0
 8009e80:	9205      	str	r2, [sp, #20]
 8009e82:	bf54      	ite	pl
 8009e84:	9304      	strpl	r3, [sp, #16]
 8009e86:	9305      	strmi	r3, [sp, #20]
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	db18      	blt.n	8009ec0 <_dtoa_r+0x218>
 8009e8e:	9b05      	ldr	r3, [sp, #20]
 8009e90:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009e94:	445b      	add	r3, fp
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9a06      	ldr	r2, [sp, #24]
 8009e9c:	2a09      	cmp	r2, #9
 8009e9e:	d849      	bhi.n	8009f34 <_dtoa_r+0x28c>
 8009ea0:	2a05      	cmp	r2, #5
 8009ea2:	bfc4      	itt	gt
 8009ea4:	3a04      	subgt	r2, #4
 8009ea6:	9206      	strgt	r2, [sp, #24]
 8009ea8:	9a06      	ldr	r2, [sp, #24]
 8009eaa:	f1a2 0202 	sub.w	r2, r2, #2
 8009eae:	bfcc      	ite	gt
 8009eb0:	2400      	movgt	r4, #0
 8009eb2:	2401      	movle	r4, #1
 8009eb4:	2a03      	cmp	r2, #3
 8009eb6:	d848      	bhi.n	8009f4a <_dtoa_r+0x2a2>
 8009eb8:	e8df f002 	tbb	[pc, r2]
 8009ebc:	3a2c2e0b 	.word	0x3a2c2e0b
 8009ec0:	9b04      	ldr	r3, [sp, #16]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	eba3 030b 	sub.w	r3, r3, fp
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	9209      	str	r2, [sp, #36]	; 0x24
 8009ecc:	f1cb 0300 	rsb	r3, fp, #0
 8009ed0:	e7e3      	b.n	8009e9a <_dtoa_r+0x1f2>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	9207      	str	r2, [sp, #28]
 8009ed6:	9a08      	ldr	r2, [sp, #32]
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	dc39      	bgt.n	8009f50 <_dtoa_r+0x2a8>
 8009edc:	f04f 0a01 	mov.w	sl, #1
 8009ee0:	46d1      	mov	r9, sl
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	f8cd a020 	str.w	sl, [sp, #32]
 8009ee8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009eea:	2100      	movs	r1, #0
 8009eec:	6079      	str	r1, [r7, #4]
 8009eee:	2004      	movs	r0, #4
 8009ef0:	f100 0c14 	add.w	ip, r0, #20
 8009ef4:	4594      	cmp	ip, r2
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	d92f      	bls.n	8009f5a <_dtoa_r+0x2b2>
 8009efa:	4630      	mov	r0, r6
 8009efc:	930d      	str	r3, [sp, #52]	; 0x34
 8009efe:	f000 ffe1 	bl	800aec4 <_Balloc>
 8009f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f04:	9001      	str	r0, [sp, #4]
 8009f06:	4602      	mov	r2, r0
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d149      	bne.n	8009fa0 <_dtoa_r+0x2f8>
 8009f0c:	4b23      	ldr	r3, [pc, #140]	; (8009f9c <_dtoa_r+0x2f4>)
 8009f0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f12:	e6e1      	b.n	8009cd8 <_dtoa_r+0x30>
 8009f14:	2201      	movs	r2, #1
 8009f16:	e7dd      	b.n	8009ed4 <_dtoa_r+0x22c>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	9207      	str	r2, [sp, #28]
 8009f1c:	9a08      	ldr	r2, [sp, #32]
 8009f1e:	eb0b 0a02 	add.w	sl, fp, r2
 8009f22:	f10a 0901 	add.w	r9, sl, #1
 8009f26:	464a      	mov	r2, r9
 8009f28:	2a01      	cmp	r2, #1
 8009f2a:	bfb8      	it	lt
 8009f2c:	2201      	movlt	r2, #1
 8009f2e:	e7db      	b.n	8009ee8 <_dtoa_r+0x240>
 8009f30:	2201      	movs	r2, #1
 8009f32:	e7f2      	b.n	8009f1a <_dtoa_r+0x272>
 8009f34:	2401      	movs	r4, #1
 8009f36:	2200      	movs	r2, #0
 8009f38:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009f3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009f40:	2100      	movs	r1, #0
 8009f42:	46d1      	mov	r9, sl
 8009f44:	2212      	movs	r2, #18
 8009f46:	9108      	str	r1, [sp, #32]
 8009f48:	e7ce      	b.n	8009ee8 <_dtoa_r+0x240>
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	9207      	str	r2, [sp, #28]
 8009f4e:	e7f5      	b.n	8009f3c <_dtoa_r+0x294>
 8009f50:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009f54:	46d1      	mov	r9, sl
 8009f56:	4652      	mov	r2, sl
 8009f58:	e7c6      	b.n	8009ee8 <_dtoa_r+0x240>
 8009f5a:	3101      	adds	r1, #1
 8009f5c:	6079      	str	r1, [r7, #4]
 8009f5e:	0040      	lsls	r0, r0, #1
 8009f60:	e7c6      	b.n	8009ef0 <_dtoa_r+0x248>
 8009f62:	bf00      	nop
 8009f64:	f3af 8000 	nop.w
 8009f68:	636f4361 	.word	0x636f4361
 8009f6c:	3fd287a7 	.word	0x3fd287a7
 8009f70:	8b60c8b3 	.word	0x8b60c8b3
 8009f74:	3fc68a28 	.word	0x3fc68a28
 8009f78:	509f79fb 	.word	0x509f79fb
 8009f7c:	3fd34413 	.word	0x3fd34413
 8009f80:	0800d2f5 	.word	0x0800d2f5
 8009f84:	0800d30c 	.word	0x0800d30c
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	0800d2f1 	.word	0x0800d2f1
 8009f90:	0800d2e8 	.word	0x0800d2e8
 8009f94:	0800d562 	.word	0x0800d562
 8009f98:	0800d478 	.word	0x0800d478
 8009f9c:	0800d367 	.word	0x0800d367
 8009fa0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009fa2:	9901      	ldr	r1, [sp, #4]
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	f1b9 0f0e 	cmp.w	r9, #14
 8009faa:	d86c      	bhi.n	800a086 <_dtoa_r+0x3de>
 8009fac:	2c00      	cmp	r4, #0
 8009fae:	d06a      	beq.n	800a086 <_dtoa_r+0x3de>
 8009fb0:	f1bb 0f00 	cmp.w	fp, #0
 8009fb4:	f340 80a0 	ble.w	800a0f8 <_dtoa_r+0x450>
 8009fb8:	49c1      	ldr	r1, [pc, #772]	; (800a2c0 <_dtoa_r+0x618>)
 8009fba:	f00b 020f 	and.w	r2, fp, #15
 8009fbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009fc2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009fc6:	ed92 7b00 	vldr	d7, [r2]
 8009fca:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009fce:	f000 8087 	beq.w	800a0e0 <_dtoa_r+0x438>
 8009fd2:	4abc      	ldr	r2, [pc, #752]	; (800a2c4 <_dtoa_r+0x61c>)
 8009fd4:	ed92 6b08 	vldr	d6, [r2, #32]
 8009fd8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009fdc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009fe0:	f001 010f 	and.w	r1, r1, #15
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	48b7      	ldr	r0, [pc, #732]	; (800a2c4 <_dtoa_r+0x61c>)
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	d17b      	bne.n	800a0e4 <_dtoa_r+0x43c>
 8009fec:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ff0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ff4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ffa:	2900      	cmp	r1, #0
 8009ffc:	f000 80a2 	beq.w	800a144 <_dtoa_r+0x49c>
 800a000:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a004:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a008:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a010:	f140 8098 	bpl.w	800a144 <_dtoa_r+0x49c>
 800a014:	f1b9 0f00 	cmp.w	r9, #0
 800a018:	f000 8094 	beq.w	800a144 <_dtoa_r+0x49c>
 800a01c:	f1ba 0f00 	cmp.w	sl, #0
 800a020:	dd2f      	ble.n	800a082 <_dtoa_r+0x3da>
 800a022:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a026:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a02a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a02e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a032:	3201      	adds	r2, #1
 800a034:	4650      	mov	r0, sl
 800a036:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a03a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a03e:	ee07 2a90 	vmov	s15, r2
 800a042:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a046:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a04a:	ee15 4a90 	vmov	r4, s11
 800a04e:	ec52 1b15 	vmov	r1, r2, d5
 800a052:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a056:	2800      	cmp	r0, #0
 800a058:	d177      	bne.n	800a14a <_dtoa_r+0x4a2>
 800a05a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a05e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a062:	ec42 1b17 	vmov	d7, r1, r2
 800a066:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06e:	f300 8263 	bgt.w	800a538 <_dtoa_r+0x890>
 800a072:	eeb1 7b47 	vneg.f64	d7, d7
 800a076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07e:	f100 8258 	bmi.w	800a532 <_dtoa_r+0x88a>
 800a082:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a088:	2a00      	cmp	r2, #0
 800a08a:	f2c0 811d 	blt.w	800a2c8 <_dtoa_r+0x620>
 800a08e:	f1bb 0f0e 	cmp.w	fp, #14
 800a092:	f300 8119 	bgt.w	800a2c8 <_dtoa_r+0x620>
 800a096:	4b8a      	ldr	r3, [pc, #552]	; (800a2c0 <_dtoa_r+0x618>)
 800a098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a09c:	ed93 6b00 	vldr	d6, [r3]
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f280 80b7 	bge.w	800a216 <_dtoa_r+0x56e>
 800a0a8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ac:	f300 80b3 	bgt.w	800a216 <_dtoa_r+0x56e>
 800a0b0:	f040 823f 	bne.w	800a532 <_dtoa_r+0x88a>
 800a0b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a0b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a0bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c8:	464c      	mov	r4, r9
 800a0ca:	464f      	mov	r7, r9
 800a0cc:	f280 8215 	bge.w	800a4fa <_dtoa_r+0x852>
 800a0d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0d4:	2331      	movs	r3, #49	; 0x31
 800a0d6:	f808 3b01 	strb.w	r3, [r8], #1
 800a0da:	f10b 0b01 	add.w	fp, fp, #1
 800a0de:	e211      	b.n	800a504 <_dtoa_r+0x85c>
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	e780      	b.n	8009fe6 <_dtoa_r+0x33e>
 800a0e4:	07cc      	lsls	r4, r1, #31
 800a0e6:	d504      	bpl.n	800a0f2 <_dtoa_r+0x44a>
 800a0e8:	ed90 6b00 	vldr	d6, [r0]
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0f2:	1049      	asrs	r1, r1, #1
 800a0f4:	3008      	adds	r0, #8
 800a0f6:	e777      	b.n	8009fe8 <_dtoa_r+0x340>
 800a0f8:	d022      	beq.n	800a140 <_dtoa_r+0x498>
 800a0fa:	f1cb 0100 	rsb	r1, fp, #0
 800a0fe:	4a70      	ldr	r2, [pc, #448]	; (800a2c0 <_dtoa_r+0x618>)
 800a100:	f001 000f 	and.w	r0, r1, #15
 800a104:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a108:	ed92 7b00 	vldr	d7, [r2]
 800a10c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a110:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a114:	486b      	ldr	r0, [pc, #428]	; (800a2c4 <_dtoa_r+0x61c>)
 800a116:	1109      	asrs	r1, r1, #4
 800a118:	2400      	movs	r4, #0
 800a11a:	2202      	movs	r2, #2
 800a11c:	b929      	cbnz	r1, 800a12a <_dtoa_r+0x482>
 800a11e:	2c00      	cmp	r4, #0
 800a120:	f43f af6a 	beq.w	8009ff8 <_dtoa_r+0x350>
 800a124:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a128:	e766      	b.n	8009ff8 <_dtoa_r+0x350>
 800a12a:	07cf      	lsls	r7, r1, #31
 800a12c:	d505      	bpl.n	800a13a <_dtoa_r+0x492>
 800a12e:	ed90 6b00 	vldr	d6, [r0]
 800a132:	3201      	adds	r2, #1
 800a134:	2401      	movs	r4, #1
 800a136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a13a:	1049      	asrs	r1, r1, #1
 800a13c:	3008      	adds	r0, #8
 800a13e:	e7ed      	b.n	800a11c <_dtoa_r+0x474>
 800a140:	2202      	movs	r2, #2
 800a142:	e759      	b.n	8009ff8 <_dtoa_r+0x350>
 800a144:	465f      	mov	r7, fp
 800a146:	4648      	mov	r0, r9
 800a148:	e775      	b.n	800a036 <_dtoa_r+0x38e>
 800a14a:	ec42 1b17 	vmov	d7, r1, r2
 800a14e:	4a5c      	ldr	r2, [pc, #368]	; (800a2c0 <_dtoa_r+0x618>)
 800a150:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a154:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a158:	9a01      	ldr	r2, [sp, #4]
 800a15a:	1814      	adds	r4, r2, r0
 800a15c:	9a07      	ldr	r2, [sp, #28]
 800a15e:	b352      	cbz	r2, 800a1b6 <_dtoa_r+0x50e>
 800a160:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a164:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a168:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a16c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a170:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a174:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a178:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a17c:	ee14 2a90 	vmov	r2, s9
 800a180:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a184:	3230      	adds	r2, #48	; 0x30
 800a186:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a18a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a192:	f808 2b01 	strb.w	r2, [r8], #1
 800a196:	d439      	bmi.n	800a20c <_dtoa_r+0x564>
 800a198:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a19c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a4:	d472      	bmi.n	800a28c <_dtoa_r+0x5e4>
 800a1a6:	45a0      	cmp	r8, r4
 800a1a8:	f43f af6b 	beq.w	800a082 <_dtoa_r+0x3da>
 800a1ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a1b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a1b4:	e7e0      	b.n	800a178 <_dtoa_r+0x4d0>
 800a1b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a1be:	4621      	mov	r1, r4
 800a1c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a1c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a1c8:	ee14 2a90 	vmov	r2, s9
 800a1cc:	3230      	adds	r2, #48	; 0x30
 800a1ce:	f808 2b01 	strb.w	r2, [r8], #1
 800a1d2:	45a0      	cmp	r8, r4
 800a1d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a1d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a1dc:	d118      	bne.n	800a210 <_dtoa_r+0x568>
 800a1de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a1e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a1e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ee:	dc4d      	bgt.n	800a28c <_dtoa_r+0x5e4>
 800a1f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a1f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fc:	f57f af41 	bpl.w	800a082 <_dtoa_r+0x3da>
 800a200:	4688      	mov	r8, r1
 800a202:	3901      	subs	r1, #1
 800a204:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a208:	2b30      	cmp	r3, #48	; 0x30
 800a20a:	d0f9      	beq.n	800a200 <_dtoa_r+0x558>
 800a20c:	46bb      	mov	fp, r7
 800a20e:	e02a      	b.n	800a266 <_dtoa_r+0x5be>
 800a210:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a214:	e7d6      	b.n	800a1c4 <_dtoa_r+0x51c>
 800a216:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a21a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a21e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a222:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a226:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a22a:	ee15 3a10 	vmov	r3, s10
 800a22e:	3330      	adds	r3, #48	; 0x30
 800a230:	f808 3b01 	strb.w	r3, [r8], #1
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	eba8 0303 	sub.w	r3, r8, r3
 800a23a:	4599      	cmp	r9, r3
 800a23c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a240:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a244:	d133      	bne.n	800a2ae <_dtoa_r+0x606>
 800a246:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a24a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a252:	dc1a      	bgt.n	800a28a <_dtoa_r+0x5e2>
 800a254:	eeb4 7b46 	vcmp.f64	d7, d6
 800a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25c:	d103      	bne.n	800a266 <_dtoa_r+0x5be>
 800a25e:	ee15 3a10 	vmov	r3, s10
 800a262:	07d9      	lsls	r1, r3, #31
 800a264:	d411      	bmi.n	800a28a <_dtoa_r+0x5e2>
 800a266:	4629      	mov	r1, r5
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 fe6b 	bl	800af44 <_Bfree>
 800a26e:	2300      	movs	r3, #0
 800a270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a272:	f888 3000 	strb.w	r3, [r8]
 800a276:	f10b 0301 	add.w	r3, fp, #1
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f43f ad61 	beq.w	8009d46 <_dtoa_r+0x9e>
 800a284:	f8c3 8000 	str.w	r8, [r3]
 800a288:	e55d      	b.n	8009d46 <_dtoa_r+0x9e>
 800a28a:	465f      	mov	r7, fp
 800a28c:	4643      	mov	r3, r8
 800a28e:	4698      	mov	r8, r3
 800a290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a294:	2a39      	cmp	r2, #57	; 0x39
 800a296:	d106      	bne.n	800a2a6 <_dtoa_r+0x5fe>
 800a298:	9a01      	ldr	r2, [sp, #4]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d1f7      	bne.n	800a28e <_dtoa_r+0x5e6>
 800a29e:	9901      	ldr	r1, [sp, #4]
 800a2a0:	2230      	movs	r2, #48	; 0x30
 800a2a2:	3701      	adds	r7, #1
 800a2a4:	700a      	strb	r2, [r1, #0]
 800a2a6:	781a      	ldrb	r2, [r3, #0]
 800a2a8:	3201      	adds	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	e7ae      	b.n	800a20c <_dtoa_r+0x564>
 800a2ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ba:	d1b2      	bne.n	800a222 <_dtoa_r+0x57a>
 800a2bc:	e7d3      	b.n	800a266 <_dtoa_r+0x5be>
 800a2be:	bf00      	nop
 800a2c0:	0800d478 	.word	0x0800d478
 800a2c4:	0800d450 	.word	0x0800d450
 800a2c8:	9907      	ldr	r1, [sp, #28]
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	f000 80d0 	beq.w	800a470 <_dtoa_r+0x7c8>
 800a2d0:	9906      	ldr	r1, [sp, #24]
 800a2d2:	2901      	cmp	r1, #1
 800a2d4:	f300 80b4 	bgt.w	800a440 <_dtoa_r+0x798>
 800a2d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2da:	2900      	cmp	r1, #0
 800a2dc:	f000 80ac 	beq.w	800a438 <_dtoa_r+0x790>
 800a2e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a2e8:	461c      	mov	r4, r3
 800a2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ec:	9b04      	ldr	r3, [sp, #16]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	9304      	str	r3, [sp, #16]
 800a2f2:	9b05      	ldr	r3, [sp, #20]
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	f000 ff24 	bl	800b148 <__i2b>
 800a300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a302:	4607      	mov	r7, r0
 800a304:	f1b8 0f00 	cmp.w	r8, #0
 800a308:	dd0d      	ble.n	800a326 <_dtoa_r+0x67e>
 800a30a:	9a05      	ldr	r2, [sp, #20]
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	dd0a      	ble.n	800a326 <_dtoa_r+0x67e>
 800a310:	4542      	cmp	r2, r8
 800a312:	9904      	ldr	r1, [sp, #16]
 800a314:	bfa8      	it	ge
 800a316:	4642      	movge	r2, r8
 800a318:	1a89      	subs	r1, r1, r2
 800a31a:	9104      	str	r1, [sp, #16]
 800a31c:	9905      	ldr	r1, [sp, #20]
 800a31e:	eba8 0802 	sub.w	r8, r8, r2
 800a322:	1a8a      	subs	r2, r1, r2
 800a324:	9205      	str	r2, [sp, #20]
 800a326:	b303      	cbz	r3, 800a36a <_dtoa_r+0x6c2>
 800a328:	9a07      	ldr	r2, [sp, #28]
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	f000 80a5 	beq.w	800a47a <_dtoa_r+0x7d2>
 800a330:	2c00      	cmp	r4, #0
 800a332:	dd13      	ble.n	800a35c <_dtoa_r+0x6b4>
 800a334:	4639      	mov	r1, r7
 800a336:	4622      	mov	r2, r4
 800a338:	4630      	mov	r0, r6
 800a33a:	930d      	str	r3, [sp, #52]	; 0x34
 800a33c:	f000 ffc4 	bl	800b2c8 <__pow5mult>
 800a340:	462a      	mov	r2, r5
 800a342:	4601      	mov	r1, r0
 800a344:	4607      	mov	r7, r0
 800a346:	4630      	mov	r0, r6
 800a348:	f000 ff14 	bl	800b174 <__multiply>
 800a34c:	4629      	mov	r1, r5
 800a34e:	900a      	str	r0, [sp, #40]	; 0x28
 800a350:	4630      	mov	r0, r6
 800a352:	f000 fdf7 	bl	800af44 <_Bfree>
 800a356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35a:	4615      	mov	r5, r2
 800a35c:	1b1a      	subs	r2, r3, r4
 800a35e:	d004      	beq.n	800a36a <_dtoa_r+0x6c2>
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f000 ffb0 	bl	800b2c8 <__pow5mult>
 800a368:	4605      	mov	r5, r0
 800a36a:	2101      	movs	r1, #1
 800a36c:	4630      	mov	r0, r6
 800a36e:	f000 feeb 	bl	800b148 <__i2b>
 800a372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a374:	2b00      	cmp	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	f340 8081 	ble.w	800a47e <_dtoa_r+0x7d6>
 800a37c:	461a      	mov	r2, r3
 800a37e:	4601      	mov	r1, r0
 800a380:	4630      	mov	r0, r6
 800a382:	f000 ffa1 	bl	800b2c8 <__pow5mult>
 800a386:	9b06      	ldr	r3, [sp, #24]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	4604      	mov	r4, r0
 800a38c:	dd7a      	ble.n	800a484 <_dtoa_r+0x7dc>
 800a38e:	2300      	movs	r3, #0
 800a390:	930a      	str	r3, [sp, #40]	; 0x28
 800a392:	6922      	ldr	r2, [r4, #16]
 800a394:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a398:	6910      	ldr	r0, [r2, #16]
 800a39a:	f000 fe85 	bl	800b0a8 <__hi0bits>
 800a39e:	f1c0 0020 	rsb	r0, r0, #32
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	4418      	add	r0, r3
 800a3a6:	f010 001f 	ands.w	r0, r0, #31
 800a3aa:	f000 808c 	beq.w	800a4c6 <_dtoa_r+0x81e>
 800a3ae:	f1c0 0220 	rsb	r2, r0, #32
 800a3b2:	2a04      	cmp	r2, #4
 800a3b4:	f340 8085 	ble.w	800a4c2 <_dtoa_r+0x81a>
 800a3b8:	f1c0 001c 	rsb	r0, r0, #28
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	4403      	add	r3, r0
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	9b05      	ldr	r3, [sp, #20]
 800a3c4:	4403      	add	r3, r0
 800a3c6:	4480      	add	r8, r0
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	dd05      	ble.n	800a3dc <_dtoa_r+0x734>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f000 ffd1 	bl	800b37c <__lshift>
 800a3da:	4605      	mov	r5, r0
 800a3dc:	9b05      	ldr	r3, [sp, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd05      	ble.n	800a3ee <_dtoa_r+0x746>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f000 ffc8 	bl	800b37c <__lshift>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d06a      	beq.n	800a4ca <_dtoa_r+0x822>
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f001 f830 	bl	800b45c <__mcmp>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	da64      	bge.n	800a4ca <_dtoa_r+0x822>
 800a400:	2300      	movs	r3, #0
 800a402:	4629      	mov	r1, r5
 800a404:	220a      	movs	r2, #10
 800a406:	4630      	mov	r0, r6
 800a408:	f000 fdbe 	bl	800af88 <__multadd>
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a412:	4605      	mov	r5, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8191 	beq.w	800a73c <_dtoa_r+0xa94>
 800a41a:	4639      	mov	r1, r7
 800a41c:	2300      	movs	r3, #0
 800a41e:	220a      	movs	r2, #10
 800a420:	4630      	mov	r0, r6
 800a422:	f000 fdb1 	bl	800af88 <__multadd>
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	4607      	mov	r7, r0
 800a42c:	f300 808d 	bgt.w	800a54a <_dtoa_r+0x8a2>
 800a430:	9b06      	ldr	r3, [sp, #24]
 800a432:	2b02      	cmp	r3, #2
 800a434:	dc50      	bgt.n	800a4d8 <_dtoa_r+0x830>
 800a436:	e088      	b.n	800a54a <_dtoa_r+0x8a2>
 800a438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a43a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a43e:	e751      	b.n	800a2e4 <_dtoa_r+0x63c>
 800a440:	f109 34ff 	add.w	r4, r9, #4294967295
 800a444:	42a3      	cmp	r3, r4
 800a446:	bfbf      	itttt	lt
 800a448:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a44a:	1ae3      	sublt	r3, r4, r3
 800a44c:	18d2      	addlt	r2, r2, r3
 800a44e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a450:	bfb6      	itet	lt
 800a452:	4623      	movlt	r3, r4
 800a454:	1b1c      	subge	r4, r3, r4
 800a456:	2400      	movlt	r4, #0
 800a458:	f1b9 0f00 	cmp.w	r9, #0
 800a45c:	bfb5      	itete	lt
 800a45e:	9a04      	ldrlt	r2, [sp, #16]
 800a460:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a464:	eba2 0809 	sublt.w	r8, r2, r9
 800a468:	464a      	movge	r2, r9
 800a46a:	bfb8      	it	lt
 800a46c:	2200      	movlt	r2, #0
 800a46e:	e73c      	b.n	800a2ea <_dtoa_r+0x642>
 800a470:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a474:	9f07      	ldr	r7, [sp, #28]
 800a476:	461c      	mov	r4, r3
 800a478:	e744      	b.n	800a304 <_dtoa_r+0x65c>
 800a47a:	461a      	mov	r2, r3
 800a47c:	e770      	b.n	800a360 <_dtoa_r+0x6b8>
 800a47e:	9b06      	ldr	r3, [sp, #24]
 800a480:	2b01      	cmp	r3, #1
 800a482:	dc18      	bgt.n	800a4b6 <_dtoa_r+0x80e>
 800a484:	9b02      	ldr	r3, [sp, #8]
 800a486:	b9b3      	cbnz	r3, 800a4b6 <_dtoa_r+0x80e>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a48e:	b9a2      	cbnz	r2, 800a4ba <_dtoa_r+0x812>
 800a490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a494:	0d12      	lsrs	r2, r2, #20
 800a496:	0512      	lsls	r2, r2, #20
 800a498:	b18a      	cbz	r2, 800a4be <_dtoa_r+0x816>
 800a49a:	9b04      	ldr	r3, [sp, #16]
 800a49c:	3301      	adds	r3, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f af70 	bne.w	800a392 <_dtoa_r+0x6ea>
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	e775      	b.n	800a3a2 <_dtoa_r+0x6fa>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e7f6      	b.n	800a4a8 <_dtoa_r+0x800>
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	e7f4      	b.n	800a4a8 <_dtoa_r+0x800>
 800a4be:	920a      	str	r2, [sp, #40]	; 0x28
 800a4c0:	e7f3      	b.n	800a4aa <_dtoa_r+0x802>
 800a4c2:	d082      	beq.n	800a3ca <_dtoa_r+0x722>
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	301c      	adds	r0, #28
 800a4c8:	e778      	b.n	800a3bc <_dtoa_r+0x714>
 800a4ca:	f1b9 0f00 	cmp.w	r9, #0
 800a4ce:	dc37      	bgt.n	800a540 <_dtoa_r+0x898>
 800a4d0:	9b06      	ldr	r3, [sp, #24]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	dd34      	ble.n	800a540 <_dtoa_r+0x898>
 800a4d6:	46ca      	mov	sl, r9
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d10d      	bne.n	800a4fa <_dtoa_r+0x852>
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4653      	mov	r3, sl
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f000 fd4f 	bl	800af88 <__multadd>
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 ffb4 	bl	800b45c <__mcmp>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f73f adeb 	bgt.w	800a0d0 <_dtoa_r+0x428>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a500:	ea6f 0b03 	mvn.w	fp, r3
 800a504:	f04f 0900 	mov.w	r9, #0
 800a508:	4621      	mov	r1, r4
 800a50a:	4630      	mov	r0, r6
 800a50c:	f000 fd1a 	bl	800af44 <_Bfree>
 800a510:	2f00      	cmp	r7, #0
 800a512:	f43f aea8 	beq.w	800a266 <_dtoa_r+0x5be>
 800a516:	f1b9 0f00 	cmp.w	r9, #0
 800a51a:	d005      	beq.n	800a528 <_dtoa_r+0x880>
 800a51c:	45b9      	cmp	r9, r7
 800a51e:	d003      	beq.n	800a528 <_dtoa_r+0x880>
 800a520:	4649      	mov	r1, r9
 800a522:	4630      	mov	r0, r6
 800a524:	f000 fd0e 	bl	800af44 <_Bfree>
 800a528:	4639      	mov	r1, r7
 800a52a:	4630      	mov	r0, r6
 800a52c:	f000 fd0a 	bl	800af44 <_Bfree>
 800a530:	e699      	b.n	800a266 <_dtoa_r+0x5be>
 800a532:	2400      	movs	r4, #0
 800a534:	4627      	mov	r7, r4
 800a536:	e7e0      	b.n	800a4fa <_dtoa_r+0x852>
 800a538:	46bb      	mov	fp, r7
 800a53a:	4604      	mov	r4, r0
 800a53c:	4607      	mov	r7, r0
 800a53e:	e5c7      	b.n	800a0d0 <_dtoa_r+0x428>
 800a540:	9b07      	ldr	r3, [sp, #28]
 800a542:	46ca      	mov	sl, r9
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8100 	beq.w	800a74a <_dtoa_r+0xaa2>
 800a54a:	f1b8 0f00 	cmp.w	r8, #0
 800a54e:	dd05      	ble.n	800a55c <_dtoa_r+0x8b4>
 800a550:	4639      	mov	r1, r7
 800a552:	4642      	mov	r2, r8
 800a554:	4630      	mov	r0, r6
 800a556:	f000 ff11 	bl	800b37c <__lshift>
 800a55a:	4607      	mov	r7, r0
 800a55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d05d      	beq.n	800a61e <_dtoa_r+0x976>
 800a562:	6879      	ldr	r1, [r7, #4]
 800a564:	4630      	mov	r0, r6
 800a566:	f000 fcad 	bl	800aec4 <_Balloc>
 800a56a:	4680      	mov	r8, r0
 800a56c:	b928      	cbnz	r0, 800a57a <_dtoa_r+0x8d2>
 800a56e:	4b82      	ldr	r3, [pc, #520]	; (800a778 <_dtoa_r+0xad0>)
 800a570:	4602      	mov	r2, r0
 800a572:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a576:	f7ff bbaf 	b.w	8009cd8 <_dtoa_r+0x30>
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	3202      	adds	r2, #2
 800a57e:	0092      	lsls	r2, r2, #2
 800a580:	f107 010c 	add.w	r1, r7, #12
 800a584:	300c      	adds	r0, #12
 800a586:	f7fd fd55 	bl	8008034 <memcpy>
 800a58a:	2201      	movs	r2, #1
 800a58c:	4641      	mov	r1, r8
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 fef4 	bl	800b37c <__lshift>
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	3301      	adds	r3, #1
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	4453      	add	r3, sl
 800a59e:	9308      	str	r3, [sp, #32]
 800a5a0:	9b02      	ldr	r3, [sp, #8]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	46b9      	mov	r9, r7
 800a5a8:	9307      	str	r3, [sp, #28]
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	f7ff faeb 	bl	8009b90 <quorem>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	3330      	adds	r3, #48	; 0x30
 800a5be:	9005      	str	r0, [sp, #20]
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c6:	f000 ff49 	bl	800b45c <__mcmp>
 800a5ca:	463a      	mov	r2, r7
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f000 ff5f 	bl	800b494 <__mdiff>
 800a5d6:	68c2      	ldr	r2, [r0, #12]
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	4680      	mov	r8, r0
 800a5dc:	bb0a      	cbnz	r2, 800a622 <_dtoa_r+0x97a>
 800a5de:	4601      	mov	r1, r0
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 ff3b 	bl	800b45c <__mcmp>
 800a5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a5f2:	f000 fca7 	bl	800af44 <_Bfree>
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5fa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a5fe:	ea43 0102 	orr.w	r1, r3, r2
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	430b      	orrs	r3, r1
 800a606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a608:	d10d      	bne.n	800a626 <_dtoa_r+0x97e>
 800a60a:	2b39      	cmp	r3, #57	; 0x39
 800a60c:	d029      	beq.n	800a662 <_dtoa_r+0x9ba>
 800a60e:	f1ba 0f00 	cmp.w	sl, #0
 800a612:	dd01      	ble.n	800a618 <_dtoa_r+0x970>
 800a614:	9b05      	ldr	r3, [sp, #20]
 800a616:	3331      	adds	r3, #49	; 0x31
 800a618:	9a02      	ldr	r2, [sp, #8]
 800a61a:	7013      	strb	r3, [r2, #0]
 800a61c:	e774      	b.n	800a508 <_dtoa_r+0x860>
 800a61e:	4638      	mov	r0, r7
 800a620:	e7b8      	b.n	800a594 <_dtoa_r+0x8ec>
 800a622:	2201      	movs	r2, #1
 800a624:	e7e1      	b.n	800a5ea <_dtoa_r+0x942>
 800a626:	f1ba 0f00 	cmp.w	sl, #0
 800a62a:	db06      	blt.n	800a63a <_dtoa_r+0x992>
 800a62c:	9906      	ldr	r1, [sp, #24]
 800a62e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a632:	9907      	ldr	r1, [sp, #28]
 800a634:	ea5a 0101 	orrs.w	r1, sl, r1
 800a638:	d120      	bne.n	800a67c <_dtoa_r+0x9d4>
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	ddec      	ble.n	800a618 <_dtoa_r+0x970>
 800a63e:	4629      	mov	r1, r5
 800a640:	2201      	movs	r2, #1
 800a642:	4630      	mov	r0, r6
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	f000 fe99 	bl	800b37c <__lshift>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4605      	mov	r5, r0
 800a64e:	f000 ff05 	bl	800b45c <__mcmp>
 800a652:	2800      	cmp	r0, #0
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	dc02      	bgt.n	800a65e <_dtoa_r+0x9b6>
 800a658:	d1de      	bne.n	800a618 <_dtoa_r+0x970>
 800a65a:	07da      	lsls	r2, r3, #31
 800a65c:	d5dc      	bpl.n	800a618 <_dtoa_r+0x970>
 800a65e:	2b39      	cmp	r3, #57	; 0x39
 800a660:	d1d8      	bne.n	800a614 <_dtoa_r+0x96c>
 800a662:	9a02      	ldr	r2, [sp, #8]
 800a664:	2339      	movs	r3, #57	; 0x39
 800a666:	7013      	strb	r3, [r2, #0]
 800a668:	4643      	mov	r3, r8
 800a66a:	4698      	mov	r8, r3
 800a66c:	3b01      	subs	r3, #1
 800a66e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a672:	2a39      	cmp	r2, #57	; 0x39
 800a674:	d051      	beq.n	800a71a <_dtoa_r+0xa72>
 800a676:	3201      	adds	r2, #1
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e745      	b.n	800a508 <_dtoa_r+0x860>
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	dd03      	ble.n	800a688 <_dtoa_r+0x9e0>
 800a680:	2b39      	cmp	r3, #57	; 0x39
 800a682:	d0ee      	beq.n	800a662 <_dtoa_r+0x9ba>
 800a684:	3301      	adds	r3, #1
 800a686:	e7c7      	b.n	800a618 <_dtoa_r+0x970>
 800a688:	9a04      	ldr	r2, [sp, #16]
 800a68a:	9908      	ldr	r1, [sp, #32]
 800a68c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a690:	428a      	cmp	r2, r1
 800a692:	d02b      	beq.n	800a6ec <_dtoa_r+0xa44>
 800a694:	4629      	mov	r1, r5
 800a696:	2300      	movs	r3, #0
 800a698:	220a      	movs	r2, #10
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 fc74 	bl	800af88 <__multadd>
 800a6a0:	45b9      	cmp	r9, r7
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	f04f 020a 	mov.w	r2, #10
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	d107      	bne.n	800a6c2 <_dtoa_r+0xa1a>
 800a6b2:	f000 fc69 	bl	800af88 <__multadd>
 800a6b6:	4681      	mov	r9, r0
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	e774      	b.n	800a5ac <_dtoa_r+0x904>
 800a6c2:	f000 fc61 	bl	800af88 <__multadd>
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	4681      	mov	r9, r0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 fc5a 	bl	800af88 <__multadd>
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	e7f0      	b.n	800a6ba <_dtoa_r+0xa12>
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	9a01      	ldr	r2, [sp, #4]
 800a6de:	bfcc      	ite	gt
 800a6e0:	46d0      	movgt	r8, sl
 800a6e2:	f04f 0801 	movle.w	r8, #1
 800a6e6:	4490      	add	r8, r2
 800a6e8:	f04f 0900 	mov.w	r9, #0
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	9302      	str	r3, [sp, #8]
 800a6f4:	f000 fe42 	bl	800b37c <__lshift>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	f000 feae 	bl	800b45c <__mcmp>
 800a700:	2800      	cmp	r0, #0
 800a702:	dcb1      	bgt.n	800a668 <_dtoa_r+0x9c0>
 800a704:	d102      	bne.n	800a70c <_dtoa_r+0xa64>
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	07db      	lsls	r3, r3, #31
 800a70a:	d4ad      	bmi.n	800a668 <_dtoa_r+0x9c0>
 800a70c:	4643      	mov	r3, r8
 800a70e:	4698      	mov	r8, r3
 800a710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a714:	2a30      	cmp	r2, #48	; 0x30
 800a716:	d0fa      	beq.n	800a70e <_dtoa_r+0xa66>
 800a718:	e6f6      	b.n	800a508 <_dtoa_r+0x860>
 800a71a:	9a01      	ldr	r2, [sp, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d1a4      	bne.n	800a66a <_dtoa_r+0x9c2>
 800a720:	f10b 0b01 	add.w	fp, fp, #1
 800a724:	2331      	movs	r3, #49	; 0x31
 800a726:	e778      	b.n	800a61a <_dtoa_r+0x972>
 800a728:	4b14      	ldr	r3, [pc, #80]	; (800a77c <_dtoa_r+0xad4>)
 800a72a:	f7ff bb27 	b.w	8009d7c <_dtoa_r+0xd4>
 800a72e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a730:	2b00      	cmp	r3, #0
 800a732:	f47f ab03 	bne.w	8009d3c <_dtoa_r+0x94>
 800a736:	4b12      	ldr	r3, [pc, #72]	; (800a780 <_dtoa_r+0xad8>)
 800a738:	f7ff bb20 	b.w	8009d7c <_dtoa_r+0xd4>
 800a73c:	f1ba 0f00 	cmp.w	sl, #0
 800a740:	dc03      	bgt.n	800a74a <_dtoa_r+0xaa2>
 800a742:	9b06      	ldr	r3, [sp, #24]
 800a744:	2b02      	cmp	r3, #2
 800a746:	f73f aec7 	bgt.w	800a4d8 <_dtoa_r+0x830>
 800a74a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f7ff fa1d 	bl	8009b90 <quorem>
 800a756:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a75a:	f808 3b01 	strb.w	r3, [r8], #1
 800a75e:	9a01      	ldr	r2, [sp, #4]
 800a760:	eba8 0202 	sub.w	r2, r8, r2
 800a764:	4592      	cmp	sl, r2
 800a766:	ddb7      	ble.n	800a6d8 <_dtoa_r+0xa30>
 800a768:	4629      	mov	r1, r5
 800a76a:	2300      	movs	r3, #0
 800a76c:	220a      	movs	r2, #10
 800a76e:	4630      	mov	r0, r6
 800a770:	f000 fc0a 	bl	800af88 <__multadd>
 800a774:	4605      	mov	r5, r0
 800a776:	e7ea      	b.n	800a74e <_dtoa_r+0xaa6>
 800a778:	0800d367 	.word	0x0800d367
 800a77c:	0800d561 	.word	0x0800d561
 800a780:	0800d2e8 	.word	0x0800d2e8

0800a784 <rshift>:
 800a784:	6903      	ldr	r3, [r0, #16]
 800a786:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a78e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a792:	f100 0414 	add.w	r4, r0, #20
 800a796:	dd45      	ble.n	800a824 <rshift+0xa0>
 800a798:	f011 011f 	ands.w	r1, r1, #31
 800a79c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7a4:	d10c      	bne.n	800a7c0 <rshift+0x3c>
 800a7a6:	f100 0710 	add.w	r7, r0, #16
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	42b1      	cmp	r1, r6
 800a7ae:	d334      	bcc.n	800a81a <rshift+0x96>
 800a7b0:	1a9b      	subs	r3, r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	1eea      	subs	r2, r5, #3
 800a7b6:	4296      	cmp	r6, r2
 800a7b8:	bf38      	it	cc
 800a7ba:	2300      	movcc	r3, #0
 800a7bc:	4423      	add	r3, r4
 800a7be:	e015      	b.n	800a7ec <rshift+0x68>
 800a7c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7c4:	f1c1 0820 	rsb	r8, r1, #32
 800a7c8:	40cf      	lsrs	r7, r1
 800a7ca:	f105 0e04 	add.w	lr, r5, #4
 800a7ce:	46a1      	mov	r9, r4
 800a7d0:	4576      	cmp	r6, lr
 800a7d2:	46f4      	mov	ip, lr
 800a7d4:	d815      	bhi.n	800a802 <rshift+0x7e>
 800a7d6:	1a9a      	subs	r2, r3, r2
 800a7d8:	0092      	lsls	r2, r2, #2
 800a7da:	3a04      	subs	r2, #4
 800a7dc:	3501      	adds	r5, #1
 800a7de:	42ae      	cmp	r6, r5
 800a7e0:	bf38      	it	cc
 800a7e2:	2200      	movcc	r2, #0
 800a7e4:	18a3      	adds	r3, r4, r2
 800a7e6:	50a7      	str	r7, [r4, r2]
 800a7e8:	b107      	cbz	r7, 800a7ec <rshift+0x68>
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	1b1a      	subs	r2, r3, r4
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7f4:	bf08      	it	eq
 800a7f6:	2300      	moveq	r3, #0
 800a7f8:	6102      	str	r2, [r0, #16]
 800a7fa:	bf08      	it	eq
 800a7fc:	6143      	streq	r3, [r0, #20]
 800a7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a802:	f8dc c000 	ldr.w	ip, [ip]
 800a806:	fa0c fc08 	lsl.w	ip, ip, r8
 800a80a:	ea4c 0707 	orr.w	r7, ip, r7
 800a80e:	f849 7b04 	str.w	r7, [r9], #4
 800a812:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a816:	40cf      	lsrs	r7, r1
 800a818:	e7da      	b.n	800a7d0 <rshift+0x4c>
 800a81a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a81e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a822:	e7c3      	b.n	800a7ac <rshift+0x28>
 800a824:	4623      	mov	r3, r4
 800a826:	e7e1      	b.n	800a7ec <rshift+0x68>

0800a828 <__hexdig_fun>:
 800a828:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a82c:	2b09      	cmp	r3, #9
 800a82e:	d802      	bhi.n	800a836 <__hexdig_fun+0xe>
 800a830:	3820      	subs	r0, #32
 800a832:	b2c0      	uxtb	r0, r0
 800a834:	4770      	bx	lr
 800a836:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d801      	bhi.n	800a842 <__hexdig_fun+0x1a>
 800a83e:	3847      	subs	r0, #71	; 0x47
 800a840:	e7f7      	b.n	800a832 <__hexdig_fun+0xa>
 800a842:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a846:	2b05      	cmp	r3, #5
 800a848:	d801      	bhi.n	800a84e <__hexdig_fun+0x26>
 800a84a:	3827      	subs	r0, #39	; 0x27
 800a84c:	e7f1      	b.n	800a832 <__hexdig_fun+0xa>
 800a84e:	2000      	movs	r0, #0
 800a850:	4770      	bx	lr
	...

0800a854 <__gethex>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	ed2d 8b02 	vpush	{d8}
 800a85c:	b089      	sub	sp, #36	; 0x24
 800a85e:	ee08 0a10 	vmov	s16, r0
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	4bb4      	ldr	r3, [pc, #720]	; (800ab38 <__gethex+0x2e4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	4618      	mov	r0, r3
 800a86c:	468b      	mov	fp, r1
 800a86e:	4690      	mov	r8, r2
 800a870:	f7f5 fce6 	bl	8000240 <strlen>
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	f8db 2000 	ldr.w	r2, [fp]
 800a87a:	4403      	add	r3, r0
 800a87c:	4682      	mov	sl, r0
 800a87e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	1c93      	adds	r3, r2, #2
 800a886:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a88a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a88e:	32fe      	adds	r2, #254	; 0xfe
 800a890:	18d1      	adds	r1, r2, r3
 800a892:	461f      	mov	r7, r3
 800a894:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a898:	9100      	str	r1, [sp, #0]
 800a89a:	2830      	cmp	r0, #48	; 0x30
 800a89c:	d0f8      	beq.n	800a890 <__gethex+0x3c>
 800a89e:	f7ff ffc3 	bl	800a828 <__hexdig_fun>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d13a      	bne.n	800a91e <__gethex+0xca>
 800a8a8:	9901      	ldr	r1, [sp, #4]
 800a8aa:	4652      	mov	r2, sl
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	f001 fd9f 	bl	800c3f0 <strncmp>
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d168      	bne.n	800a98a <__gethex+0x136>
 800a8b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a8bc:	eb07 060a 	add.w	r6, r7, sl
 800a8c0:	f7ff ffb2 	bl	800a828 <__hexdig_fun>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d062      	beq.n	800a98e <__gethex+0x13a>
 800a8c8:	4633      	mov	r3, r6
 800a8ca:	7818      	ldrb	r0, [r3, #0]
 800a8cc:	2830      	cmp	r0, #48	; 0x30
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	f103 0301 	add.w	r3, r3, #1
 800a8d4:	d0f9      	beq.n	800a8ca <__gethex+0x76>
 800a8d6:	f7ff ffa7 	bl	800a828 <__hexdig_fun>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	fab0 f480 	clz	r4, r0
 800a8e0:	0964      	lsrs	r4, r4, #5
 800a8e2:	4635      	mov	r5, r6
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	7830      	ldrb	r0, [r6, #0]
 800a8ee:	f7ff ff9b 	bl	800a828 <__hexdig_fun>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d1f8      	bne.n	800a8e8 <__gethex+0x94>
 800a8f6:	9901      	ldr	r1, [sp, #4]
 800a8f8:	4652      	mov	r2, sl
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f001 fd78 	bl	800c3f0 <strncmp>
 800a900:	b980      	cbnz	r0, 800a924 <__gethex+0xd0>
 800a902:	b94d      	cbnz	r5, 800a918 <__gethex+0xc4>
 800a904:	eb06 050a 	add.w	r5, r6, sl
 800a908:	462a      	mov	r2, r5
 800a90a:	4616      	mov	r6, r2
 800a90c:	3201      	adds	r2, #1
 800a90e:	7830      	ldrb	r0, [r6, #0]
 800a910:	f7ff ff8a 	bl	800a828 <__hexdig_fun>
 800a914:	2800      	cmp	r0, #0
 800a916:	d1f8      	bne.n	800a90a <__gethex+0xb6>
 800a918:	1bad      	subs	r5, r5, r6
 800a91a:	00ad      	lsls	r5, r5, #2
 800a91c:	e004      	b.n	800a928 <__gethex+0xd4>
 800a91e:	2400      	movs	r4, #0
 800a920:	4625      	mov	r5, r4
 800a922:	e7e0      	b.n	800a8e6 <__gethex+0x92>
 800a924:	2d00      	cmp	r5, #0
 800a926:	d1f7      	bne.n	800a918 <__gethex+0xc4>
 800a928:	7833      	ldrb	r3, [r6, #0]
 800a92a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a92e:	2b50      	cmp	r3, #80	; 0x50
 800a930:	d13b      	bne.n	800a9aa <__gethex+0x156>
 800a932:	7873      	ldrb	r3, [r6, #1]
 800a934:	2b2b      	cmp	r3, #43	; 0x2b
 800a936:	d02c      	beq.n	800a992 <__gethex+0x13e>
 800a938:	2b2d      	cmp	r3, #45	; 0x2d
 800a93a:	d02e      	beq.n	800a99a <__gethex+0x146>
 800a93c:	1c71      	adds	r1, r6, #1
 800a93e:	f04f 0900 	mov.w	r9, #0
 800a942:	7808      	ldrb	r0, [r1, #0]
 800a944:	f7ff ff70 	bl	800a828 <__hexdig_fun>
 800a948:	1e43      	subs	r3, r0, #1
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b18      	cmp	r3, #24
 800a94e:	d82c      	bhi.n	800a9aa <__gethex+0x156>
 800a950:	f1a0 0210 	sub.w	r2, r0, #16
 800a954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a958:	f7ff ff66 	bl	800a828 <__hexdig_fun>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b18      	cmp	r3, #24
 800a962:	d91d      	bls.n	800a9a0 <__gethex+0x14c>
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	d000      	beq.n	800a96c <__gethex+0x118>
 800a96a:	4252      	negs	r2, r2
 800a96c:	4415      	add	r5, r2
 800a96e:	f8cb 1000 	str.w	r1, [fp]
 800a972:	b1e4      	cbz	r4, 800a9ae <__gethex+0x15a>
 800a974:	9b00      	ldr	r3, [sp, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf14      	ite	ne
 800a97a:	2700      	movne	r7, #0
 800a97c:	2706      	moveq	r7, #6
 800a97e:	4638      	mov	r0, r7
 800a980:	b009      	add	sp, #36	; 0x24
 800a982:	ecbd 8b02 	vpop	{d8}
 800a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98a:	463e      	mov	r6, r7
 800a98c:	4625      	mov	r5, r4
 800a98e:	2401      	movs	r4, #1
 800a990:	e7ca      	b.n	800a928 <__gethex+0xd4>
 800a992:	f04f 0900 	mov.w	r9, #0
 800a996:	1cb1      	adds	r1, r6, #2
 800a998:	e7d3      	b.n	800a942 <__gethex+0xee>
 800a99a:	f04f 0901 	mov.w	r9, #1
 800a99e:	e7fa      	b.n	800a996 <__gethex+0x142>
 800a9a0:	230a      	movs	r3, #10
 800a9a2:	fb03 0202 	mla	r2, r3, r2, r0
 800a9a6:	3a10      	subs	r2, #16
 800a9a8:	e7d4      	b.n	800a954 <__gethex+0x100>
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	e7df      	b.n	800a96e <__gethex+0x11a>
 800a9ae:	1bf3      	subs	r3, r6, r7
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	dc0b      	bgt.n	800a9d0 <__gethex+0x17c>
 800a9b8:	ee18 0a10 	vmov	r0, s16
 800a9bc:	f000 fa82 	bl	800aec4 <_Balloc>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	b940      	cbnz	r0, 800a9d6 <__gethex+0x182>
 800a9c4:	4b5d      	ldr	r3, [pc, #372]	; (800ab3c <__gethex+0x2e8>)
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	21de      	movs	r1, #222	; 0xde
 800a9ca:	485d      	ldr	r0, [pc, #372]	; (800ab40 <__gethex+0x2ec>)
 800a9cc:	f001 fde0 	bl	800c590 <__assert_func>
 800a9d0:	3101      	adds	r1, #1
 800a9d2:	105b      	asrs	r3, r3, #1
 800a9d4:	e7ee      	b.n	800a9b4 <__gethex+0x160>
 800a9d6:	f100 0914 	add.w	r9, r0, #20
 800a9da:	f04f 0b00 	mov.w	fp, #0
 800a9de:	f1ca 0301 	rsb	r3, sl, #1
 800a9e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9e6:	f8cd b000 	str.w	fp, [sp]
 800a9ea:	9306      	str	r3, [sp, #24]
 800a9ec:	42b7      	cmp	r7, r6
 800a9ee:	d340      	bcc.n	800aa72 <__gethex+0x21e>
 800a9f0:	9802      	ldr	r0, [sp, #8]
 800a9f2:	9b00      	ldr	r3, [sp, #0]
 800a9f4:	f840 3b04 	str.w	r3, [r0], #4
 800a9f8:	eba0 0009 	sub.w	r0, r0, r9
 800a9fc:	1080      	asrs	r0, r0, #2
 800a9fe:	0146      	lsls	r6, r0, #5
 800aa00:	6120      	str	r0, [r4, #16]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fb50 	bl	800b0a8 <__hi0bits>
 800aa08:	1a30      	subs	r0, r6, r0
 800aa0a:	f8d8 6000 	ldr.w	r6, [r8]
 800aa0e:	42b0      	cmp	r0, r6
 800aa10:	dd63      	ble.n	800aada <__gethex+0x286>
 800aa12:	1b87      	subs	r7, r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fef1 	bl	800b7fe <__any_on>
 800aa1c:	4682      	mov	sl, r0
 800aa1e:	b1a8      	cbz	r0, 800aa4c <__gethex+0x1f8>
 800aa20:	1e7b      	subs	r3, r7, #1
 800aa22:	1159      	asrs	r1, r3, #5
 800aa24:	f003 021f 	and.w	r2, r3, #31
 800aa28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa2c:	f04f 0a01 	mov.w	sl, #1
 800aa30:	fa0a f202 	lsl.w	r2, sl, r2
 800aa34:	420a      	tst	r2, r1
 800aa36:	d009      	beq.n	800aa4c <__gethex+0x1f8>
 800aa38:	4553      	cmp	r3, sl
 800aa3a:	dd05      	ble.n	800aa48 <__gethex+0x1f4>
 800aa3c:	1eb9      	subs	r1, r7, #2
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 fedd 	bl	800b7fe <__any_on>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d145      	bne.n	800aad4 <__gethex+0x280>
 800aa48:	f04f 0a02 	mov.w	sl, #2
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff fe98 	bl	800a784 <rshift>
 800aa54:	443d      	add	r5, r7
 800aa56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa5a:	42ab      	cmp	r3, r5
 800aa5c:	da4c      	bge.n	800aaf8 <__gethex+0x2a4>
 800aa5e:	ee18 0a10 	vmov	r0, s16
 800aa62:	4621      	mov	r1, r4
 800aa64:	f000 fa6e 	bl	800af44 <_Bfree>
 800aa68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	27a3      	movs	r7, #163	; 0xa3
 800aa70:	e785      	b.n	800a97e <__gethex+0x12a>
 800aa72:	1e73      	subs	r3, r6, #1
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	9303      	str	r3, [sp, #12]
 800aa78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d019      	beq.n	800aab4 <__gethex+0x260>
 800aa80:	f1bb 0f20 	cmp.w	fp, #32
 800aa84:	d107      	bne.n	800aa96 <__gethex+0x242>
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	9a00      	ldr	r2, [sp, #0]
 800aa8a:	f843 2b04 	str.w	r2, [r3], #4
 800aa8e:	9302      	str	r3, [sp, #8]
 800aa90:	2300      	movs	r3, #0
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	469b      	mov	fp, r3
 800aa96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa9a:	f7ff fec5 	bl	800a828 <__hexdig_fun>
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	f000 000f 	and.w	r0, r0, #15
 800aaa4:	fa00 f00b 	lsl.w	r0, r0, fp
 800aaa8:	4303      	orrs	r3, r0
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	f10b 0b04 	add.w	fp, fp, #4
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	e00d      	b.n	800aad0 <__gethex+0x27c>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	9a06      	ldr	r2, [sp, #24]
 800aab8:	4413      	add	r3, r2
 800aaba:	42bb      	cmp	r3, r7
 800aabc:	d3e0      	bcc.n	800aa80 <__gethex+0x22c>
 800aabe:	4618      	mov	r0, r3
 800aac0:	9901      	ldr	r1, [sp, #4]
 800aac2:	9307      	str	r3, [sp, #28]
 800aac4:	4652      	mov	r2, sl
 800aac6:	f001 fc93 	bl	800c3f0 <strncmp>
 800aaca:	9b07      	ldr	r3, [sp, #28]
 800aacc:	2800      	cmp	r0, #0
 800aace:	d1d7      	bne.n	800aa80 <__gethex+0x22c>
 800aad0:	461e      	mov	r6, r3
 800aad2:	e78b      	b.n	800a9ec <__gethex+0x198>
 800aad4:	f04f 0a03 	mov.w	sl, #3
 800aad8:	e7b8      	b.n	800aa4c <__gethex+0x1f8>
 800aada:	da0a      	bge.n	800aaf2 <__gethex+0x29e>
 800aadc:	1a37      	subs	r7, r6, r0
 800aade:	4621      	mov	r1, r4
 800aae0:	ee18 0a10 	vmov	r0, s16
 800aae4:	463a      	mov	r2, r7
 800aae6:	f000 fc49 	bl	800b37c <__lshift>
 800aaea:	1bed      	subs	r5, r5, r7
 800aaec:	4604      	mov	r4, r0
 800aaee:	f100 0914 	add.w	r9, r0, #20
 800aaf2:	f04f 0a00 	mov.w	sl, #0
 800aaf6:	e7ae      	b.n	800aa56 <__gethex+0x202>
 800aaf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aafc:	42a8      	cmp	r0, r5
 800aafe:	dd72      	ble.n	800abe6 <__gethex+0x392>
 800ab00:	1b45      	subs	r5, r0, r5
 800ab02:	42ae      	cmp	r6, r5
 800ab04:	dc36      	bgt.n	800ab74 <__gethex+0x320>
 800ab06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d02a      	beq.n	800ab64 <__gethex+0x310>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d02c      	beq.n	800ab6c <__gethex+0x318>
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d11c      	bne.n	800ab50 <__gethex+0x2fc>
 800ab16:	42ae      	cmp	r6, r5
 800ab18:	d11a      	bne.n	800ab50 <__gethex+0x2fc>
 800ab1a:	2e01      	cmp	r6, #1
 800ab1c:	d112      	bne.n	800ab44 <__gethex+0x2f0>
 800ab1e:	9a04      	ldr	r2, [sp, #16]
 800ab20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	2301      	movs	r3, #1
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	f8c9 3000 	str.w	r3, [r9]
 800ab2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab30:	2762      	movs	r7, #98	; 0x62
 800ab32:	601c      	str	r4, [r3, #0]
 800ab34:	e723      	b.n	800a97e <__gethex+0x12a>
 800ab36:	bf00      	nop
 800ab38:	0800d3e0 	.word	0x0800d3e0
 800ab3c:	0800d367 	.word	0x0800d367
 800ab40:	0800d378 	.word	0x0800d378
 800ab44:	1e71      	subs	r1, r6, #1
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fe59 	bl	800b7fe <__any_on>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d1e6      	bne.n	800ab1e <__gethex+0x2ca>
 800ab50:	ee18 0a10 	vmov	r0, s16
 800ab54:	4621      	mov	r1, r4
 800ab56:	f000 f9f5 	bl	800af44 <_Bfree>
 800ab5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	2750      	movs	r7, #80	; 0x50
 800ab62:	e70c      	b.n	800a97e <__gethex+0x12a>
 800ab64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1f2      	bne.n	800ab50 <__gethex+0x2fc>
 800ab6a:	e7d8      	b.n	800ab1e <__gethex+0x2ca>
 800ab6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1d5      	bne.n	800ab1e <__gethex+0x2ca>
 800ab72:	e7ed      	b.n	800ab50 <__gethex+0x2fc>
 800ab74:	1e6f      	subs	r7, r5, #1
 800ab76:	f1ba 0f00 	cmp.w	sl, #0
 800ab7a:	d131      	bne.n	800abe0 <__gethex+0x38c>
 800ab7c:	b127      	cbz	r7, 800ab88 <__gethex+0x334>
 800ab7e:	4639      	mov	r1, r7
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fe3c 	bl	800b7fe <__any_on>
 800ab86:	4682      	mov	sl, r0
 800ab88:	117b      	asrs	r3, r7, #5
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab90:	f007 071f 	and.w	r7, r7, #31
 800ab94:	fa01 f707 	lsl.w	r7, r1, r7
 800ab98:	421f      	tst	r7, r3
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bf18      	it	ne
 800aba0:	f04a 0a02 	orrne.w	sl, sl, #2
 800aba4:	1b76      	subs	r6, r6, r5
 800aba6:	f7ff fded 	bl	800a784 <rshift>
 800abaa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abae:	2702      	movs	r7, #2
 800abb0:	f1ba 0f00 	cmp.w	sl, #0
 800abb4:	d048      	beq.n	800ac48 <__gethex+0x3f4>
 800abb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d015      	beq.n	800abea <__gethex+0x396>
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d017      	beq.n	800abf2 <__gethex+0x39e>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d109      	bne.n	800abda <__gethex+0x386>
 800abc6:	f01a 0f02 	tst.w	sl, #2
 800abca:	d006      	beq.n	800abda <__gethex+0x386>
 800abcc:	f8d9 0000 	ldr.w	r0, [r9]
 800abd0:	ea4a 0a00 	orr.w	sl, sl, r0
 800abd4:	f01a 0f01 	tst.w	sl, #1
 800abd8:	d10e      	bne.n	800abf8 <__gethex+0x3a4>
 800abda:	f047 0710 	orr.w	r7, r7, #16
 800abde:	e033      	b.n	800ac48 <__gethex+0x3f4>
 800abe0:	f04f 0a01 	mov.w	sl, #1
 800abe4:	e7d0      	b.n	800ab88 <__gethex+0x334>
 800abe6:	2701      	movs	r7, #1
 800abe8:	e7e2      	b.n	800abb0 <__gethex+0x35c>
 800abea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abec:	f1c3 0301 	rsb	r3, r3, #1
 800abf0:	9315      	str	r3, [sp, #84]	; 0x54
 800abf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0f0      	beq.n	800abda <__gethex+0x386>
 800abf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abfc:	f104 0314 	add.w	r3, r4, #20
 800ac00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac08:	f04f 0c00 	mov.w	ip, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac12:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac16:	d01c      	beq.n	800ac52 <__gethex+0x3fe>
 800ac18:	3201      	adds	r2, #1
 800ac1a:	6002      	str	r2, [r0, #0]
 800ac1c:	2f02      	cmp	r7, #2
 800ac1e:	f104 0314 	add.w	r3, r4, #20
 800ac22:	d13f      	bne.n	800aca4 <__gethex+0x450>
 800ac24:	f8d8 2000 	ldr.w	r2, [r8]
 800ac28:	3a01      	subs	r2, #1
 800ac2a:	42b2      	cmp	r2, r6
 800ac2c:	d10a      	bne.n	800ac44 <__gethex+0x3f0>
 800ac2e:	1171      	asrs	r1, r6, #5
 800ac30:	2201      	movs	r2, #1
 800ac32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac36:	f006 061f 	and.w	r6, r6, #31
 800ac3a:	fa02 f606 	lsl.w	r6, r2, r6
 800ac3e:	421e      	tst	r6, r3
 800ac40:	bf18      	it	ne
 800ac42:	4617      	movne	r7, r2
 800ac44:	f047 0720 	orr.w	r7, r7, #32
 800ac48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac4a:	601c      	str	r4, [r3, #0]
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	601d      	str	r5, [r3, #0]
 800ac50:	e695      	b.n	800a97e <__gethex+0x12a>
 800ac52:	4299      	cmp	r1, r3
 800ac54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac58:	d8d8      	bhi.n	800ac0c <__gethex+0x3b8>
 800ac5a:	68a3      	ldr	r3, [r4, #8]
 800ac5c:	459b      	cmp	fp, r3
 800ac5e:	db19      	blt.n	800ac94 <__gethex+0x440>
 800ac60:	6861      	ldr	r1, [r4, #4]
 800ac62:	ee18 0a10 	vmov	r0, s16
 800ac66:	3101      	adds	r1, #1
 800ac68:	f000 f92c 	bl	800aec4 <_Balloc>
 800ac6c:	4681      	mov	r9, r0
 800ac6e:	b918      	cbnz	r0, 800ac78 <__gethex+0x424>
 800ac70:	4b1a      	ldr	r3, [pc, #104]	; (800acdc <__gethex+0x488>)
 800ac72:	4602      	mov	r2, r0
 800ac74:	2184      	movs	r1, #132	; 0x84
 800ac76:	e6a8      	b.n	800a9ca <__gethex+0x176>
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	3202      	adds	r2, #2
 800ac7c:	f104 010c 	add.w	r1, r4, #12
 800ac80:	0092      	lsls	r2, r2, #2
 800ac82:	300c      	adds	r0, #12
 800ac84:	f7fd f9d6 	bl	8008034 <memcpy>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	ee18 0a10 	vmov	r0, s16
 800ac8e:	f000 f959 	bl	800af44 <_Bfree>
 800ac92:	464c      	mov	r4, r9
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac9c:	6122      	str	r2, [r4, #16]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	615a      	str	r2, [r3, #20]
 800aca2:	e7bb      	b.n	800ac1c <__gethex+0x3c8>
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	455a      	cmp	r2, fp
 800aca8:	dd0b      	ble.n	800acc2 <__gethex+0x46e>
 800acaa:	2101      	movs	r1, #1
 800acac:	4620      	mov	r0, r4
 800acae:	f7ff fd69 	bl	800a784 <rshift>
 800acb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acb6:	3501      	adds	r5, #1
 800acb8:	42ab      	cmp	r3, r5
 800acba:	f6ff aed0 	blt.w	800aa5e <__gethex+0x20a>
 800acbe:	2701      	movs	r7, #1
 800acc0:	e7c0      	b.n	800ac44 <__gethex+0x3f0>
 800acc2:	f016 061f 	ands.w	r6, r6, #31
 800acc6:	d0fa      	beq.n	800acbe <__gethex+0x46a>
 800acc8:	4453      	add	r3, sl
 800acca:	f1c6 0620 	rsb	r6, r6, #32
 800acce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800acd2:	f000 f9e9 	bl	800b0a8 <__hi0bits>
 800acd6:	42b0      	cmp	r0, r6
 800acd8:	dbe7      	blt.n	800acaa <__gethex+0x456>
 800acda:	e7f0      	b.n	800acbe <__gethex+0x46a>
 800acdc:	0800d367 	.word	0x0800d367

0800ace0 <L_shift>:
 800ace0:	f1c2 0208 	rsb	r2, r2, #8
 800ace4:	0092      	lsls	r2, r2, #2
 800ace6:	b570      	push	{r4, r5, r6, lr}
 800ace8:	f1c2 0620 	rsb	r6, r2, #32
 800acec:	6843      	ldr	r3, [r0, #4]
 800acee:	6804      	ldr	r4, [r0, #0]
 800acf0:	fa03 f506 	lsl.w	r5, r3, r6
 800acf4:	432c      	orrs	r4, r5
 800acf6:	40d3      	lsrs	r3, r2
 800acf8:	6004      	str	r4, [r0, #0]
 800acfa:	f840 3f04 	str.w	r3, [r0, #4]!
 800acfe:	4288      	cmp	r0, r1
 800ad00:	d3f4      	bcc.n	800acec <L_shift+0xc>
 800ad02:	bd70      	pop	{r4, r5, r6, pc}

0800ad04 <__match>:
 800ad04:	b530      	push	{r4, r5, lr}
 800ad06:	6803      	ldr	r3, [r0, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad0e:	b914      	cbnz	r4, 800ad16 <__match+0x12>
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	2001      	movs	r0, #1
 800ad14:	bd30      	pop	{r4, r5, pc}
 800ad16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad1e:	2d19      	cmp	r5, #25
 800ad20:	bf98      	it	ls
 800ad22:	3220      	addls	r2, #32
 800ad24:	42a2      	cmp	r2, r4
 800ad26:	d0f0      	beq.n	800ad0a <__match+0x6>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7f3      	b.n	800ad14 <__match+0x10>

0800ad2c <__hexnan>:
 800ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	680b      	ldr	r3, [r1, #0]
 800ad32:	115e      	asrs	r6, r3, #5
 800ad34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad38:	f013 031f 	ands.w	r3, r3, #31
 800ad3c:	b087      	sub	sp, #28
 800ad3e:	bf18      	it	ne
 800ad40:	3604      	addne	r6, #4
 800ad42:	2500      	movs	r5, #0
 800ad44:	1f37      	subs	r7, r6, #4
 800ad46:	4690      	mov	r8, r2
 800ad48:	6802      	ldr	r2, [r0, #0]
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad52:	46b9      	mov	r9, r7
 800ad54:	463c      	mov	r4, r7
 800ad56:	9502      	str	r5, [sp, #8]
 800ad58:	46ab      	mov	fp, r5
 800ad5a:	7851      	ldrb	r1, [r2, #1]
 800ad5c:	1c53      	adds	r3, r2, #1
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	b341      	cbz	r1, 800adb4 <__hexnan+0x88>
 800ad62:	4608      	mov	r0, r1
 800ad64:	9205      	str	r2, [sp, #20]
 800ad66:	9104      	str	r1, [sp, #16]
 800ad68:	f7ff fd5e 	bl	800a828 <__hexdig_fun>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d14f      	bne.n	800ae10 <__hexnan+0xe4>
 800ad70:	9904      	ldr	r1, [sp, #16]
 800ad72:	9a05      	ldr	r2, [sp, #20]
 800ad74:	2920      	cmp	r1, #32
 800ad76:	d818      	bhi.n	800adaa <__hexnan+0x7e>
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	459b      	cmp	fp, r3
 800ad7c:	dd13      	ble.n	800ada6 <__hexnan+0x7a>
 800ad7e:	454c      	cmp	r4, r9
 800ad80:	d206      	bcs.n	800ad90 <__hexnan+0x64>
 800ad82:	2d07      	cmp	r5, #7
 800ad84:	dc04      	bgt.n	800ad90 <__hexnan+0x64>
 800ad86:	462a      	mov	r2, r5
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7ff ffa8 	bl	800ace0 <L_shift>
 800ad90:	4544      	cmp	r4, r8
 800ad92:	d950      	bls.n	800ae36 <__hexnan+0x10a>
 800ad94:	2300      	movs	r3, #0
 800ad96:	f1a4 0904 	sub.w	r9, r4, #4
 800ad9a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad9e:	f8cd b008 	str.w	fp, [sp, #8]
 800ada2:	464c      	mov	r4, r9
 800ada4:	461d      	mov	r5, r3
 800ada6:	9a03      	ldr	r2, [sp, #12]
 800ada8:	e7d7      	b.n	800ad5a <__hexnan+0x2e>
 800adaa:	2929      	cmp	r1, #41	; 0x29
 800adac:	d156      	bne.n	800ae5c <__hexnan+0x130>
 800adae:	3202      	adds	r2, #2
 800adb0:	f8ca 2000 	str.w	r2, [sl]
 800adb4:	f1bb 0f00 	cmp.w	fp, #0
 800adb8:	d050      	beq.n	800ae5c <__hexnan+0x130>
 800adba:	454c      	cmp	r4, r9
 800adbc:	d206      	bcs.n	800adcc <__hexnan+0xa0>
 800adbe:	2d07      	cmp	r5, #7
 800adc0:	dc04      	bgt.n	800adcc <__hexnan+0xa0>
 800adc2:	462a      	mov	r2, r5
 800adc4:	4649      	mov	r1, r9
 800adc6:	4620      	mov	r0, r4
 800adc8:	f7ff ff8a 	bl	800ace0 <L_shift>
 800adcc:	4544      	cmp	r4, r8
 800adce:	d934      	bls.n	800ae3a <__hexnan+0x10e>
 800add0:	f1a8 0204 	sub.w	r2, r8, #4
 800add4:	4623      	mov	r3, r4
 800add6:	f853 1b04 	ldr.w	r1, [r3], #4
 800adda:	f842 1f04 	str.w	r1, [r2, #4]!
 800adde:	429f      	cmp	r7, r3
 800ade0:	d2f9      	bcs.n	800add6 <__hexnan+0xaa>
 800ade2:	1b3b      	subs	r3, r7, r4
 800ade4:	f023 0303 	bic.w	r3, r3, #3
 800ade8:	3304      	adds	r3, #4
 800adea:	3401      	adds	r4, #1
 800adec:	3e03      	subs	r6, #3
 800adee:	42b4      	cmp	r4, r6
 800adf0:	bf88      	it	hi
 800adf2:	2304      	movhi	r3, #4
 800adf4:	4443      	add	r3, r8
 800adf6:	2200      	movs	r2, #0
 800adf8:	f843 2b04 	str.w	r2, [r3], #4
 800adfc:	429f      	cmp	r7, r3
 800adfe:	d2fb      	bcs.n	800adf8 <__hexnan+0xcc>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	b91b      	cbnz	r3, 800ae0c <__hexnan+0xe0>
 800ae04:	4547      	cmp	r7, r8
 800ae06:	d127      	bne.n	800ae58 <__hexnan+0x12c>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	603b      	str	r3, [r7, #0]
 800ae0c:	2005      	movs	r0, #5
 800ae0e:	e026      	b.n	800ae5e <__hexnan+0x132>
 800ae10:	3501      	adds	r5, #1
 800ae12:	2d08      	cmp	r5, #8
 800ae14:	f10b 0b01 	add.w	fp, fp, #1
 800ae18:	dd06      	ble.n	800ae28 <__hexnan+0xfc>
 800ae1a:	4544      	cmp	r4, r8
 800ae1c:	d9c3      	bls.n	800ada6 <__hexnan+0x7a>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae24:	2501      	movs	r5, #1
 800ae26:	3c04      	subs	r4, #4
 800ae28:	6822      	ldr	r2, [r4, #0]
 800ae2a:	f000 000f 	and.w	r0, r0, #15
 800ae2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae32:	6022      	str	r2, [r4, #0]
 800ae34:	e7b7      	b.n	800ada6 <__hexnan+0x7a>
 800ae36:	2508      	movs	r5, #8
 800ae38:	e7b5      	b.n	800ada6 <__hexnan+0x7a>
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0df      	beq.n	800ae00 <__hexnan+0xd4>
 800ae40:	f04f 32ff 	mov.w	r2, #4294967295
 800ae44:	f1c3 0320 	rsb	r3, r3, #32
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae50:	401a      	ands	r2, r3
 800ae52:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae56:	e7d3      	b.n	800ae00 <__hexnan+0xd4>
 800ae58:	3f04      	subs	r7, #4
 800ae5a:	e7d1      	b.n	800ae00 <__hexnan+0xd4>
 800ae5c:	2004      	movs	r0, #4
 800ae5e:	b007      	add	sp, #28
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae64 <_localeconv_r>:
 800ae64:	4800      	ldr	r0, [pc, #0]	; (800ae68 <_localeconv_r+0x4>)
 800ae66:	4770      	bx	lr
 800ae68:	200001b0 	.word	0x200001b0

0800ae6c <_lseek_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	; (800ae8c <_lseek_r+0x20>)
 800ae70:	4604      	mov	r4, r0
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	2200      	movs	r2, #0
 800ae78:	602a      	str	r2, [r5, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f7f7 fe8c 	bl	8002b98 <_lseek>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_lseek_r+0x1e>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_lseek_r+0x1e>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	200008dc 	.word	0x200008dc

0800ae90 <malloc>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <malloc+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f000 bd55 	b.w	800b944 <_malloc_r>
 800ae9a:	bf00      	nop
 800ae9c:	20000058 	.word	0x20000058

0800aea0 <__ascii_mbtowc>:
 800aea0:	b082      	sub	sp, #8
 800aea2:	b901      	cbnz	r1, 800aea6 <__ascii_mbtowc+0x6>
 800aea4:	a901      	add	r1, sp, #4
 800aea6:	b142      	cbz	r2, 800aeba <__ascii_mbtowc+0x1a>
 800aea8:	b14b      	cbz	r3, 800aebe <__ascii_mbtowc+0x1e>
 800aeaa:	7813      	ldrb	r3, [r2, #0]
 800aeac:	600b      	str	r3, [r1, #0]
 800aeae:	7812      	ldrb	r2, [r2, #0]
 800aeb0:	1e10      	subs	r0, r2, #0
 800aeb2:	bf18      	it	ne
 800aeb4:	2001      	movne	r0, #1
 800aeb6:	b002      	add	sp, #8
 800aeb8:	4770      	bx	lr
 800aeba:	4610      	mov	r0, r2
 800aebc:	e7fb      	b.n	800aeb6 <__ascii_mbtowc+0x16>
 800aebe:	f06f 0001 	mvn.w	r0, #1
 800aec2:	e7f8      	b.n	800aeb6 <__ascii_mbtowc+0x16>

0800aec4 <_Balloc>:
 800aec4:	b570      	push	{r4, r5, r6, lr}
 800aec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aec8:	4604      	mov	r4, r0
 800aeca:	460d      	mov	r5, r1
 800aecc:	b976      	cbnz	r6, 800aeec <_Balloc+0x28>
 800aece:	2010      	movs	r0, #16
 800aed0:	f7ff ffde 	bl	800ae90 <malloc>
 800aed4:	4602      	mov	r2, r0
 800aed6:	6260      	str	r0, [r4, #36]	; 0x24
 800aed8:	b920      	cbnz	r0, 800aee4 <_Balloc+0x20>
 800aeda:	4b18      	ldr	r3, [pc, #96]	; (800af3c <_Balloc+0x78>)
 800aedc:	4818      	ldr	r0, [pc, #96]	; (800af40 <_Balloc+0x7c>)
 800aede:	2166      	movs	r1, #102	; 0x66
 800aee0:	f001 fb56 	bl	800c590 <__assert_func>
 800aee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aee8:	6006      	str	r6, [r0, #0]
 800aeea:	60c6      	str	r6, [r0, #12]
 800aeec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeee:	68f3      	ldr	r3, [r6, #12]
 800aef0:	b183      	cbz	r3, 800af14 <_Balloc+0x50>
 800aef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aefa:	b9b8      	cbnz	r0, 800af2c <_Balloc+0x68>
 800aefc:	2101      	movs	r1, #1
 800aefe:	fa01 f605 	lsl.w	r6, r1, r5
 800af02:	1d72      	adds	r2, r6, #5
 800af04:	0092      	lsls	r2, r2, #2
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fc9a 	bl	800b840 <_calloc_r>
 800af0c:	b160      	cbz	r0, 800af28 <_Balloc+0x64>
 800af0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af12:	e00e      	b.n	800af32 <_Balloc+0x6e>
 800af14:	2221      	movs	r2, #33	; 0x21
 800af16:	2104      	movs	r1, #4
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fc91 	bl	800b840 <_calloc_r>
 800af1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af20:	60f0      	str	r0, [r6, #12]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e4      	bne.n	800aef2 <_Balloc+0x2e>
 800af28:	2000      	movs	r0, #0
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	6802      	ldr	r2, [r0, #0]
 800af2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af32:	2300      	movs	r3, #0
 800af34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af38:	e7f7      	b.n	800af2a <_Balloc+0x66>
 800af3a:	bf00      	nop
 800af3c:	0800d2f5 	.word	0x0800d2f5
 800af40:	0800d3f4 	.word	0x0800d3f4

0800af44 <_Bfree>:
 800af44:	b570      	push	{r4, r5, r6, lr}
 800af46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af48:	4605      	mov	r5, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	b976      	cbnz	r6, 800af6c <_Bfree+0x28>
 800af4e:	2010      	movs	r0, #16
 800af50:	f7ff ff9e 	bl	800ae90 <malloc>
 800af54:	4602      	mov	r2, r0
 800af56:	6268      	str	r0, [r5, #36]	; 0x24
 800af58:	b920      	cbnz	r0, 800af64 <_Bfree+0x20>
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <_Bfree+0x3c>)
 800af5c:	4809      	ldr	r0, [pc, #36]	; (800af84 <_Bfree+0x40>)
 800af5e:	218a      	movs	r1, #138	; 0x8a
 800af60:	f001 fb16 	bl	800c590 <__assert_func>
 800af64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af68:	6006      	str	r6, [r0, #0]
 800af6a:	60c6      	str	r6, [r0, #12]
 800af6c:	b13c      	cbz	r4, 800af7e <_Bfree+0x3a>
 800af6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af70:	6862      	ldr	r2, [r4, #4]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af78:	6021      	str	r1, [r4, #0]
 800af7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	0800d2f5 	.word	0x0800d2f5
 800af84:	0800d3f4 	.word	0x0800d3f4

0800af88 <__multadd>:
 800af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	690d      	ldr	r5, [r1, #16]
 800af8e:	4607      	mov	r7, r0
 800af90:	460c      	mov	r4, r1
 800af92:	461e      	mov	r6, r3
 800af94:	f101 0c14 	add.w	ip, r1, #20
 800af98:	2000      	movs	r0, #0
 800af9a:	f8dc 3000 	ldr.w	r3, [ip]
 800af9e:	b299      	uxth	r1, r3
 800afa0:	fb02 6101 	mla	r1, r2, r1, r6
 800afa4:	0c1e      	lsrs	r6, r3, #16
 800afa6:	0c0b      	lsrs	r3, r1, #16
 800afa8:	fb02 3306 	mla	r3, r2, r6, r3
 800afac:	b289      	uxth	r1, r1
 800afae:	3001      	adds	r0, #1
 800afb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afb4:	4285      	cmp	r5, r0
 800afb6:	f84c 1b04 	str.w	r1, [ip], #4
 800afba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afbe:	dcec      	bgt.n	800af9a <__multadd+0x12>
 800afc0:	b30e      	cbz	r6, 800b006 <__multadd+0x7e>
 800afc2:	68a3      	ldr	r3, [r4, #8]
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	dc19      	bgt.n	800affc <__multadd+0x74>
 800afc8:	6861      	ldr	r1, [r4, #4]
 800afca:	4638      	mov	r0, r7
 800afcc:	3101      	adds	r1, #1
 800afce:	f7ff ff79 	bl	800aec4 <_Balloc>
 800afd2:	4680      	mov	r8, r0
 800afd4:	b928      	cbnz	r0, 800afe2 <__multadd+0x5a>
 800afd6:	4602      	mov	r2, r0
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <__multadd+0x84>)
 800afda:	480d      	ldr	r0, [pc, #52]	; (800b010 <__multadd+0x88>)
 800afdc:	21b5      	movs	r1, #181	; 0xb5
 800afde:	f001 fad7 	bl	800c590 <__assert_func>
 800afe2:	6922      	ldr	r2, [r4, #16]
 800afe4:	3202      	adds	r2, #2
 800afe6:	f104 010c 	add.w	r1, r4, #12
 800afea:	0092      	lsls	r2, r2, #2
 800afec:	300c      	adds	r0, #12
 800afee:	f7fd f821 	bl	8008034 <memcpy>
 800aff2:	4621      	mov	r1, r4
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7ff ffa5 	bl	800af44 <_Bfree>
 800affa:	4644      	mov	r4, r8
 800affc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b000:	3501      	adds	r5, #1
 800b002:	615e      	str	r6, [r3, #20]
 800b004:	6125      	str	r5, [r4, #16]
 800b006:	4620      	mov	r0, r4
 800b008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00c:	0800d367 	.word	0x0800d367
 800b010:	0800d3f4 	.word	0x0800d3f4

0800b014 <__s2b>:
 800b014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	4615      	mov	r5, r2
 800b01c:	461f      	mov	r7, r3
 800b01e:	2209      	movs	r2, #9
 800b020:	3308      	adds	r3, #8
 800b022:	4606      	mov	r6, r0
 800b024:	fb93 f3f2 	sdiv	r3, r3, r2
 800b028:	2100      	movs	r1, #0
 800b02a:	2201      	movs	r2, #1
 800b02c:	429a      	cmp	r2, r3
 800b02e:	db09      	blt.n	800b044 <__s2b+0x30>
 800b030:	4630      	mov	r0, r6
 800b032:	f7ff ff47 	bl	800aec4 <_Balloc>
 800b036:	b940      	cbnz	r0, 800b04a <__s2b+0x36>
 800b038:	4602      	mov	r2, r0
 800b03a:	4b19      	ldr	r3, [pc, #100]	; (800b0a0 <__s2b+0x8c>)
 800b03c:	4819      	ldr	r0, [pc, #100]	; (800b0a4 <__s2b+0x90>)
 800b03e:	21ce      	movs	r1, #206	; 0xce
 800b040:	f001 faa6 	bl	800c590 <__assert_func>
 800b044:	0052      	lsls	r2, r2, #1
 800b046:	3101      	adds	r1, #1
 800b048:	e7f0      	b.n	800b02c <__s2b+0x18>
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	6143      	str	r3, [r0, #20]
 800b04e:	2d09      	cmp	r5, #9
 800b050:	f04f 0301 	mov.w	r3, #1
 800b054:	6103      	str	r3, [r0, #16]
 800b056:	dd16      	ble.n	800b086 <__s2b+0x72>
 800b058:	f104 0909 	add.w	r9, r4, #9
 800b05c:	46c8      	mov	r8, r9
 800b05e:	442c      	add	r4, r5
 800b060:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b064:	4601      	mov	r1, r0
 800b066:	3b30      	subs	r3, #48	; 0x30
 800b068:	220a      	movs	r2, #10
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ff8c 	bl	800af88 <__multadd>
 800b070:	45a0      	cmp	r8, r4
 800b072:	d1f5      	bne.n	800b060 <__s2b+0x4c>
 800b074:	f1a5 0408 	sub.w	r4, r5, #8
 800b078:	444c      	add	r4, r9
 800b07a:	1b2d      	subs	r5, r5, r4
 800b07c:	1963      	adds	r3, r4, r5
 800b07e:	42bb      	cmp	r3, r7
 800b080:	db04      	blt.n	800b08c <__s2b+0x78>
 800b082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b086:	340a      	adds	r4, #10
 800b088:	2509      	movs	r5, #9
 800b08a:	e7f6      	b.n	800b07a <__s2b+0x66>
 800b08c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b090:	4601      	mov	r1, r0
 800b092:	3b30      	subs	r3, #48	; 0x30
 800b094:	220a      	movs	r2, #10
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ff76 	bl	800af88 <__multadd>
 800b09c:	e7ee      	b.n	800b07c <__s2b+0x68>
 800b09e:	bf00      	nop
 800b0a0:	0800d367 	.word	0x0800d367
 800b0a4:	0800d3f4 	.word	0x0800d3f4

0800b0a8 <__hi0bits>:
 800b0a8:	0c03      	lsrs	r3, r0, #16
 800b0aa:	041b      	lsls	r3, r3, #16
 800b0ac:	b9d3      	cbnz	r3, 800b0e4 <__hi0bits+0x3c>
 800b0ae:	0400      	lsls	r0, r0, #16
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0b6:	bf04      	itt	eq
 800b0b8:	0200      	lsleq	r0, r0, #8
 800b0ba:	3308      	addeq	r3, #8
 800b0bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0c0:	bf04      	itt	eq
 800b0c2:	0100      	lsleq	r0, r0, #4
 800b0c4:	3304      	addeq	r3, #4
 800b0c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0ca:	bf04      	itt	eq
 800b0cc:	0080      	lsleq	r0, r0, #2
 800b0ce:	3302      	addeq	r3, #2
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	db05      	blt.n	800b0e0 <__hi0bits+0x38>
 800b0d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0d8:	f103 0301 	add.w	r3, r3, #1
 800b0dc:	bf08      	it	eq
 800b0de:	2320      	moveq	r3, #32
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	4770      	bx	lr
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e7e4      	b.n	800b0b2 <__hi0bits+0xa>

0800b0e8 <__lo0bits>:
 800b0e8:	6803      	ldr	r3, [r0, #0]
 800b0ea:	f013 0207 	ands.w	r2, r3, #7
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	d00b      	beq.n	800b10a <__lo0bits+0x22>
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d423      	bmi.n	800b13e <__lo0bits+0x56>
 800b0f6:	0798      	lsls	r0, r3, #30
 800b0f8:	bf49      	itett	mi
 800b0fa:	085b      	lsrmi	r3, r3, #1
 800b0fc:	089b      	lsrpl	r3, r3, #2
 800b0fe:	2001      	movmi	r0, #1
 800b100:	600b      	strmi	r3, [r1, #0]
 800b102:	bf5c      	itt	pl
 800b104:	600b      	strpl	r3, [r1, #0]
 800b106:	2002      	movpl	r0, #2
 800b108:	4770      	bx	lr
 800b10a:	b298      	uxth	r0, r3
 800b10c:	b9a8      	cbnz	r0, 800b13a <__lo0bits+0x52>
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	2010      	movs	r0, #16
 800b112:	b2da      	uxtb	r2, r3
 800b114:	b90a      	cbnz	r2, 800b11a <__lo0bits+0x32>
 800b116:	3008      	adds	r0, #8
 800b118:	0a1b      	lsrs	r3, r3, #8
 800b11a:	071a      	lsls	r2, r3, #28
 800b11c:	bf04      	itt	eq
 800b11e:	091b      	lsreq	r3, r3, #4
 800b120:	3004      	addeq	r0, #4
 800b122:	079a      	lsls	r2, r3, #30
 800b124:	bf04      	itt	eq
 800b126:	089b      	lsreq	r3, r3, #2
 800b128:	3002      	addeq	r0, #2
 800b12a:	07da      	lsls	r2, r3, #31
 800b12c:	d403      	bmi.n	800b136 <__lo0bits+0x4e>
 800b12e:	085b      	lsrs	r3, r3, #1
 800b130:	f100 0001 	add.w	r0, r0, #1
 800b134:	d005      	beq.n	800b142 <__lo0bits+0x5a>
 800b136:	600b      	str	r3, [r1, #0]
 800b138:	4770      	bx	lr
 800b13a:	4610      	mov	r0, r2
 800b13c:	e7e9      	b.n	800b112 <__lo0bits+0x2a>
 800b13e:	2000      	movs	r0, #0
 800b140:	4770      	bx	lr
 800b142:	2020      	movs	r0, #32
 800b144:	4770      	bx	lr
	...

0800b148 <__i2b>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	460c      	mov	r4, r1
 800b14c:	2101      	movs	r1, #1
 800b14e:	f7ff feb9 	bl	800aec4 <_Balloc>
 800b152:	4602      	mov	r2, r0
 800b154:	b928      	cbnz	r0, 800b162 <__i2b+0x1a>
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <__i2b+0x24>)
 800b158:	4805      	ldr	r0, [pc, #20]	; (800b170 <__i2b+0x28>)
 800b15a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b15e:	f001 fa17 	bl	800c590 <__assert_func>
 800b162:	2301      	movs	r3, #1
 800b164:	6144      	str	r4, [r0, #20]
 800b166:	6103      	str	r3, [r0, #16]
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	0800d367 	.word	0x0800d367
 800b170:	0800d3f4 	.word	0x0800d3f4

0800b174 <__multiply>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	4691      	mov	r9, r2
 800b17a:	690a      	ldr	r2, [r1, #16]
 800b17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b180:	429a      	cmp	r2, r3
 800b182:	bfb8      	it	lt
 800b184:	460b      	movlt	r3, r1
 800b186:	460c      	mov	r4, r1
 800b188:	bfbc      	itt	lt
 800b18a:	464c      	movlt	r4, r9
 800b18c:	4699      	movlt	r9, r3
 800b18e:	6927      	ldr	r7, [r4, #16]
 800b190:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b194:	68a3      	ldr	r3, [r4, #8]
 800b196:	6861      	ldr	r1, [r4, #4]
 800b198:	eb07 060a 	add.w	r6, r7, sl
 800b19c:	42b3      	cmp	r3, r6
 800b19e:	b085      	sub	sp, #20
 800b1a0:	bfb8      	it	lt
 800b1a2:	3101      	addlt	r1, #1
 800b1a4:	f7ff fe8e 	bl	800aec4 <_Balloc>
 800b1a8:	b930      	cbnz	r0, 800b1b8 <__multiply+0x44>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	4b44      	ldr	r3, [pc, #272]	; (800b2c0 <__multiply+0x14c>)
 800b1ae:	4845      	ldr	r0, [pc, #276]	; (800b2c4 <__multiply+0x150>)
 800b1b0:	f240 115d 	movw	r1, #349	; 0x15d
 800b1b4:	f001 f9ec 	bl	800c590 <__assert_func>
 800b1b8:	f100 0514 	add.w	r5, r0, #20
 800b1bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1c0:	462b      	mov	r3, r5
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	4543      	cmp	r3, r8
 800b1c6:	d321      	bcc.n	800b20c <__multiply+0x98>
 800b1c8:	f104 0314 	add.w	r3, r4, #20
 800b1cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1d0:	f109 0314 	add.w	r3, r9, #20
 800b1d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1d8:	9202      	str	r2, [sp, #8]
 800b1da:	1b3a      	subs	r2, r7, r4
 800b1dc:	3a15      	subs	r2, #21
 800b1de:	f022 0203 	bic.w	r2, r2, #3
 800b1e2:	3204      	adds	r2, #4
 800b1e4:	f104 0115 	add.w	r1, r4, #21
 800b1e8:	428f      	cmp	r7, r1
 800b1ea:	bf38      	it	cc
 800b1ec:	2204      	movcc	r2, #4
 800b1ee:	9201      	str	r2, [sp, #4]
 800b1f0:	9a02      	ldr	r2, [sp, #8]
 800b1f2:	9303      	str	r3, [sp, #12]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d80c      	bhi.n	800b212 <__multiply+0x9e>
 800b1f8:	2e00      	cmp	r6, #0
 800b1fa:	dd03      	ble.n	800b204 <__multiply+0x90>
 800b1fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b200:	2b00      	cmp	r3, #0
 800b202:	d05a      	beq.n	800b2ba <__multiply+0x146>
 800b204:	6106      	str	r6, [r0, #16]
 800b206:	b005      	add	sp, #20
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20c:	f843 2b04 	str.w	r2, [r3], #4
 800b210:	e7d8      	b.n	800b1c4 <__multiply+0x50>
 800b212:	f8b3 a000 	ldrh.w	sl, [r3]
 800b216:	f1ba 0f00 	cmp.w	sl, #0
 800b21a:	d024      	beq.n	800b266 <__multiply+0xf2>
 800b21c:	f104 0e14 	add.w	lr, r4, #20
 800b220:	46a9      	mov	r9, r5
 800b222:	f04f 0c00 	mov.w	ip, #0
 800b226:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b22a:	f8d9 1000 	ldr.w	r1, [r9]
 800b22e:	fa1f fb82 	uxth.w	fp, r2
 800b232:	b289      	uxth	r1, r1
 800b234:	fb0a 110b 	mla	r1, sl, fp, r1
 800b238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b23c:	f8d9 2000 	ldr.w	r2, [r9]
 800b240:	4461      	add	r1, ip
 800b242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b246:	fb0a c20b 	mla	r2, sl, fp, ip
 800b24a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b24e:	b289      	uxth	r1, r1
 800b250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b254:	4577      	cmp	r7, lr
 800b256:	f849 1b04 	str.w	r1, [r9], #4
 800b25a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b25e:	d8e2      	bhi.n	800b226 <__multiply+0xb2>
 800b260:	9a01      	ldr	r2, [sp, #4]
 800b262:	f845 c002 	str.w	ip, [r5, r2]
 800b266:	9a03      	ldr	r2, [sp, #12]
 800b268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b26c:	3304      	adds	r3, #4
 800b26e:	f1b9 0f00 	cmp.w	r9, #0
 800b272:	d020      	beq.n	800b2b6 <__multiply+0x142>
 800b274:	6829      	ldr	r1, [r5, #0]
 800b276:	f104 0c14 	add.w	ip, r4, #20
 800b27a:	46ae      	mov	lr, r5
 800b27c:	f04f 0a00 	mov.w	sl, #0
 800b280:	f8bc b000 	ldrh.w	fp, [ip]
 800b284:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b288:	fb09 220b 	mla	r2, r9, fp, r2
 800b28c:	4492      	add	sl, r2
 800b28e:	b289      	uxth	r1, r1
 800b290:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b294:	f84e 1b04 	str.w	r1, [lr], #4
 800b298:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b29c:	f8be 1000 	ldrh.w	r1, [lr]
 800b2a0:	0c12      	lsrs	r2, r2, #16
 800b2a2:	fb09 1102 	mla	r1, r9, r2, r1
 800b2a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2aa:	4567      	cmp	r7, ip
 800b2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2b0:	d8e6      	bhi.n	800b280 <__multiply+0x10c>
 800b2b2:	9a01      	ldr	r2, [sp, #4]
 800b2b4:	50a9      	str	r1, [r5, r2]
 800b2b6:	3504      	adds	r5, #4
 800b2b8:	e79a      	b.n	800b1f0 <__multiply+0x7c>
 800b2ba:	3e01      	subs	r6, #1
 800b2bc:	e79c      	b.n	800b1f8 <__multiply+0x84>
 800b2be:	bf00      	nop
 800b2c0:	0800d367 	.word	0x0800d367
 800b2c4:	0800d3f4 	.word	0x0800d3f4

0800b2c8 <__pow5mult>:
 800b2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4615      	mov	r5, r2
 800b2ce:	f012 0203 	ands.w	r2, r2, #3
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	d007      	beq.n	800b2e8 <__pow5mult+0x20>
 800b2d8:	4c25      	ldr	r4, [pc, #148]	; (800b370 <__pow5mult+0xa8>)
 800b2da:	3a01      	subs	r2, #1
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2e2:	f7ff fe51 	bl	800af88 <__multadd>
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	10ad      	asrs	r5, r5, #2
 800b2ea:	d03d      	beq.n	800b368 <__pow5mult+0xa0>
 800b2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ee:	b97c      	cbnz	r4, 800b310 <__pow5mult+0x48>
 800b2f0:	2010      	movs	r0, #16
 800b2f2:	f7ff fdcd 	bl	800ae90 <malloc>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	6270      	str	r0, [r6, #36]	; 0x24
 800b2fa:	b928      	cbnz	r0, 800b308 <__pow5mult+0x40>
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <__pow5mult+0xac>)
 800b2fe:	481e      	ldr	r0, [pc, #120]	; (800b378 <__pow5mult+0xb0>)
 800b300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b304:	f001 f944 	bl	800c590 <__assert_func>
 800b308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b30c:	6004      	str	r4, [r0, #0]
 800b30e:	60c4      	str	r4, [r0, #12]
 800b310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b318:	b94c      	cbnz	r4, 800b32e <__pow5mult+0x66>
 800b31a:	f240 2171 	movw	r1, #625	; 0x271
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff ff12 	bl	800b148 <__i2b>
 800b324:	2300      	movs	r3, #0
 800b326:	f8c8 0008 	str.w	r0, [r8, #8]
 800b32a:	4604      	mov	r4, r0
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	f04f 0900 	mov.w	r9, #0
 800b332:	07eb      	lsls	r3, r5, #31
 800b334:	d50a      	bpl.n	800b34c <__pow5mult+0x84>
 800b336:	4639      	mov	r1, r7
 800b338:	4622      	mov	r2, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ff1a 	bl	800b174 <__multiply>
 800b340:	4639      	mov	r1, r7
 800b342:	4680      	mov	r8, r0
 800b344:	4630      	mov	r0, r6
 800b346:	f7ff fdfd 	bl	800af44 <_Bfree>
 800b34a:	4647      	mov	r7, r8
 800b34c:	106d      	asrs	r5, r5, #1
 800b34e:	d00b      	beq.n	800b368 <__pow5mult+0xa0>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	b938      	cbnz	r0, 800b364 <__pow5mult+0x9c>
 800b354:	4622      	mov	r2, r4
 800b356:	4621      	mov	r1, r4
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff ff0b 	bl	800b174 <__multiply>
 800b35e:	6020      	str	r0, [r4, #0]
 800b360:	f8c0 9000 	str.w	r9, [r0]
 800b364:	4604      	mov	r4, r0
 800b366:	e7e4      	b.n	800b332 <__pow5mult+0x6a>
 800b368:	4638      	mov	r0, r7
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	bf00      	nop
 800b370:	0800d540 	.word	0x0800d540
 800b374:	0800d2f5 	.word	0x0800d2f5
 800b378:	0800d3f4 	.word	0x0800d3f4

0800b37c <__lshift>:
 800b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	6849      	ldr	r1, [r1, #4]
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	4607      	mov	r7, r0
 800b38e:	4691      	mov	r9, r2
 800b390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b394:	f108 0601 	add.w	r6, r8, #1
 800b398:	42b3      	cmp	r3, r6
 800b39a:	db0b      	blt.n	800b3b4 <__lshift+0x38>
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff fd91 	bl	800aec4 <_Balloc>
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	b948      	cbnz	r0, 800b3ba <__lshift+0x3e>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <__lshift+0xd8>)
 800b3aa:	482b      	ldr	r0, [pc, #172]	; (800b458 <__lshift+0xdc>)
 800b3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3b0:	f001 f8ee 	bl	800c590 <__assert_func>
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	e7ee      	b.n	800b398 <__lshift+0x1c>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f100 0114 	add.w	r1, r0, #20
 800b3c0:	f100 0210 	add.w	r2, r0, #16
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	4553      	cmp	r3, sl
 800b3c8:	db37      	blt.n	800b43a <__lshift+0xbe>
 800b3ca:	6920      	ldr	r0, [r4, #16]
 800b3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d0:	f104 0314 	add.w	r3, r4, #20
 800b3d4:	f019 091f 	ands.w	r9, r9, #31
 800b3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3e0:	d02f      	beq.n	800b442 <__lshift+0xc6>
 800b3e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3e6:	468a      	mov	sl, r1
 800b3e8:	f04f 0c00 	mov.w	ip, #0
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	fa02 f209 	lsl.w	r2, r2, r9
 800b3f2:	ea42 020c 	orr.w	r2, r2, ip
 800b3f6:	f84a 2b04 	str.w	r2, [sl], #4
 800b3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fe:	4298      	cmp	r0, r3
 800b400:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b404:	d8f2      	bhi.n	800b3ec <__lshift+0x70>
 800b406:	1b03      	subs	r3, r0, r4
 800b408:	3b15      	subs	r3, #21
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	3304      	adds	r3, #4
 800b410:	f104 0215 	add.w	r2, r4, #21
 800b414:	4290      	cmp	r0, r2
 800b416:	bf38      	it	cc
 800b418:	2304      	movcc	r3, #4
 800b41a:	f841 c003 	str.w	ip, [r1, r3]
 800b41e:	f1bc 0f00 	cmp.w	ip, #0
 800b422:	d001      	beq.n	800b428 <__lshift+0xac>
 800b424:	f108 0602 	add.w	r6, r8, #2
 800b428:	3e01      	subs	r6, #1
 800b42a:	4638      	mov	r0, r7
 800b42c:	612e      	str	r6, [r5, #16]
 800b42e:	4621      	mov	r1, r4
 800b430:	f7ff fd88 	bl	800af44 <_Bfree>
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b43e:	3301      	adds	r3, #1
 800b440:	e7c1      	b.n	800b3c6 <__lshift+0x4a>
 800b442:	3904      	subs	r1, #4
 800b444:	f853 2b04 	ldr.w	r2, [r3], #4
 800b448:	f841 2f04 	str.w	r2, [r1, #4]!
 800b44c:	4298      	cmp	r0, r3
 800b44e:	d8f9      	bhi.n	800b444 <__lshift+0xc8>
 800b450:	e7ea      	b.n	800b428 <__lshift+0xac>
 800b452:	bf00      	nop
 800b454:	0800d367 	.word	0x0800d367
 800b458:	0800d3f4 	.word	0x0800d3f4

0800b45c <__mcmp>:
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	6902      	ldr	r2, [r0, #16]
 800b460:	690c      	ldr	r4, [r1, #16]
 800b462:	1b12      	subs	r2, r2, r4
 800b464:	d10e      	bne.n	800b484 <__mcmp+0x28>
 800b466:	f100 0314 	add.w	r3, r0, #20
 800b46a:	3114      	adds	r1, #20
 800b46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b47c:	42a5      	cmp	r5, r4
 800b47e:	d003      	beq.n	800b488 <__mcmp+0x2c>
 800b480:	d305      	bcc.n	800b48e <__mcmp+0x32>
 800b482:	2201      	movs	r2, #1
 800b484:	4610      	mov	r0, r2
 800b486:	bd30      	pop	{r4, r5, pc}
 800b488:	4283      	cmp	r3, r0
 800b48a:	d3f3      	bcc.n	800b474 <__mcmp+0x18>
 800b48c:	e7fa      	b.n	800b484 <__mcmp+0x28>
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	e7f7      	b.n	800b484 <__mcmp+0x28>

0800b494 <__mdiff>:
 800b494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460c      	mov	r4, r1
 800b49a:	4606      	mov	r6, r0
 800b49c:	4611      	mov	r1, r2
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4690      	mov	r8, r2
 800b4a2:	f7ff ffdb 	bl	800b45c <__mcmp>
 800b4a6:	1e05      	subs	r5, r0, #0
 800b4a8:	d110      	bne.n	800b4cc <__mdiff+0x38>
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fd09 	bl	800aec4 <_Balloc>
 800b4b2:	b930      	cbnz	r0, 800b4c2 <__mdiff+0x2e>
 800b4b4:	4b3a      	ldr	r3, [pc, #232]	; (800b5a0 <__mdiff+0x10c>)
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	f240 2132 	movw	r1, #562	; 0x232
 800b4bc:	4839      	ldr	r0, [pc, #228]	; (800b5a4 <__mdiff+0x110>)
 800b4be:	f001 f867 	bl	800c590 <__assert_func>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	bfa4      	itt	ge
 800b4ce:	4643      	movge	r3, r8
 800b4d0:	46a0      	movge	r8, r4
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4d8:	bfa6      	itte	ge
 800b4da:	461c      	movge	r4, r3
 800b4dc:	2500      	movge	r5, #0
 800b4de:	2501      	movlt	r5, #1
 800b4e0:	f7ff fcf0 	bl	800aec4 <_Balloc>
 800b4e4:	b920      	cbnz	r0, 800b4f0 <__mdiff+0x5c>
 800b4e6:	4b2e      	ldr	r3, [pc, #184]	; (800b5a0 <__mdiff+0x10c>)
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4ee:	e7e5      	b.n	800b4bc <__mdiff+0x28>
 800b4f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4f4:	6926      	ldr	r6, [r4, #16]
 800b4f6:	60c5      	str	r5, [r0, #12]
 800b4f8:	f104 0914 	add.w	r9, r4, #20
 800b4fc:	f108 0514 	add.w	r5, r8, #20
 800b500:	f100 0e14 	add.w	lr, r0, #20
 800b504:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b50c:	f108 0210 	add.w	r2, r8, #16
 800b510:	46f2      	mov	sl, lr
 800b512:	2100      	movs	r1, #0
 800b514:	f859 3b04 	ldr.w	r3, [r9], #4
 800b518:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b51c:	fa1f f883 	uxth.w	r8, r3
 800b520:	fa11 f18b 	uxtah	r1, r1, fp
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	eba1 0808 	sub.w	r8, r1, r8
 800b52a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b52e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b532:	fa1f f888 	uxth.w	r8, r8
 800b536:	1419      	asrs	r1, r3, #16
 800b538:	454e      	cmp	r6, r9
 800b53a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b53e:	f84a 3b04 	str.w	r3, [sl], #4
 800b542:	d8e7      	bhi.n	800b514 <__mdiff+0x80>
 800b544:	1b33      	subs	r3, r6, r4
 800b546:	3b15      	subs	r3, #21
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	3304      	adds	r3, #4
 800b54e:	3415      	adds	r4, #21
 800b550:	42a6      	cmp	r6, r4
 800b552:	bf38      	it	cc
 800b554:	2304      	movcc	r3, #4
 800b556:	441d      	add	r5, r3
 800b558:	4473      	add	r3, lr
 800b55a:	469e      	mov	lr, r3
 800b55c:	462e      	mov	r6, r5
 800b55e:	4566      	cmp	r6, ip
 800b560:	d30e      	bcc.n	800b580 <__mdiff+0xec>
 800b562:	f10c 0203 	add.w	r2, ip, #3
 800b566:	1b52      	subs	r2, r2, r5
 800b568:	f022 0203 	bic.w	r2, r2, #3
 800b56c:	3d03      	subs	r5, #3
 800b56e:	45ac      	cmp	ip, r5
 800b570:	bf38      	it	cc
 800b572:	2200      	movcc	r2, #0
 800b574:	441a      	add	r2, r3
 800b576:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b57a:	b17b      	cbz	r3, 800b59c <__mdiff+0x108>
 800b57c:	6107      	str	r7, [r0, #16]
 800b57e:	e7a3      	b.n	800b4c8 <__mdiff+0x34>
 800b580:	f856 8b04 	ldr.w	r8, [r6], #4
 800b584:	fa11 f288 	uxtah	r2, r1, r8
 800b588:	1414      	asrs	r4, r2, #16
 800b58a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b58e:	b292      	uxth	r2, r2
 800b590:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b594:	f84e 2b04 	str.w	r2, [lr], #4
 800b598:	1421      	asrs	r1, r4, #16
 800b59a:	e7e0      	b.n	800b55e <__mdiff+0xca>
 800b59c:	3f01      	subs	r7, #1
 800b59e:	e7ea      	b.n	800b576 <__mdiff+0xe2>
 800b5a0:	0800d367 	.word	0x0800d367
 800b5a4:	0800d3f4 	.word	0x0800d3f4

0800b5a8 <__ulp>:
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	ed8d 0b00 	vstr	d0, [sp]
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	4912      	ldr	r1, [pc, #72]	; (800b5fc <__ulp+0x54>)
 800b5b2:	4019      	ands	r1, r3
 800b5b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	dd05      	ble.n	800b5c8 <__ulp+0x20>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	ec43 2b10 	vmov	d0, r2, r3
 800b5c4:	b002      	add	sp, #8
 800b5c6:	4770      	bx	lr
 800b5c8:	4249      	negs	r1, r1
 800b5ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b5ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	da04      	bge.n	800b5e6 <__ulp+0x3e>
 800b5dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b5e0:	fa41 f300 	asr.w	r3, r1, r0
 800b5e4:	e7ec      	b.n	800b5c0 <__ulp+0x18>
 800b5e6:	f1a0 0114 	sub.w	r1, r0, #20
 800b5ea:	291e      	cmp	r1, #30
 800b5ec:	bfda      	itte	le
 800b5ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5f6:	2101      	movgt	r1, #1
 800b5f8:	460a      	mov	r2, r1
 800b5fa:	e7e1      	b.n	800b5c0 <__ulp+0x18>
 800b5fc:	7ff00000 	.word	0x7ff00000

0800b600 <__b2d>:
 800b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b602:	6905      	ldr	r5, [r0, #16]
 800b604:	f100 0714 	add.w	r7, r0, #20
 800b608:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b60c:	1f2e      	subs	r6, r5, #4
 800b60e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b612:	4620      	mov	r0, r4
 800b614:	f7ff fd48 	bl	800b0a8 <__hi0bits>
 800b618:	f1c0 0320 	rsb	r3, r0, #32
 800b61c:	280a      	cmp	r0, #10
 800b61e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b69c <__b2d+0x9c>
 800b622:	600b      	str	r3, [r1, #0]
 800b624:	dc14      	bgt.n	800b650 <__b2d+0x50>
 800b626:	f1c0 0e0b 	rsb	lr, r0, #11
 800b62a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b62e:	42b7      	cmp	r7, r6
 800b630:	ea41 030c 	orr.w	r3, r1, ip
 800b634:	bf34      	ite	cc
 800b636:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b63a:	2100      	movcs	r1, #0
 800b63c:	3015      	adds	r0, #21
 800b63e:	fa04 f000 	lsl.w	r0, r4, r0
 800b642:	fa21 f10e 	lsr.w	r1, r1, lr
 800b646:	ea40 0201 	orr.w	r2, r0, r1
 800b64a:	ec43 2b10 	vmov	d0, r2, r3
 800b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b650:	42b7      	cmp	r7, r6
 800b652:	bf3a      	itte	cc
 800b654:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b658:	f1a5 0608 	subcc.w	r6, r5, #8
 800b65c:	2100      	movcs	r1, #0
 800b65e:	380b      	subs	r0, #11
 800b660:	d017      	beq.n	800b692 <__b2d+0x92>
 800b662:	f1c0 0c20 	rsb	ip, r0, #32
 800b666:	fa04 f500 	lsl.w	r5, r4, r0
 800b66a:	42be      	cmp	r6, r7
 800b66c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b670:	ea45 0504 	orr.w	r5, r5, r4
 800b674:	bf8c      	ite	hi
 800b676:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b67a:	2400      	movls	r4, #0
 800b67c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b680:	fa01 f000 	lsl.w	r0, r1, r0
 800b684:	fa24 f40c 	lsr.w	r4, r4, ip
 800b688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b68c:	ea40 0204 	orr.w	r2, r0, r4
 800b690:	e7db      	b.n	800b64a <__b2d+0x4a>
 800b692:	ea44 030c 	orr.w	r3, r4, ip
 800b696:	460a      	mov	r2, r1
 800b698:	e7d7      	b.n	800b64a <__b2d+0x4a>
 800b69a:	bf00      	nop
 800b69c:	3ff00000 	.word	0x3ff00000

0800b6a0 <__d2b>:
 800b6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	ec57 6b10 	vmov	r6, r7, d0
 800b6ac:	4690      	mov	r8, r2
 800b6ae:	f7ff fc09 	bl	800aec4 <_Balloc>
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	b930      	cbnz	r0, 800b6c4 <__d2b+0x24>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b25      	ldr	r3, [pc, #148]	; (800b750 <__d2b+0xb0>)
 800b6ba:	4826      	ldr	r0, [pc, #152]	; (800b754 <__d2b+0xb4>)
 800b6bc:	f240 310a 	movw	r1, #778	; 0x30a
 800b6c0:	f000 ff66 	bl	800c590 <__assert_func>
 800b6c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6cc:	bb35      	cbnz	r5, 800b71c <__d2b+0x7c>
 800b6ce:	2e00      	cmp	r6, #0
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	d028      	beq.n	800b726 <__d2b+0x86>
 800b6d4:	4668      	mov	r0, sp
 800b6d6:	9600      	str	r6, [sp, #0]
 800b6d8:	f7ff fd06 	bl	800b0e8 <__lo0bits>
 800b6dc:	9900      	ldr	r1, [sp, #0]
 800b6de:	b300      	cbz	r0, 800b722 <__d2b+0x82>
 800b6e0:	9a01      	ldr	r2, [sp, #4]
 800b6e2:	f1c0 0320 	rsb	r3, r0, #32
 800b6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	40c2      	lsrs	r2, r0
 800b6ee:	6163      	str	r3, [r4, #20]
 800b6f0:	9201      	str	r2, [sp, #4]
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	61a3      	str	r3, [r4, #24]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bf14      	ite	ne
 800b6fa:	2202      	movne	r2, #2
 800b6fc:	2201      	moveq	r2, #1
 800b6fe:	6122      	str	r2, [r4, #16]
 800b700:	b1d5      	cbz	r5, 800b738 <__d2b+0x98>
 800b702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b706:	4405      	add	r5, r0
 800b708:	f8c9 5000 	str.w	r5, [r9]
 800b70c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b710:	f8c8 0000 	str.w	r0, [r8]
 800b714:	4620      	mov	r0, r4
 800b716:	b003      	add	sp, #12
 800b718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b71c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b720:	e7d5      	b.n	800b6ce <__d2b+0x2e>
 800b722:	6161      	str	r1, [r4, #20]
 800b724:	e7e5      	b.n	800b6f2 <__d2b+0x52>
 800b726:	a801      	add	r0, sp, #4
 800b728:	f7ff fcde 	bl	800b0e8 <__lo0bits>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	6163      	str	r3, [r4, #20]
 800b730:	2201      	movs	r2, #1
 800b732:	6122      	str	r2, [r4, #16]
 800b734:	3020      	adds	r0, #32
 800b736:	e7e3      	b.n	800b700 <__d2b+0x60>
 800b738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b73c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b740:	f8c9 0000 	str.w	r0, [r9]
 800b744:	6918      	ldr	r0, [r3, #16]
 800b746:	f7ff fcaf 	bl	800b0a8 <__hi0bits>
 800b74a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b74e:	e7df      	b.n	800b710 <__d2b+0x70>
 800b750:	0800d367 	.word	0x0800d367
 800b754:	0800d3f4 	.word	0x0800d3f4

0800b758 <__ratio>:
 800b758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4688      	mov	r8, r1
 800b75e:	4669      	mov	r1, sp
 800b760:	4681      	mov	r9, r0
 800b762:	f7ff ff4d 	bl	800b600 <__b2d>
 800b766:	a901      	add	r1, sp, #4
 800b768:	4640      	mov	r0, r8
 800b76a:	ec55 4b10 	vmov	r4, r5, d0
 800b76e:	ee10 aa10 	vmov	sl, s0
 800b772:	f7ff ff45 	bl	800b600 <__b2d>
 800b776:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b77a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b77e:	1a59      	subs	r1, r3, r1
 800b780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b78a:	ec57 6b10 	vmov	r6, r7, d0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bfd6      	itet	le
 800b792:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b796:	462a      	movgt	r2, r5
 800b798:	463a      	movle	r2, r7
 800b79a:	46ab      	mov	fp, r5
 800b79c:	bfd6      	itet	le
 800b79e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b7a2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b7a6:	ee00 3a90 	vmovle	s1, r3
 800b7aa:	ec4b ab17 	vmov	d7, sl, fp
 800b7ae:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b7b2:	b003      	add	sp, #12
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7b8 <__copybits>:
 800b7b8:	3901      	subs	r1, #1
 800b7ba:	b570      	push	{r4, r5, r6, lr}
 800b7bc:	1149      	asrs	r1, r1, #5
 800b7be:	6914      	ldr	r4, [r2, #16]
 800b7c0:	3101      	adds	r1, #1
 800b7c2:	f102 0314 	add.w	r3, r2, #20
 800b7c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7ce:	1f05      	subs	r5, r0, #4
 800b7d0:	42a3      	cmp	r3, r4
 800b7d2:	d30c      	bcc.n	800b7ee <__copybits+0x36>
 800b7d4:	1aa3      	subs	r3, r4, r2
 800b7d6:	3b11      	subs	r3, #17
 800b7d8:	f023 0303 	bic.w	r3, r3, #3
 800b7dc:	3211      	adds	r2, #17
 800b7de:	42a2      	cmp	r2, r4
 800b7e0:	bf88      	it	hi
 800b7e2:	2300      	movhi	r3, #0
 800b7e4:	4418      	add	r0, r3
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	4288      	cmp	r0, r1
 800b7ea:	d305      	bcc.n	800b7f8 <__copybits+0x40>
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7f6:	e7eb      	b.n	800b7d0 <__copybits+0x18>
 800b7f8:	f840 3b04 	str.w	r3, [r0], #4
 800b7fc:	e7f4      	b.n	800b7e8 <__copybits+0x30>

0800b7fe <__any_on>:
 800b7fe:	f100 0214 	add.w	r2, r0, #20
 800b802:	6900      	ldr	r0, [r0, #16]
 800b804:	114b      	asrs	r3, r1, #5
 800b806:	4298      	cmp	r0, r3
 800b808:	b510      	push	{r4, lr}
 800b80a:	db11      	blt.n	800b830 <__any_on+0x32>
 800b80c:	dd0a      	ble.n	800b824 <__any_on+0x26>
 800b80e:	f011 011f 	ands.w	r1, r1, #31
 800b812:	d007      	beq.n	800b824 <__any_on+0x26>
 800b814:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b818:	fa24 f001 	lsr.w	r0, r4, r1
 800b81c:	fa00 f101 	lsl.w	r1, r0, r1
 800b820:	428c      	cmp	r4, r1
 800b822:	d10b      	bne.n	800b83c <__any_on+0x3e>
 800b824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b828:	4293      	cmp	r3, r2
 800b82a:	d803      	bhi.n	800b834 <__any_on+0x36>
 800b82c:	2000      	movs	r0, #0
 800b82e:	bd10      	pop	{r4, pc}
 800b830:	4603      	mov	r3, r0
 800b832:	e7f7      	b.n	800b824 <__any_on+0x26>
 800b834:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b838:	2900      	cmp	r1, #0
 800b83a:	d0f5      	beq.n	800b828 <__any_on+0x2a>
 800b83c:	2001      	movs	r0, #1
 800b83e:	e7f6      	b.n	800b82e <__any_on+0x30>

0800b840 <_calloc_r>:
 800b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b842:	fba1 2402 	umull	r2, r4, r1, r2
 800b846:	b94c      	cbnz	r4, 800b85c <_calloc_r+0x1c>
 800b848:	4611      	mov	r1, r2
 800b84a:	9201      	str	r2, [sp, #4]
 800b84c:	f000 f87a 	bl	800b944 <_malloc_r>
 800b850:	9a01      	ldr	r2, [sp, #4]
 800b852:	4605      	mov	r5, r0
 800b854:	b930      	cbnz	r0, 800b864 <_calloc_r+0x24>
 800b856:	4628      	mov	r0, r5
 800b858:	b003      	add	sp, #12
 800b85a:	bd30      	pop	{r4, r5, pc}
 800b85c:	220c      	movs	r2, #12
 800b85e:	6002      	str	r2, [r0, #0]
 800b860:	2500      	movs	r5, #0
 800b862:	e7f8      	b.n	800b856 <_calloc_r+0x16>
 800b864:	4621      	mov	r1, r4
 800b866:	f7fc fbf3 	bl	8008050 <memset>
 800b86a:	e7f4      	b.n	800b856 <_calloc_r+0x16>

0800b86c <_free_r>:
 800b86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b86e:	2900      	cmp	r1, #0
 800b870:	d044      	beq.n	800b8fc <_free_r+0x90>
 800b872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b876:	9001      	str	r0, [sp, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f1a1 0404 	sub.w	r4, r1, #4
 800b87e:	bfb8      	it	lt
 800b880:	18e4      	addlt	r4, r4, r3
 800b882:	f001 f889 	bl	800c998 <__malloc_lock>
 800b886:	4a1e      	ldr	r2, [pc, #120]	; (800b900 <_free_r+0x94>)
 800b888:	9801      	ldr	r0, [sp, #4]
 800b88a:	6813      	ldr	r3, [r2, #0]
 800b88c:	b933      	cbnz	r3, 800b89c <_free_r+0x30>
 800b88e:	6063      	str	r3, [r4, #4]
 800b890:	6014      	str	r4, [r2, #0]
 800b892:	b003      	add	sp, #12
 800b894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b898:	f001 b884 	b.w	800c9a4 <__malloc_unlock>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	d908      	bls.n	800b8b2 <_free_r+0x46>
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	1961      	adds	r1, r4, r5
 800b8a4:	428b      	cmp	r3, r1
 800b8a6:	bf01      	itttt	eq
 800b8a8:	6819      	ldreq	r1, [r3, #0]
 800b8aa:	685b      	ldreq	r3, [r3, #4]
 800b8ac:	1949      	addeq	r1, r1, r5
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	e7ed      	b.n	800b88e <_free_r+0x22>
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	b10b      	cbz	r3, 800b8bc <_free_r+0x50>
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	d9fa      	bls.n	800b8b2 <_free_r+0x46>
 800b8bc:	6811      	ldr	r1, [r2, #0]
 800b8be:	1855      	adds	r5, r2, r1
 800b8c0:	42a5      	cmp	r5, r4
 800b8c2:	d10b      	bne.n	800b8dc <_free_r+0x70>
 800b8c4:	6824      	ldr	r4, [r4, #0]
 800b8c6:	4421      	add	r1, r4
 800b8c8:	1854      	adds	r4, r2, r1
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	6011      	str	r1, [r2, #0]
 800b8ce:	d1e0      	bne.n	800b892 <_free_r+0x26>
 800b8d0:	681c      	ldr	r4, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	6053      	str	r3, [r2, #4]
 800b8d6:	4421      	add	r1, r4
 800b8d8:	6011      	str	r1, [r2, #0]
 800b8da:	e7da      	b.n	800b892 <_free_r+0x26>
 800b8dc:	d902      	bls.n	800b8e4 <_free_r+0x78>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	6003      	str	r3, [r0, #0]
 800b8e2:	e7d6      	b.n	800b892 <_free_r+0x26>
 800b8e4:	6825      	ldr	r5, [r4, #0]
 800b8e6:	1961      	adds	r1, r4, r5
 800b8e8:	428b      	cmp	r3, r1
 800b8ea:	bf04      	itt	eq
 800b8ec:	6819      	ldreq	r1, [r3, #0]
 800b8ee:	685b      	ldreq	r3, [r3, #4]
 800b8f0:	6063      	str	r3, [r4, #4]
 800b8f2:	bf04      	itt	eq
 800b8f4:	1949      	addeq	r1, r1, r5
 800b8f6:	6021      	streq	r1, [r4, #0]
 800b8f8:	6054      	str	r4, [r2, #4]
 800b8fa:	e7ca      	b.n	800b892 <_free_r+0x26>
 800b8fc:	b003      	add	sp, #12
 800b8fe:	bd30      	pop	{r4, r5, pc}
 800b900:	200008d4 	.word	0x200008d4

0800b904 <sbrk_aligned>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4e0e      	ldr	r6, [pc, #56]	; (800b940 <sbrk_aligned+0x3c>)
 800b908:	460c      	mov	r4, r1
 800b90a:	6831      	ldr	r1, [r6, #0]
 800b90c:	4605      	mov	r5, r0
 800b90e:	b911      	cbnz	r1, 800b916 <sbrk_aligned+0x12>
 800b910:	f000 fd26 	bl	800c360 <_sbrk_r>
 800b914:	6030      	str	r0, [r6, #0]
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 fd21 	bl	800c360 <_sbrk_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d00a      	beq.n	800b938 <sbrk_aligned+0x34>
 800b922:	1cc4      	adds	r4, r0, #3
 800b924:	f024 0403 	bic.w	r4, r4, #3
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d007      	beq.n	800b93c <sbrk_aligned+0x38>
 800b92c:	1a21      	subs	r1, r4, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f000 fd16 	bl	800c360 <_sbrk_r>
 800b934:	3001      	adds	r0, #1
 800b936:	d101      	bne.n	800b93c <sbrk_aligned+0x38>
 800b938:	f04f 34ff 	mov.w	r4, #4294967295
 800b93c:	4620      	mov	r0, r4
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	200008d8 	.word	0x200008d8

0800b944 <_malloc_r>:
 800b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b948:	1ccd      	adds	r5, r1, #3
 800b94a:	f025 0503 	bic.w	r5, r5, #3
 800b94e:	3508      	adds	r5, #8
 800b950:	2d0c      	cmp	r5, #12
 800b952:	bf38      	it	cc
 800b954:	250c      	movcc	r5, #12
 800b956:	2d00      	cmp	r5, #0
 800b958:	4607      	mov	r7, r0
 800b95a:	db01      	blt.n	800b960 <_malloc_r+0x1c>
 800b95c:	42a9      	cmp	r1, r5
 800b95e:	d905      	bls.n	800b96c <_malloc_r+0x28>
 800b960:	230c      	movs	r3, #12
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	2600      	movs	r6, #0
 800b966:	4630      	mov	r0, r6
 800b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b96c:	4e2e      	ldr	r6, [pc, #184]	; (800ba28 <_malloc_r+0xe4>)
 800b96e:	f001 f813 	bl	800c998 <__malloc_lock>
 800b972:	6833      	ldr	r3, [r6, #0]
 800b974:	461c      	mov	r4, r3
 800b976:	bb34      	cbnz	r4, 800b9c6 <_malloc_r+0x82>
 800b978:	4629      	mov	r1, r5
 800b97a:	4638      	mov	r0, r7
 800b97c:	f7ff ffc2 	bl	800b904 <sbrk_aligned>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	4604      	mov	r4, r0
 800b984:	d14d      	bne.n	800ba22 <_malloc_r+0xde>
 800b986:	6834      	ldr	r4, [r6, #0]
 800b988:	4626      	mov	r6, r4
 800b98a:	2e00      	cmp	r6, #0
 800b98c:	d140      	bne.n	800ba10 <_malloc_r+0xcc>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	4631      	mov	r1, r6
 800b992:	4638      	mov	r0, r7
 800b994:	eb04 0803 	add.w	r8, r4, r3
 800b998:	f000 fce2 	bl	800c360 <_sbrk_r>
 800b99c:	4580      	cmp	r8, r0
 800b99e:	d13a      	bne.n	800ba16 <_malloc_r+0xd2>
 800b9a0:	6821      	ldr	r1, [r4, #0]
 800b9a2:	3503      	adds	r5, #3
 800b9a4:	1a6d      	subs	r5, r5, r1
 800b9a6:	f025 0503 	bic.w	r5, r5, #3
 800b9aa:	3508      	adds	r5, #8
 800b9ac:	2d0c      	cmp	r5, #12
 800b9ae:	bf38      	it	cc
 800b9b0:	250c      	movcc	r5, #12
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	f7ff ffa5 	bl	800b904 <sbrk_aligned>
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	d02b      	beq.n	800ba16 <_malloc_r+0xd2>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	442b      	add	r3, r5
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	e00e      	b.n	800b9e4 <_malloc_r+0xa0>
 800b9c6:	6822      	ldr	r2, [r4, #0]
 800b9c8:	1b52      	subs	r2, r2, r5
 800b9ca:	d41e      	bmi.n	800ba0a <_malloc_r+0xc6>
 800b9cc:	2a0b      	cmp	r2, #11
 800b9ce:	d916      	bls.n	800b9fe <_malloc_r+0xba>
 800b9d0:	1961      	adds	r1, r4, r5
 800b9d2:	42a3      	cmp	r3, r4
 800b9d4:	6025      	str	r5, [r4, #0]
 800b9d6:	bf18      	it	ne
 800b9d8:	6059      	strne	r1, [r3, #4]
 800b9da:	6863      	ldr	r3, [r4, #4]
 800b9dc:	bf08      	it	eq
 800b9de:	6031      	streq	r1, [r6, #0]
 800b9e0:	5162      	str	r2, [r4, r5]
 800b9e2:	604b      	str	r3, [r1, #4]
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f104 060b 	add.w	r6, r4, #11
 800b9ea:	f000 ffdb 	bl	800c9a4 <__malloc_unlock>
 800b9ee:	f026 0607 	bic.w	r6, r6, #7
 800b9f2:	1d23      	adds	r3, r4, #4
 800b9f4:	1af2      	subs	r2, r6, r3
 800b9f6:	d0b6      	beq.n	800b966 <_malloc_r+0x22>
 800b9f8:	1b9b      	subs	r3, r3, r6
 800b9fa:	50a3      	str	r3, [r4, r2]
 800b9fc:	e7b3      	b.n	800b966 <_malloc_r+0x22>
 800b9fe:	6862      	ldr	r2, [r4, #4]
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	bf0c      	ite	eq
 800ba04:	6032      	streq	r2, [r6, #0]
 800ba06:	605a      	strne	r2, [r3, #4]
 800ba08:	e7ec      	b.n	800b9e4 <_malloc_r+0xa0>
 800ba0a:	4623      	mov	r3, r4
 800ba0c:	6864      	ldr	r4, [r4, #4]
 800ba0e:	e7b2      	b.n	800b976 <_malloc_r+0x32>
 800ba10:	4634      	mov	r4, r6
 800ba12:	6876      	ldr	r6, [r6, #4]
 800ba14:	e7b9      	b.n	800b98a <_malloc_r+0x46>
 800ba16:	230c      	movs	r3, #12
 800ba18:	603b      	str	r3, [r7, #0]
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	f000 ffc2 	bl	800c9a4 <__malloc_unlock>
 800ba20:	e7a1      	b.n	800b966 <_malloc_r+0x22>
 800ba22:	6025      	str	r5, [r4, #0]
 800ba24:	e7de      	b.n	800b9e4 <_malloc_r+0xa0>
 800ba26:	bf00      	nop
 800ba28:	200008d4 	.word	0x200008d4

0800ba2c <__ssputs_r>:
 800ba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	688e      	ldr	r6, [r1, #8]
 800ba32:	429e      	cmp	r6, r3
 800ba34:	4682      	mov	sl, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	4690      	mov	r8, r2
 800ba3a:	461f      	mov	r7, r3
 800ba3c:	d838      	bhi.n	800bab0 <__ssputs_r+0x84>
 800ba3e:	898a      	ldrh	r2, [r1, #12]
 800ba40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba44:	d032      	beq.n	800baac <__ssputs_r+0x80>
 800ba46:	6825      	ldr	r5, [r4, #0]
 800ba48:	6909      	ldr	r1, [r1, #16]
 800ba4a:	eba5 0901 	sub.w	r9, r5, r1
 800ba4e:	6965      	ldr	r5, [r4, #20]
 800ba50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba58:	3301      	adds	r3, #1
 800ba5a:	444b      	add	r3, r9
 800ba5c:	106d      	asrs	r5, r5, #1
 800ba5e:	429d      	cmp	r5, r3
 800ba60:	bf38      	it	cc
 800ba62:	461d      	movcc	r5, r3
 800ba64:	0553      	lsls	r3, r2, #21
 800ba66:	d531      	bpl.n	800bacc <__ssputs_r+0xa0>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7ff ff6b 	bl	800b944 <_malloc_r>
 800ba6e:	4606      	mov	r6, r0
 800ba70:	b950      	cbnz	r0, 800ba88 <__ssputs_r+0x5c>
 800ba72:	230c      	movs	r3, #12
 800ba74:	f8ca 3000 	str.w	r3, [sl]
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295
 800ba84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba88:	6921      	ldr	r1, [r4, #16]
 800ba8a:	464a      	mov	r2, r9
 800ba8c:	f7fc fad2 	bl	8008034 <memcpy>
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	6126      	str	r6, [r4, #16]
 800ba9e:	6165      	str	r5, [r4, #20]
 800baa0:	444e      	add	r6, r9
 800baa2:	eba5 0509 	sub.w	r5, r5, r9
 800baa6:	6026      	str	r6, [r4, #0]
 800baa8:	60a5      	str	r5, [r4, #8]
 800baaa:	463e      	mov	r6, r7
 800baac:	42be      	cmp	r6, r7
 800baae:	d900      	bls.n	800bab2 <__ssputs_r+0x86>
 800bab0:	463e      	mov	r6, r7
 800bab2:	6820      	ldr	r0, [r4, #0]
 800bab4:	4632      	mov	r2, r6
 800bab6:	4641      	mov	r1, r8
 800bab8:	f000 ff54 	bl	800c964 <memmove>
 800babc:	68a3      	ldr	r3, [r4, #8]
 800babe:	1b9b      	subs	r3, r3, r6
 800bac0:	60a3      	str	r3, [r4, #8]
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	4433      	add	r3, r6
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	2000      	movs	r0, #0
 800baca:	e7db      	b.n	800ba84 <__ssputs_r+0x58>
 800bacc:	462a      	mov	r2, r5
 800bace:	f000 ff6f 	bl	800c9b0 <_realloc_r>
 800bad2:	4606      	mov	r6, r0
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d1e1      	bne.n	800ba9c <__ssputs_r+0x70>
 800bad8:	6921      	ldr	r1, [r4, #16]
 800bada:	4650      	mov	r0, sl
 800badc:	f7ff fec6 	bl	800b86c <_free_r>
 800bae0:	e7c7      	b.n	800ba72 <__ssputs_r+0x46>
	...

0800bae4 <_svfiprintf_r>:
 800bae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	4698      	mov	r8, r3
 800baea:	898b      	ldrh	r3, [r1, #12]
 800baec:	061b      	lsls	r3, r3, #24
 800baee:	b09d      	sub	sp, #116	; 0x74
 800baf0:	4607      	mov	r7, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	4614      	mov	r4, r2
 800baf6:	d50e      	bpl.n	800bb16 <_svfiprintf_r+0x32>
 800baf8:	690b      	ldr	r3, [r1, #16]
 800bafa:	b963      	cbnz	r3, 800bb16 <_svfiprintf_r+0x32>
 800bafc:	2140      	movs	r1, #64	; 0x40
 800bafe:	f7ff ff21 	bl	800b944 <_malloc_r>
 800bb02:	6028      	str	r0, [r5, #0]
 800bb04:	6128      	str	r0, [r5, #16]
 800bb06:	b920      	cbnz	r0, 800bb12 <_svfiprintf_r+0x2e>
 800bb08:	230c      	movs	r3, #12
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	e0d1      	b.n	800bcb6 <_svfiprintf_r+0x1d2>
 800bb12:	2340      	movs	r3, #64	; 0x40
 800bb14:	616b      	str	r3, [r5, #20]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1a:	2320      	movs	r3, #32
 800bb1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb20:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb24:	2330      	movs	r3, #48	; 0x30
 800bb26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcd0 <_svfiprintf_r+0x1ec>
 800bb2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb2e:	f04f 0901 	mov.w	r9, #1
 800bb32:	4623      	mov	r3, r4
 800bb34:	469a      	mov	sl, r3
 800bb36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb3a:	b10a      	cbz	r2, 800bb40 <_svfiprintf_r+0x5c>
 800bb3c:	2a25      	cmp	r2, #37	; 0x25
 800bb3e:	d1f9      	bne.n	800bb34 <_svfiprintf_r+0x50>
 800bb40:	ebba 0b04 	subs.w	fp, sl, r4
 800bb44:	d00b      	beq.n	800bb5e <_svfiprintf_r+0x7a>
 800bb46:	465b      	mov	r3, fp
 800bb48:	4622      	mov	r2, r4
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f7ff ff6d 	bl	800ba2c <__ssputs_r>
 800bb52:	3001      	adds	r0, #1
 800bb54:	f000 80aa 	beq.w	800bcac <_svfiprintf_r+0x1c8>
 800bb58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb5a:	445a      	add	r2, fp
 800bb5c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 80a2 	beq.w	800bcac <_svfiprintf_r+0x1c8>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb72:	f10a 0a01 	add.w	sl, sl, #1
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	9307      	str	r3, [sp, #28]
 800bb7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb7e:	931a      	str	r3, [sp, #104]	; 0x68
 800bb80:	4654      	mov	r4, sl
 800bb82:	2205      	movs	r2, #5
 800bb84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb88:	4851      	ldr	r0, [pc, #324]	; (800bcd0 <_svfiprintf_r+0x1ec>)
 800bb8a:	f7f4 fb61 	bl	8000250 <memchr>
 800bb8e:	9a04      	ldr	r2, [sp, #16]
 800bb90:	b9d8      	cbnz	r0, 800bbca <_svfiprintf_r+0xe6>
 800bb92:	06d0      	lsls	r0, r2, #27
 800bb94:	bf44      	itt	mi
 800bb96:	2320      	movmi	r3, #32
 800bb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb9c:	0711      	lsls	r1, r2, #28
 800bb9e:	bf44      	itt	mi
 800bba0:	232b      	movmi	r3, #43	; 0x2b
 800bba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bbac:	d015      	beq.n	800bbda <_svfiprintf_r+0xf6>
 800bbae:	9a07      	ldr	r2, [sp, #28]
 800bbb0:	4654      	mov	r4, sl
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f04f 0c0a 	mov.w	ip, #10
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbbe:	3b30      	subs	r3, #48	; 0x30
 800bbc0:	2b09      	cmp	r3, #9
 800bbc2:	d94e      	bls.n	800bc62 <_svfiprintf_r+0x17e>
 800bbc4:	b1b0      	cbz	r0, 800bbf4 <_svfiprintf_r+0x110>
 800bbc6:	9207      	str	r2, [sp, #28]
 800bbc8:	e014      	b.n	800bbf4 <_svfiprintf_r+0x110>
 800bbca:	eba0 0308 	sub.w	r3, r0, r8
 800bbce:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	46a2      	mov	sl, r4
 800bbd8:	e7d2      	b.n	800bb80 <_svfiprintf_r+0x9c>
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	1d19      	adds	r1, r3, #4
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	9103      	str	r1, [sp, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	bfbb      	ittet	lt
 800bbe6:	425b      	neglt	r3, r3
 800bbe8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbec:	9307      	strge	r3, [sp, #28]
 800bbee:	9307      	strlt	r3, [sp, #28]
 800bbf0:	bfb8      	it	lt
 800bbf2:	9204      	strlt	r2, [sp, #16]
 800bbf4:	7823      	ldrb	r3, [r4, #0]
 800bbf6:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf8:	d10c      	bne.n	800bc14 <_svfiprintf_r+0x130>
 800bbfa:	7863      	ldrb	r3, [r4, #1]
 800bbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfe:	d135      	bne.n	800bc6c <_svfiprintf_r+0x188>
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	1d1a      	adds	r2, r3, #4
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	9203      	str	r2, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bfb8      	it	lt
 800bc0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc10:	3402      	adds	r4, #2
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bce0 <_svfiprintf_r+0x1fc>
 800bc18:	7821      	ldrb	r1, [r4, #0]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	4650      	mov	r0, sl
 800bc1e:	f7f4 fb17 	bl	8000250 <memchr>
 800bc22:	b140      	cbz	r0, 800bc36 <_svfiprintf_r+0x152>
 800bc24:	2340      	movs	r3, #64	; 0x40
 800bc26:	eba0 000a 	sub.w	r0, r0, sl
 800bc2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	4303      	orrs	r3, r0
 800bc32:	3401      	adds	r4, #1
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3a:	4826      	ldr	r0, [pc, #152]	; (800bcd4 <_svfiprintf_r+0x1f0>)
 800bc3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc40:	2206      	movs	r2, #6
 800bc42:	f7f4 fb05 	bl	8000250 <memchr>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d038      	beq.n	800bcbc <_svfiprintf_r+0x1d8>
 800bc4a:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <_svfiprintf_r+0x1f4>)
 800bc4c:	bb1b      	cbnz	r3, 800bc96 <_svfiprintf_r+0x1b2>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	3307      	adds	r3, #7
 800bc52:	f023 0307 	bic.w	r3, r3, #7
 800bc56:	3308      	adds	r3, #8
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5c:	4433      	add	r3, r6
 800bc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc60:	e767      	b.n	800bb32 <_svfiprintf_r+0x4e>
 800bc62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc66:	460c      	mov	r4, r1
 800bc68:	2001      	movs	r0, #1
 800bc6a:	e7a5      	b.n	800bbb8 <_svfiprintf_r+0xd4>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	3401      	adds	r4, #1
 800bc70:	9305      	str	r3, [sp, #20]
 800bc72:	4619      	mov	r1, r3
 800bc74:	f04f 0c0a 	mov.w	ip, #10
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc7e:	3a30      	subs	r2, #48	; 0x30
 800bc80:	2a09      	cmp	r2, #9
 800bc82:	d903      	bls.n	800bc8c <_svfiprintf_r+0x1a8>
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0c5      	beq.n	800bc14 <_svfiprintf_r+0x130>
 800bc88:	9105      	str	r1, [sp, #20]
 800bc8a:	e7c3      	b.n	800bc14 <_svfiprintf_r+0x130>
 800bc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc90:	4604      	mov	r4, r0
 800bc92:	2301      	movs	r3, #1
 800bc94:	e7f0      	b.n	800bc78 <_svfiprintf_r+0x194>
 800bc96:	ab03      	add	r3, sp, #12
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <_svfiprintf_r+0x1f8>)
 800bc9e:	a904      	add	r1, sp, #16
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7fc fa6d 	bl	8008180 <_printf_float>
 800bca6:	1c42      	adds	r2, r0, #1
 800bca8:	4606      	mov	r6, r0
 800bcaa:	d1d6      	bne.n	800bc5a <_svfiprintf_r+0x176>
 800bcac:	89ab      	ldrh	r3, [r5, #12]
 800bcae:	065b      	lsls	r3, r3, #25
 800bcb0:	f53f af2c 	bmi.w	800bb0c <_svfiprintf_r+0x28>
 800bcb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcb6:	b01d      	add	sp, #116	; 0x74
 800bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbc:	ab03      	add	r3, sp, #12
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <_svfiprintf_r+0x1f8>)
 800bcc4:	a904      	add	r1, sp, #16
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	f7fc fce6 	bl	8008698 <_printf_i>
 800bccc:	e7eb      	b.n	800bca6 <_svfiprintf_r+0x1c2>
 800bcce:	bf00      	nop
 800bcd0:	0800d54c 	.word	0x0800d54c
 800bcd4:	0800d556 	.word	0x0800d556
 800bcd8:	08008181 	.word	0x08008181
 800bcdc:	0800ba2d 	.word	0x0800ba2d
 800bce0:	0800d552 	.word	0x0800d552

0800bce4 <_sungetc_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	1c4b      	adds	r3, r1, #1
 800bce8:	4614      	mov	r4, r2
 800bcea:	d103      	bne.n	800bcf4 <_sungetc_r+0x10>
 800bcec:	f04f 35ff 	mov.w	r5, #4294967295
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	8993      	ldrh	r3, [r2, #12]
 800bcf6:	f023 0320 	bic.w	r3, r3, #32
 800bcfa:	8193      	strh	r3, [r2, #12]
 800bcfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcfe:	6852      	ldr	r2, [r2, #4]
 800bd00:	b2cd      	uxtb	r5, r1
 800bd02:	b18b      	cbz	r3, 800bd28 <_sungetc_r+0x44>
 800bd04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd06:	4293      	cmp	r3, r2
 800bd08:	dd08      	ble.n	800bd1c <_sungetc_r+0x38>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd14:	6863      	ldr	r3, [r4, #4]
 800bd16:	3301      	adds	r3, #1
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	e7e9      	b.n	800bcf0 <_sungetc_r+0xc>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	f000 fbef 	bl	800c500 <__submore>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0f1      	beq.n	800bd0a <_sungetc_r+0x26>
 800bd26:	e7e1      	b.n	800bcec <_sungetc_r+0x8>
 800bd28:	6921      	ldr	r1, [r4, #16]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	b151      	cbz	r1, 800bd44 <_sungetc_r+0x60>
 800bd2e:	4299      	cmp	r1, r3
 800bd30:	d208      	bcs.n	800bd44 <_sungetc_r+0x60>
 800bd32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bd36:	42a9      	cmp	r1, r5
 800bd38:	d104      	bne.n	800bd44 <_sungetc_r+0x60>
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	3201      	adds	r2, #1
 800bd3e:	6023      	str	r3, [r4, #0]
 800bd40:	6062      	str	r2, [r4, #4]
 800bd42:	e7d5      	b.n	800bcf0 <_sungetc_r+0xc>
 800bd44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bd48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd4c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd4e:	2303      	movs	r3, #3
 800bd50:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd52:	4623      	mov	r3, r4
 800bd54:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e7dc      	b.n	800bd18 <_sungetc_r+0x34>

0800bd5e <__ssrefill_r>:
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	460c      	mov	r4, r1
 800bd62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd64:	b169      	cbz	r1, 800bd82 <__ssrefill_r+0x24>
 800bd66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	d001      	beq.n	800bd72 <__ssrefill_r+0x14>
 800bd6e:	f7ff fd7d 	bl	800b86c <_free_r>
 800bd72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd74:	6063      	str	r3, [r4, #4]
 800bd76:	2000      	movs	r0, #0
 800bd78:	6360      	str	r0, [r4, #52]	; 0x34
 800bd7a:	b113      	cbz	r3, 800bd82 <__ssrefill_r+0x24>
 800bd7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	6923      	ldr	r3, [r4, #16]
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	6063      	str	r3, [r4, #4]
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f043 0320 	orr.w	r3, r3, #32
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	e7f3      	b.n	800bd80 <__ssrefill_r+0x22>

0800bd98 <__ssvfiscanf_r>:
 800bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bda2:	2100      	movs	r1, #0
 800bda4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bda8:	49a6      	ldr	r1, [pc, #664]	; (800c044 <__ssvfiscanf_r+0x2ac>)
 800bdaa:	91a0      	str	r1, [sp, #640]	; 0x280
 800bdac:	f10d 0804 	add.w	r8, sp, #4
 800bdb0:	49a5      	ldr	r1, [pc, #660]	; (800c048 <__ssvfiscanf_r+0x2b0>)
 800bdb2:	4fa6      	ldr	r7, [pc, #664]	; (800c04c <__ssvfiscanf_r+0x2b4>)
 800bdb4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c050 <__ssvfiscanf_r+0x2b8>
 800bdb8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	91a1      	str	r1, [sp, #644]	; 0x284
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	7813      	ldrb	r3, [r2, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 815a 	beq.w	800c07e <__ssvfiscanf_r+0x2e6>
 800bdca:	5dd9      	ldrb	r1, [r3, r7]
 800bdcc:	f011 0108 	ands.w	r1, r1, #8
 800bdd0:	f102 0501 	add.w	r5, r2, #1
 800bdd4:	d019      	beq.n	800be0a <__ssvfiscanf_r+0x72>
 800bdd6:	6863      	ldr	r3, [r4, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dd0f      	ble.n	800bdfc <__ssvfiscanf_r+0x64>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	781a      	ldrb	r2, [r3, #0]
 800bde0:	5cba      	ldrb	r2, [r7, r2]
 800bde2:	0712      	lsls	r2, r2, #28
 800bde4:	d401      	bmi.n	800bdea <__ssvfiscanf_r+0x52>
 800bde6:	462a      	mov	r2, r5
 800bde8:	e7eb      	b.n	800bdc2 <__ssvfiscanf_r+0x2a>
 800bdea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bdec:	3201      	adds	r2, #1
 800bdee:	9245      	str	r2, [sp, #276]	; 0x114
 800bdf0:	6862      	ldr	r2, [r4, #4]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	3a01      	subs	r2, #1
 800bdf6:	6062      	str	r2, [r4, #4]
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	e7ec      	b.n	800bdd6 <__ssvfiscanf_r+0x3e>
 800bdfc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdfe:	4621      	mov	r1, r4
 800be00:	4630      	mov	r0, r6
 800be02:	4798      	blx	r3
 800be04:	2800      	cmp	r0, #0
 800be06:	d0e9      	beq.n	800bddc <__ssvfiscanf_r+0x44>
 800be08:	e7ed      	b.n	800bde6 <__ssvfiscanf_r+0x4e>
 800be0a:	2b25      	cmp	r3, #37	; 0x25
 800be0c:	d012      	beq.n	800be34 <__ssvfiscanf_r+0x9c>
 800be0e:	469a      	mov	sl, r3
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f340 8091 	ble.w	800bf3a <__ssvfiscanf_r+0x1a2>
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	7813      	ldrb	r3, [r2, #0]
 800be1c:	4553      	cmp	r3, sl
 800be1e:	f040 812e 	bne.w	800c07e <__ssvfiscanf_r+0x2e6>
 800be22:	6863      	ldr	r3, [r4, #4]
 800be24:	3b01      	subs	r3, #1
 800be26:	6063      	str	r3, [r4, #4]
 800be28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800be2a:	3201      	adds	r2, #1
 800be2c:	3301      	adds	r3, #1
 800be2e:	6022      	str	r2, [r4, #0]
 800be30:	9345      	str	r3, [sp, #276]	; 0x114
 800be32:	e7d8      	b.n	800bde6 <__ssvfiscanf_r+0x4e>
 800be34:	9141      	str	r1, [sp, #260]	; 0x104
 800be36:	9143      	str	r1, [sp, #268]	; 0x10c
 800be38:	7853      	ldrb	r3, [r2, #1]
 800be3a:	2b2a      	cmp	r3, #42	; 0x2a
 800be3c:	bf02      	ittt	eq
 800be3e:	2310      	moveq	r3, #16
 800be40:	1c95      	addeq	r5, r2, #2
 800be42:	9341      	streq	r3, [sp, #260]	; 0x104
 800be44:	220a      	movs	r2, #10
 800be46:	46aa      	mov	sl, r5
 800be48:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800be4c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800be50:	2b09      	cmp	r3, #9
 800be52:	d91d      	bls.n	800be90 <__ssvfiscanf_r+0xf8>
 800be54:	487e      	ldr	r0, [pc, #504]	; (800c050 <__ssvfiscanf_r+0x2b8>)
 800be56:	2203      	movs	r2, #3
 800be58:	f7f4 f9fa 	bl	8000250 <memchr>
 800be5c:	b140      	cbz	r0, 800be70 <__ssvfiscanf_r+0xd8>
 800be5e:	2301      	movs	r3, #1
 800be60:	eba0 0009 	sub.w	r0, r0, r9
 800be64:	fa03 f000 	lsl.w	r0, r3, r0
 800be68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800be6a:	4318      	orrs	r0, r3
 800be6c:	9041      	str	r0, [sp, #260]	; 0x104
 800be6e:	4655      	mov	r5, sl
 800be70:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be74:	2b78      	cmp	r3, #120	; 0x78
 800be76:	d806      	bhi.n	800be86 <__ssvfiscanf_r+0xee>
 800be78:	2b57      	cmp	r3, #87	; 0x57
 800be7a:	d810      	bhi.n	800be9e <__ssvfiscanf_r+0x106>
 800be7c:	2b25      	cmp	r3, #37	; 0x25
 800be7e:	d0c6      	beq.n	800be0e <__ssvfiscanf_r+0x76>
 800be80:	d856      	bhi.n	800bf30 <__ssvfiscanf_r+0x198>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d064      	beq.n	800bf50 <__ssvfiscanf_r+0x1b8>
 800be86:	2303      	movs	r3, #3
 800be88:	9347      	str	r3, [sp, #284]	; 0x11c
 800be8a:	230a      	movs	r3, #10
 800be8c:	9342      	str	r3, [sp, #264]	; 0x108
 800be8e:	e071      	b.n	800bf74 <__ssvfiscanf_r+0x1dc>
 800be90:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800be92:	fb02 1103 	mla	r1, r2, r3, r1
 800be96:	3930      	subs	r1, #48	; 0x30
 800be98:	9143      	str	r1, [sp, #268]	; 0x10c
 800be9a:	4655      	mov	r5, sl
 800be9c:	e7d3      	b.n	800be46 <__ssvfiscanf_r+0xae>
 800be9e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bea2:	2a20      	cmp	r2, #32
 800bea4:	d8ef      	bhi.n	800be86 <__ssvfiscanf_r+0xee>
 800bea6:	a101      	add	r1, pc, #4	; (adr r1, 800beac <__ssvfiscanf_r+0x114>)
 800bea8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800beac:	0800bf5f 	.word	0x0800bf5f
 800beb0:	0800be87 	.word	0x0800be87
 800beb4:	0800be87 	.word	0x0800be87
 800beb8:	0800bfbd 	.word	0x0800bfbd
 800bebc:	0800be87 	.word	0x0800be87
 800bec0:	0800be87 	.word	0x0800be87
 800bec4:	0800be87 	.word	0x0800be87
 800bec8:	0800be87 	.word	0x0800be87
 800becc:	0800be87 	.word	0x0800be87
 800bed0:	0800be87 	.word	0x0800be87
 800bed4:	0800be87 	.word	0x0800be87
 800bed8:	0800bfd3 	.word	0x0800bfd3
 800bedc:	0800bfa9 	.word	0x0800bfa9
 800bee0:	0800bf37 	.word	0x0800bf37
 800bee4:	0800bf37 	.word	0x0800bf37
 800bee8:	0800bf37 	.word	0x0800bf37
 800beec:	0800be87 	.word	0x0800be87
 800bef0:	0800bfad 	.word	0x0800bfad
 800bef4:	0800be87 	.word	0x0800be87
 800bef8:	0800be87 	.word	0x0800be87
 800befc:	0800be87 	.word	0x0800be87
 800bf00:	0800be87 	.word	0x0800be87
 800bf04:	0800bfe3 	.word	0x0800bfe3
 800bf08:	0800bfb5 	.word	0x0800bfb5
 800bf0c:	0800bf57 	.word	0x0800bf57
 800bf10:	0800be87 	.word	0x0800be87
 800bf14:	0800be87 	.word	0x0800be87
 800bf18:	0800bfdf 	.word	0x0800bfdf
 800bf1c:	0800be87 	.word	0x0800be87
 800bf20:	0800bfa9 	.word	0x0800bfa9
 800bf24:	0800be87 	.word	0x0800be87
 800bf28:	0800be87 	.word	0x0800be87
 800bf2c:	0800bf5f 	.word	0x0800bf5f
 800bf30:	3b45      	subs	r3, #69	; 0x45
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d8a7      	bhi.n	800be86 <__ssvfiscanf_r+0xee>
 800bf36:	2305      	movs	r3, #5
 800bf38:	e01b      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bf3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4798      	blx	r3
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f43f af68 	beq.w	800be18 <__ssvfiscanf_r+0x80>
 800bf48:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f040 808d 	bne.w	800c06a <__ssvfiscanf_r+0x2d2>
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e08f      	b.n	800c076 <__ssvfiscanf_r+0x2de>
 800bf56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf58:	f042 0220 	orr.w	r2, r2, #32
 800bf5c:	9241      	str	r2, [sp, #260]	; 0x104
 800bf5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf64:	9241      	str	r2, [sp, #260]	; 0x104
 800bf66:	2210      	movs	r2, #16
 800bf68:	2b6f      	cmp	r3, #111	; 0x6f
 800bf6a:	9242      	str	r2, [sp, #264]	; 0x108
 800bf6c:	bf34      	ite	cc
 800bf6e:	2303      	movcc	r3, #3
 800bf70:	2304      	movcs	r3, #4
 800bf72:	9347      	str	r3, [sp, #284]	; 0x11c
 800bf74:	6863      	ldr	r3, [r4, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dd42      	ble.n	800c000 <__ssvfiscanf_r+0x268>
 800bf7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf7c:	0659      	lsls	r1, r3, #25
 800bf7e:	d404      	bmi.n	800bf8a <__ssvfiscanf_r+0x1f2>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	781a      	ldrb	r2, [r3, #0]
 800bf84:	5cba      	ldrb	r2, [r7, r2]
 800bf86:	0712      	lsls	r2, r2, #28
 800bf88:	d441      	bmi.n	800c00e <__ssvfiscanf_r+0x276>
 800bf8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	dc50      	bgt.n	800c032 <__ssvfiscanf_r+0x29a>
 800bf90:	466b      	mov	r3, sp
 800bf92:	4622      	mov	r2, r4
 800bf94:	a941      	add	r1, sp, #260	; 0x104
 800bf96:	4630      	mov	r0, r6
 800bf98:	f000 f876 	bl	800c088 <_scanf_chars>
 800bf9c:	2801      	cmp	r0, #1
 800bf9e:	d06e      	beq.n	800c07e <__ssvfiscanf_r+0x2e6>
 800bfa0:	2802      	cmp	r0, #2
 800bfa2:	f47f af20 	bne.w	800bde6 <__ssvfiscanf_r+0x4e>
 800bfa6:	e7cf      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	e7dd      	b.n	800bf68 <__ssvfiscanf_r+0x1d0>
 800bfac:	2300      	movs	r3, #0
 800bfae:	9342      	str	r3, [sp, #264]	; 0x108
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e7de      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bfb4:	2308      	movs	r3, #8
 800bfb6:	9342      	str	r3, [sp, #264]	; 0x108
 800bfb8:	2304      	movs	r3, #4
 800bfba:	e7da      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f000 f9de 	bl	800c380 <__sccl>
 800bfc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfca:	9341      	str	r3, [sp, #260]	; 0x104
 800bfcc:	4605      	mov	r5, r0
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e7cf      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bfd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd8:	9341      	str	r3, [sp, #260]	; 0x104
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e7c9      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e7c7      	b.n	800bf72 <__ssvfiscanf_r+0x1da>
 800bfe2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bfe4:	06c3      	lsls	r3, r0, #27
 800bfe6:	f53f aefe 	bmi.w	800bde6 <__ssvfiscanf_r+0x4e>
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfee:	1d19      	adds	r1, r3, #4
 800bff0:	9100      	str	r1, [sp, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f010 0f01 	tst.w	r0, #1
 800bff8:	bf14      	ite	ne
 800bffa:	801a      	strhne	r2, [r3, #0]
 800bffc:	601a      	streq	r2, [r3, #0]
 800bffe:	e6f2      	b.n	800bde6 <__ssvfiscanf_r+0x4e>
 800c000:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c002:	4621      	mov	r1, r4
 800c004:	4630      	mov	r0, r6
 800c006:	4798      	blx	r3
 800c008:	2800      	cmp	r0, #0
 800c00a:	d0b6      	beq.n	800bf7a <__ssvfiscanf_r+0x1e2>
 800c00c:	e79c      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800c00e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c010:	3201      	adds	r2, #1
 800c012:	9245      	str	r2, [sp, #276]	; 0x114
 800c014:	6862      	ldr	r2, [r4, #4]
 800c016:	3a01      	subs	r2, #1
 800c018:	2a00      	cmp	r2, #0
 800c01a:	6062      	str	r2, [r4, #4]
 800c01c:	dd02      	ble.n	800c024 <__ssvfiscanf_r+0x28c>
 800c01e:	3301      	adds	r3, #1
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	e7ad      	b.n	800bf80 <__ssvfiscanf_r+0x1e8>
 800c024:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c026:	4621      	mov	r1, r4
 800c028:	4630      	mov	r0, r6
 800c02a:	4798      	blx	r3
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d0a7      	beq.n	800bf80 <__ssvfiscanf_r+0x1e8>
 800c030:	e78a      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800c032:	2b04      	cmp	r3, #4
 800c034:	dc0e      	bgt.n	800c054 <__ssvfiscanf_r+0x2bc>
 800c036:	466b      	mov	r3, sp
 800c038:	4622      	mov	r2, r4
 800c03a:	a941      	add	r1, sp, #260	; 0x104
 800c03c:	4630      	mov	r0, r6
 800c03e:	f000 f87d 	bl	800c13c <_scanf_i>
 800c042:	e7ab      	b.n	800bf9c <__ssvfiscanf_r+0x204>
 800c044:	0800bce5 	.word	0x0800bce5
 800c048:	0800bd5f 	.word	0x0800bd5f
 800c04c:	0800d159 	.word	0x0800d159
 800c050:	0800d552 	.word	0x0800d552
 800c054:	4b0b      	ldr	r3, [pc, #44]	; (800c084 <__ssvfiscanf_r+0x2ec>)
 800c056:	2b00      	cmp	r3, #0
 800c058:	f43f aec5 	beq.w	800bde6 <__ssvfiscanf_r+0x4e>
 800c05c:	466b      	mov	r3, sp
 800c05e:	4622      	mov	r2, r4
 800c060:	a941      	add	r1, sp, #260	; 0x104
 800c062:	4630      	mov	r0, r6
 800c064:	f7fc fc3e 	bl	80088e4 <_scanf_float>
 800c068:	e798      	b.n	800bf9c <__ssvfiscanf_r+0x204>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c070:	bf18      	it	ne
 800c072:	f04f 30ff 	movne.w	r0, #4294967295
 800c076:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c080:	e7f9      	b.n	800c076 <__ssvfiscanf_r+0x2de>
 800c082:	bf00      	nop
 800c084:	080088e5 	.word	0x080088e5

0800c088 <_scanf_chars>:
 800c088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	4615      	mov	r5, r2
 800c08e:	688a      	ldr	r2, [r1, #8]
 800c090:	4680      	mov	r8, r0
 800c092:	460c      	mov	r4, r1
 800c094:	b932      	cbnz	r2, 800c0a4 <_scanf_chars+0x1c>
 800c096:	698a      	ldr	r2, [r1, #24]
 800c098:	2a00      	cmp	r2, #0
 800c09a:	bf0c      	ite	eq
 800c09c:	2201      	moveq	r2, #1
 800c09e:	f04f 32ff 	movne.w	r2, #4294967295
 800c0a2:	608a      	str	r2, [r1, #8]
 800c0a4:	6822      	ldr	r2, [r4, #0]
 800c0a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c138 <_scanf_chars+0xb0>
 800c0aa:	06d1      	lsls	r1, r2, #27
 800c0ac:	bf5f      	itttt	pl
 800c0ae:	681a      	ldrpl	r2, [r3, #0]
 800c0b0:	1d11      	addpl	r1, r2, #4
 800c0b2:	6019      	strpl	r1, [r3, #0]
 800c0b4:	6816      	ldrpl	r6, [r2, #0]
 800c0b6:	2700      	movs	r7, #0
 800c0b8:	69a0      	ldr	r0, [r4, #24]
 800c0ba:	b188      	cbz	r0, 800c0e0 <_scanf_chars+0x58>
 800c0bc:	2801      	cmp	r0, #1
 800c0be:	d107      	bne.n	800c0d0 <_scanf_chars+0x48>
 800c0c0:	682a      	ldr	r2, [r5, #0]
 800c0c2:	7811      	ldrb	r1, [r2, #0]
 800c0c4:	6962      	ldr	r2, [r4, #20]
 800c0c6:	5c52      	ldrb	r2, [r2, r1]
 800c0c8:	b952      	cbnz	r2, 800c0e0 <_scanf_chars+0x58>
 800c0ca:	2f00      	cmp	r7, #0
 800c0cc:	d031      	beq.n	800c132 <_scanf_chars+0xaa>
 800c0ce:	e022      	b.n	800c116 <_scanf_chars+0x8e>
 800c0d0:	2802      	cmp	r0, #2
 800c0d2:	d120      	bne.n	800c116 <_scanf_chars+0x8e>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c0dc:	071b      	lsls	r3, r3, #28
 800c0de:	d41a      	bmi.n	800c116 <_scanf_chars+0x8e>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	06da      	lsls	r2, r3, #27
 800c0e4:	bf5e      	ittt	pl
 800c0e6:	682b      	ldrpl	r3, [r5, #0]
 800c0e8:	781b      	ldrbpl	r3, [r3, #0]
 800c0ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c0ee:	682a      	ldr	r2, [r5, #0]
 800c0f0:	686b      	ldr	r3, [r5, #4]
 800c0f2:	3201      	adds	r2, #1
 800c0f4:	602a      	str	r2, [r5, #0]
 800c0f6:	68a2      	ldr	r2, [r4, #8]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	3a01      	subs	r2, #1
 800c0fc:	606b      	str	r3, [r5, #4]
 800c0fe:	3701      	adds	r7, #1
 800c100:	60a2      	str	r2, [r4, #8]
 800c102:	b142      	cbz	r2, 800c116 <_scanf_chars+0x8e>
 800c104:	2b00      	cmp	r3, #0
 800c106:	dcd7      	bgt.n	800c0b8 <_scanf_chars+0x30>
 800c108:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c10c:	4629      	mov	r1, r5
 800c10e:	4640      	mov	r0, r8
 800c110:	4798      	blx	r3
 800c112:	2800      	cmp	r0, #0
 800c114:	d0d0      	beq.n	800c0b8 <_scanf_chars+0x30>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	f013 0310 	ands.w	r3, r3, #16
 800c11c:	d105      	bne.n	800c12a <_scanf_chars+0xa2>
 800c11e:	68e2      	ldr	r2, [r4, #12]
 800c120:	3201      	adds	r2, #1
 800c122:	60e2      	str	r2, [r4, #12]
 800c124:	69a2      	ldr	r2, [r4, #24]
 800c126:	b102      	cbz	r2, 800c12a <_scanf_chars+0xa2>
 800c128:	7033      	strb	r3, [r6, #0]
 800c12a:	6923      	ldr	r3, [r4, #16]
 800c12c:	443b      	add	r3, r7
 800c12e:	6123      	str	r3, [r4, #16]
 800c130:	2000      	movs	r0, #0
 800c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c136:	bf00      	nop
 800c138:	0800d159 	.word	0x0800d159

0800c13c <_scanf_i>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	4698      	mov	r8, r3
 800c142:	4b76      	ldr	r3, [pc, #472]	; (800c31c <_scanf_i+0x1e0>)
 800c144:	460c      	mov	r4, r1
 800c146:	4682      	mov	sl, r0
 800c148:	4616      	mov	r6, r2
 800c14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c14e:	b087      	sub	sp, #28
 800c150:	ab03      	add	r3, sp, #12
 800c152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c156:	4b72      	ldr	r3, [pc, #456]	; (800c320 <_scanf_i+0x1e4>)
 800c158:	69a1      	ldr	r1, [r4, #24]
 800c15a:	4a72      	ldr	r2, [pc, #456]	; (800c324 <_scanf_i+0x1e8>)
 800c15c:	2903      	cmp	r1, #3
 800c15e:	bf18      	it	ne
 800c160:	461a      	movne	r2, r3
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	9201      	str	r2, [sp, #4]
 800c166:	1e5a      	subs	r2, r3, #1
 800c168:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c16c:	bf88      	it	hi
 800c16e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c172:	4627      	mov	r7, r4
 800c174:	bf82      	ittt	hi
 800c176:	eb03 0905 	addhi.w	r9, r3, r5
 800c17a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c17e:	60a3      	strhi	r3, [r4, #8]
 800c180:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c184:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c188:	bf98      	it	ls
 800c18a:	f04f 0900 	movls.w	r9, #0
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	463d      	mov	r5, r7
 800c192:	f04f 0b00 	mov.w	fp, #0
 800c196:	6831      	ldr	r1, [r6, #0]
 800c198:	ab03      	add	r3, sp, #12
 800c19a:	7809      	ldrb	r1, [r1, #0]
 800c19c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	f7f4 f855 	bl	8000250 <memchr>
 800c1a6:	b328      	cbz	r0, 800c1f4 <_scanf_i+0xb8>
 800c1a8:	f1bb 0f01 	cmp.w	fp, #1
 800c1ac:	d159      	bne.n	800c262 <_scanf_i+0x126>
 800c1ae:	6862      	ldr	r2, [r4, #4]
 800c1b0:	b92a      	cbnz	r2, 800c1be <_scanf_i+0x82>
 800c1b2:	6822      	ldr	r2, [r4, #0]
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1ba:	6063      	str	r3, [r4, #4]
 800c1bc:	6022      	str	r2, [r4, #0]
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c1c4:	6022      	str	r2, [r4, #0]
 800c1c6:	68a2      	ldr	r2, [r4, #8]
 800c1c8:	1e51      	subs	r1, r2, #1
 800c1ca:	60a1      	str	r1, [r4, #8]
 800c1cc:	b192      	cbz	r2, 800c1f4 <_scanf_i+0xb8>
 800c1ce:	6832      	ldr	r2, [r6, #0]
 800c1d0:	1c51      	adds	r1, r2, #1
 800c1d2:	6031      	str	r1, [r6, #0]
 800c1d4:	7812      	ldrb	r2, [r2, #0]
 800c1d6:	f805 2b01 	strb.w	r2, [r5], #1
 800c1da:	6872      	ldr	r2, [r6, #4]
 800c1dc:	3a01      	subs	r2, #1
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	6072      	str	r2, [r6, #4]
 800c1e2:	dc07      	bgt.n	800c1f4 <_scanf_i+0xb8>
 800c1e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4650      	mov	r0, sl
 800c1ec:	4790      	blx	r2
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f040 8085 	bne.w	800c2fe <_scanf_i+0x1c2>
 800c1f4:	f10b 0b01 	add.w	fp, fp, #1
 800c1f8:	f1bb 0f03 	cmp.w	fp, #3
 800c1fc:	d1cb      	bne.n	800c196 <_scanf_i+0x5a>
 800c1fe:	6863      	ldr	r3, [r4, #4]
 800c200:	b90b      	cbnz	r3, 800c206 <_scanf_i+0xca>
 800c202:	230a      	movs	r3, #10
 800c204:	6063      	str	r3, [r4, #4]
 800c206:	6863      	ldr	r3, [r4, #4]
 800c208:	4947      	ldr	r1, [pc, #284]	; (800c328 <_scanf_i+0x1ec>)
 800c20a:	6960      	ldr	r0, [r4, #20]
 800c20c:	1ac9      	subs	r1, r1, r3
 800c20e:	f000 f8b7 	bl	800c380 <__sccl>
 800c212:	f04f 0b00 	mov.w	fp, #0
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d03d      	beq.n	800c29a <_scanf_i+0x15e>
 800c21e:	6831      	ldr	r1, [r6, #0]
 800c220:	6960      	ldr	r0, [r4, #20]
 800c222:	f891 c000 	ldrb.w	ip, [r1]
 800c226:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d035      	beq.n	800c29a <_scanf_i+0x15e>
 800c22e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c232:	d124      	bne.n	800c27e <_scanf_i+0x142>
 800c234:	0510      	lsls	r0, r2, #20
 800c236:	d522      	bpl.n	800c27e <_scanf_i+0x142>
 800c238:	f10b 0b01 	add.w	fp, fp, #1
 800c23c:	f1b9 0f00 	cmp.w	r9, #0
 800c240:	d003      	beq.n	800c24a <_scanf_i+0x10e>
 800c242:	3301      	adds	r3, #1
 800c244:	f109 39ff 	add.w	r9, r9, #4294967295
 800c248:	60a3      	str	r3, [r4, #8]
 800c24a:	6873      	ldr	r3, [r6, #4]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	6073      	str	r3, [r6, #4]
 800c252:	dd1b      	ble.n	800c28c <_scanf_i+0x150>
 800c254:	6833      	ldr	r3, [r6, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	6033      	str	r3, [r6, #0]
 800c25a:	68a3      	ldr	r3, [r4, #8]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	60a3      	str	r3, [r4, #8]
 800c260:	e7d9      	b.n	800c216 <_scanf_i+0xda>
 800c262:	f1bb 0f02 	cmp.w	fp, #2
 800c266:	d1ae      	bne.n	800c1c6 <_scanf_i+0x8a>
 800c268:	6822      	ldr	r2, [r4, #0]
 800c26a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c26e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c272:	d1bf      	bne.n	800c1f4 <_scanf_i+0xb8>
 800c274:	2310      	movs	r3, #16
 800c276:	6063      	str	r3, [r4, #4]
 800c278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c27c:	e7a2      	b.n	800c1c4 <_scanf_i+0x88>
 800c27e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c282:	6022      	str	r2, [r4, #0]
 800c284:	780b      	ldrb	r3, [r1, #0]
 800c286:	f805 3b01 	strb.w	r3, [r5], #1
 800c28a:	e7de      	b.n	800c24a <_scanf_i+0x10e>
 800c28c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c290:	4631      	mov	r1, r6
 800c292:	4650      	mov	r0, sl
 800c294:	4798      	blx	r3
 800c296:	2800      	cmp	r0, #0
 800c298:	d0df      	beq.n	800c25a <_scanf_i+0x11e>
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	05db      	lsls	r3, r3, #23
 800c29e:	d50d      	bpl.n	800c2bc <_scanf_i+0x180>
 800c2a0:	42bd      	cmp	r5, r7
 800c2a2:	d909      	bls.n	800c2b8 <_scanf_i+0x17c>
 800c2a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2ac:	4632      	mov	r2, r6
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	4798      	blx	r3
 800c2b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2b6:	464d      	mov	r5, r9
 800c2b8:	42bd      	cmp	r5, r7
 800c2ba:	d02d      	beq.n	800c318 <_scanf_i+0x1dc>
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	f012 0210 	ands.w	r2, r2, #16
 800c2c2:	d113      	bne.n	800c2ec <_scanf_i+0x1b0>
 800c2c4:	702a      	strb	r2, [r5, #0]
 800c2c6:	6863      	ldr	r3, [r4, #4]
 800c2c8:	9e01      	ldr	r6, [sp, #4]
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	47b0      	blx	r6
 800c2d0:	6821      	ldr	r1, [r4, #0]
 800c2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d6:	f011 0f20 	tst.w	r1, #32
 800c2da:	d013      	beq.n	800c304 <_scanf_i+0x1c8>
 800c2dc:	1d1a      	adds	r2, r3, #4
 800c2de:	f8c8 2000 	str.w	r2, [r8]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6018      	str	r0, [r3, #0]
 800c2e6:	68e3      	ldr	r3, [r4, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60e3      	str	r3, [r4, #12]
 800c2ec:	1bed      	subs	r5, r5, r7
 800c2ee:	44ab      	add	fp, r5
 800c2f0:	6925      	ldr	r5, [r4, #16]
 800c2f2:	445d      	add	r5, fp
 800c2f4:	6125      	str	r5, [r4, #16]
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	b007      	add	sp, #28
 800c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	f04f 0b00 	mov.w	fp, #0
 800c302:	e7ca      	b.n	800c29a <_scanf_i+0x15e>
 800c304:	1d1a      	adds	r2, r3, #4
 800c306:	f8c8 2000 	str.w	r2, [r8]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f011 0f01 	tst.w	r1, #1
 800c310:	bf14      	ite	ne
 800c312:	8018      	strhne	r0, [r3, #0]
 800c314:	6018      	streq	r0, [r3, #0]
 800c316:	e7e6      	b.n	800c2e6 <_scanf_i+0x1aa>
 800c318:	2001      	movs	r0, #1
 800c31a:	e7ed      	b.n	800c2f8 <_scanf_i+0x1bc>
 800c31c:	0800d134 	.word	0x0800d134
 800c320:	0800c4fd 	.word	0x0800c4fd
 800c324:	08009ad5 	.word	0x08009ad5
 800c328:	0800d576 	.word	0x0800d576

0800c32c <_read_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4d07      	ldr	r5, [pc, #28]	; (800c34c <_read_r+0x20>)
 800c330:	4604      	mov	r4, r0
 800c332:	4608      	mov	r0, r1
 800c334:	4611      	mov	r1, r2
 800c336:	2200      	movs	r2, #0
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f6 fbcc 	bl	8002ad8 <_read>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_read_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_read_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	200008dc 	.word	0x200008dc

0800c350 <nan>:
 800c350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c358 <nan+0x8>
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	00000000 	.word	0x00000000
 800c35c:	7ff80000 	.word	0x7ff80000

0800c360 <_sbrk_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d06      	ldr	r5, [pc, #24]	; (800c37c <_sbrk_r+0x1c>)
 800c364:	2300      	movs	r3, #0
 800c366:	4604      	mov	r4, r0
 800c368:	4608      	mov	r0, r1
 800c36a:	602b      	str	r3, [r5, #0]
 800c36c:	f7f6 fc22 	bl	8002bb4 <_sbrk>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_sbrk_r+0x1a>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_sbrk_r+0x1a>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	200008dc 	.word	0x200008dc

0800c380 <__sccl>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	780b      	ldrb	r3, [r1, #0]
 800c384:	4604      	mov	r4, r0
 800c386:	2b5e      	cmp	r3, #94	; 0x5e
 800c388:	bf0b      	itete	eq
 800c38a:	784b      	ldrbeq	r3, [r1, #1]
 800c38c:	1c48      	addne	r0, r1, #1
 800c38e:	1c88      	addeq	r0, r1, #2
 800c390:	2200      	movne	r2, #0
 800c392:	bf08      	it	eq
 800c394:	2201      	moveq	r2, #1
 800c396:	1e61      	subs	r1, r4, #1
 800c398:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c39c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c3a0:	42a9      	cmp	r1, r5
 800c3a2:	d1fb      	bne.n	800c39c <__sccl+0x1c>
 800c3a4:	b90b      	cbnz	r3, 800c3aa <__sccl+0x2a>
 800c3a6:	3801      	subs	r0, #1
 800c3a8:	bd70      	pop	{r4, r5, r6, pc}
 800c3aa:	f082 0201 	eor.w	r2, r2, #1
 800c3ae:	54e2      	strb	r2, [r4, r3]
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c3b8:	292d      	cmp	r1, #45	; 0x2d
 800c3ba:	d006      	beq.n	800c3ca <__sccl+0x4a>
 800c3bc:	295d      	cmp	r1, #93	; 0x5d
 800c3be:	d0f3      	beq.n	800c3a8 <__sccl+0x28>
 800c3c0:	b909      	cbnz	r1, 800c3c6 <__sccl+0x46>
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	e7f0      	b.n	800c3a8 <__sccl+0x28>
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	e7f1      	b.n	800c3ae <__sccl+0x2e>
 800c3ca:	786e      	ldrb	r6, [r5, #1]
 800c3cc:	2e5d      	cmp	r6, #93	; 0x5d
 800c3ce:	d0fa      	beq.n	800c3c6 <__sccl+0x46>
 800c3d0:	42b3      	cmp	r3, r6
 800c3d2:	dcf8      	bgt.n	800c3c6 <__sccl+0x46>
 800c3d4:	3502      	adds	r5, #2
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	3101      	adds	r1, #1
 800c3da:	428e      	cmp	r6, r1
 800c3dc:	5462      	strb	r2, [r4, r1]
 800c3de:	dcfb      	bgt.n	800c3d8 <__sccl+0x58>
 800c3e0:	1af1      	subs	r1, r6, r3
 800c3e2:	3901      	subs	r1, #1
 800c3e4:	1c58      	adds	r0, r3, #1
 800c3e6:	42b3      	cmp	r3, r6
 800c3e8:	bfa8      	it	ge
 800c3ea:	2100      	movge	r1, #0
 800c3ec:	1843      	adds	r3, r0, r1
 800c3ee:	e7e0      	b.n	800c3b2 <__sccl+0x32>

0800c3f0 <strncmp>:
 800c3f0:	b510      	push	{r4, lr}
 800c3f2:	b17a      	cbz	r2, 800c414 <strncmp+0x24>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	3901      	subs	r1, #1
 800c3f8:	1884      	adds	r4, r0, r2
 800c3fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c3fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c402:	4290      	cmp	r0, r2
 800c404:	d101      	bne.n	800c40a <strncmp+0x1a>
 800c406:	42a3      	cmp	r3, r4
 800c408:	d101      	bne.n	800c40e <strncmp+0x1e>
 800c40a:	1a80      	subs	r0, r0, r2
 800c40c:	bd10      	pop	{r4, pc}
 800c40e:	2800      	cmp	r0, #0
 800c410:	d1f3      	bne.n	800c3fa <strncmp+0xa>
 800c412:	e7fa      	b.n	800c40a <strncmp+0x1a>
 800c414:	4610      	mov	r0, r2
 800c416:	e7f9      	b.n	800c40c <strncmp+0x1c>

0800c418 <_strtoul_l.constprop.0>:
 800c418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c41c:	4f36      	ldr	r7, [pc, #216]	; (800c4f8 <_strtoul_l.constprop.0+0xe0>)
 800c41e:	4686      	mov	lr, r0
 800c420:	460d      	mov	r5, r1
 800c422:	4628      	mov	r0, r5
 800c424:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c428:	5de6      	ldrb	r6, [r4, r7]
 800c42a:	f016 0608 	ands.w	r6, r6, #8
 800c42e:	d1f8      	bne.n	800c422 <_strtoul_l.constprop.0+0xa>
 800c430:	2c2d      	cmp	r4, #45	; 0x2d
 800c432:	d12f      	bne.n	800c494 <_strtoul_l.constprop.0+0x7c>
 800c434:	782c      	ldrb	r4, [r5, #0]
 800c436:	2601      	movs	r6, #1
 800c438:	1c85      	adds	r5, r0, #2
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d057      	beq.n	800c4ee <_strtoul_l.constprop.0+0xd6>
 800c43e:	2b10      	cmp	r3, #16
 800c440:	d109      	bne.n	800c456 <_strtoul_l.constprop.0+0x3e>
 800c442:	2c30      	cmp	r4, #48	; 0x30
 800c444:	d107      	bne.n	800c456 <_strtoul_l.constprop.0+0x3e>
 800c446:	7828      	ldrb	r0, [r5, #0]
 800c448:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c44c:	2858      	cmp	r0, #88	; 0x58
 800c44e:	d149      	bne.n	800c4e4 <_strtoul_l.constprop.0+0xcc>
 800c450:	786c      	ldrb	r4, [r5, #1]
 800c452:	2310      	movs	r3, #16
 800c454:	3502      	adds	r5, #2
 800c456:	f04f 38ff 	mov.w	r8, #4294967295
 800c45a:	2700      	movs	r7, #0
 800c45c:	fbb8 f8f3 	udiv	r8, r8, r3
 800c460:	fb03 f908 	mul.w	r9, r3, r8
 800c464:	ea6f 0909 	mvn.w	r9, r9
 800c468:	4638      	mov	r0, r7
 800c46a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c46e:	f1bc 0f09 	cmp.w	ip, #9
 800c472:	d814      	bhi.n	800c49e <_strtoul_l.constprop.0+0x86>
 800c474:	4664      	mov	r4, ip
 800c476:	42a3      	cmp	r3, r4
 800c478:	dd22      	ble.n	800c4c0 <_strtoul_l.constprop.0+0xa8>
 800c47a:	2f00      	cmp	r7, #0
 800c47c:	db1d      	blt.n	800c4ba <_strtoul_l.constprop.0+0xa2>
 800c47e:	4580      	cmp	r8, r0
 800c480:	d31b      	bcc.n	800c4ba <_strtoul_l.constprop.0+0xa2>
 800c482:	d101      	bne.n	800c488 <_strtoul_l.constprop.0+0x70>
 800c484:	45a1      	cmp	r9, r4
 800c486:	db18      	blt.n	800c4ba <_strtoul_l.constprop.0+0xa2>
 800c488:	fb00 4003 	mla	r0, r0, r3, r4
 800c48c:	2701      	movs	r7, #1
 800c48e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c492:	e7ea      	b.n	800c46a <_strtoul_l.constprop.0+0x52>
 800c494:	2c2b      	cmp	r4, #43	; 0x2b
 800c496:	bf04      	itt	eq
 800c498:	782c      	ldrbeq	r4, [r5, #0]
 800c49a:	1c85      	addeq	r5, r0, #2
 800c49c:	e7cd      	b.n	800c43a <_strtoul_l.constprop.0+0x22>
 800c49e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c4a2:	f1bc 0f19 	cmp.w	ip, #25
 800c4a6:	d801      	bhi.n	800c4ac <_strtoul_l.constprop.0+0x94>
 800c4a8:	3c37      	subs	r4, #55	; 0x37
 800c4aa:	e7e4      	b.n	800c476 <_strtoul_l.constprop.0+0x5e>
 800c4ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c4b0:	f1bc 0f19 	cmp.w	ip, #25
 800c4b4:	d804      	bhi.n	800c4c0 <_strtoul_l.constprop.0+0xa8>
 800c4b6:	3c57      	subs	r4, #87	; 0x57
 800c4b8:	e7dd      	b.n	800c476 <_strtoul_l.constprop.0+0x5e>
 800c4ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c4be:	e7e6      	b.n	800c48e <_strtoul_l.constprop.0+0x76>
 800c4c0:	2f00      	cmp	r7, #0
 800c4c2:	da07      	bge.n	800c4d4 <_strtoul_l.constprop.0+0xbc>
 800c4c4:	2322      	movs	r3, #34	; 0x22
 800c4c6:	f8ce 3000 	str.w	r3, [lr]
 800c4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ce:	b932      	cbnz	r2, 800c4de <_strtoul_l.constprop.0+0xc6>
 800c4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4d4:	b106      	cbz	r6, 800c4d8 <_strtoul_l.constprop.0+0xc0>
 800c4d6:	4240      	negs	r0, r0
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	d0f9      	beq.n	800c4d0 <_strtoul_l.constprop.0+0xb8>
 800c4dc:	b107      	cbz	r7, 800c4e0 <_strtoul_l.constprop.0+0xc8>
 800c4de:	1e69      	subs	r1, r5, #1
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	e7f5      	b.n	800c4d0 <_strtoul_l.constprop.0+0xb8>
 800c4e4:	2430      	movs	r4, #48	; 0x30
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1b5      	bne.n	800c456 <_strtoul_l.constprop.0+0x3e>
 800c4ea:	2308      	movs	r3, #8
 800c4ec:	e7b3      	b.n	800c456 <_strtoul_l.constprop.0+0x3e>
 800c4ee:	2c30      	cmp	r4, #48	; 0x30
 800c4f0:	d0a9      	beq.n	800c446 <_strtoul_l.constprop.0+0x2e>
 800c4f2:	230a      	movs	r3, #10
 800c4f4:	e7af      	b.n	800c456 <_strtoul_l.constprop.0+0x3e>
 800c4f6:	bf00      	nop
 800c4f8:	0800d159 	.word	0x0800d159

0800c4fc <_strtoul_r>:
 800c4fc:	f7ff bf8c 	b.w	800c418 <_strtoul_l.constprop.0>

0800c500 <__submore>:
 800c500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c504:	460c      	mov	r4, r1
 800c506:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50c:	4299      	cmp	r1, r3
 800c50e:	d11d      	bne.n	800c54c <__submore+0x4c>
 800c510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c514:	f7ff fa16 	bl	800b944 <_malloc_r>
 800c518:	b918      	cbnz	r0, 800c522 <__submore+0x22>
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c526:	63a3      	str	r3, [r4, #56]	; 0x38
 800c528:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c52c:	6360      	str	r0, [r4, #52]	; 0x34
 800c52e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c532:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c536:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c53a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c53e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c542:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c546:	6020      	str	r0, [r4, #0]
 800c548:	2000      	movs	r0, #0
 800c54a:	e7e8      	b.n	800c51e <__submore+0x1e>
 800c54c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c54e:	0077      	lsls	r7, r6, #1
 800c550:	463a      	mov	r2, r7
 800c552:	f000 fa2d 	bl	800c9b0 <_realloc_r>
 800c556:	4605      	mov	r5, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0de      	beq.n	800c51a <__submore+0x1a>
 800c55c:	eb00 0806 	add.w	r8, r0, r6
 800c560:	4601      	mov	r1, r0
 800c562:	4632      	mov	r2, r6
 800c564:	4640      	mov	r0, r8
 800c566:	f7fb fd65 	bl	8008034 <memcpy>
 800c56a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c56e:	f8c4 8000 	str.w	r8, [r4]
 800c572:	e7e9      	b.n	800c548 <__submore+0x48>

0800c574 <__ascii_wctomb>:
 800c574:	b149      	cbz	r1, 800c58a <__ascii_wctomb+0x16>
 800c576:	2aff      	cmp	r2, #255	; 0xff
 800c578:	bf85      	ittet	hi
 800c57a:	238a      	movhi	r3, #138	; 0x8a
 800c57c:	6003      	strhi	r3, [r0, #0]
 800c57e:	700a      	strbls	r2, [r1, #0]
 800c580:	f04f 30ff 	movhi.w	r0, #4294967295
 800c584:	bf98      	it	ls
 800c586:	2001      	movls	r0, #1
 800c588:	4770      	bx	lr
 800c58a:	4608      	mov	r0, r1
 800c58c:	4770      	bx	lr
	...

0800c590 <__assert_func>:
 800c590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c592:	4614      	mov	r4, r2
 800c594:	461a      	mov	r2, r3
 800c596:	4b09      	ldr	r3, [pc, #36]	; (800c5bc <__assert_func+0x2c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4605      	mov	r5, r0
 800c59c:	68d8      	ldr	r0, [r3, #12]
 800c59e:	b14c      	cbz	r4, 800c5b4 <__assert_func+0x24>
 800c5a0:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <__assert_func+0x30>)
 800c5a2:	9100      	str	r1, [sp, #0]
 800c5a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a8:	4906      	ldr	r1, [pc, #24]	; (800c5c4 <__assert_func+0x34>)
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	f000 f9a6 	bl	800c8fc <fiprintf>
 800c5b0:	f000 fc46 	bl	800ce40 <abort>
 800c5b4:	4b04      	ldr	r3, [pc, #16]	; (800c5c8 <__assert_func+0x38>)
 800c5b6:	461c      	mov	r4, r3
 800c5b8:	e7f3      	b.n	800c5a2 <__assert_func+0x12>
 800c5ba:	bf00      	nop
 800c5bc:	20000058 	.word	0x20000058
 800c5c0:	0800d578 	.word	0x0800d578
 800c5c4:	0800d585 	.word	0x0800d585
 800c5c8:	0800d5b3 	.word	0x0800d5b3

0800c5cc <__sflush_r>:
 800c5cc:	898a      	ldrh	r2, [r1, #12]
 800c5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	0710      	lsls	r0, r2, #28
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	d458      	bmi.n	800c68c <__sflush_r+0xc0>
 800c5da:	684b      	ldr	r3, [r1, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dc05      	bgt.n	800c5ec <__sflush_r+0x20>
 800c5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dc02      	bgt.n	800c5ec <__sflush_r+0x20>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5ee:	2e00      	cmp	r6, #0
 800c5f0:	d0f9      	beq.n	800c5e6 <__sflush_r+0x1a>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5f8:	682f      	ldr	r7, [r5, #0]
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	d032      	beq.n	800c664 <__sflush_r+0x98>
 800c5fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	075a      	lsls	r2, r3, #29
 800c604:	d505      	bpl.n	800c612 <__sflush_r+0x46>
 800c606:	6863      	ldr	r3, [r4, #4]
 800c608:	1ac0      	subs	r0, r0, r3
 800c60a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c60c:	b10b      	cbz	r3, 800c612 <__sflush_r+0x46>
 800c60e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c610:	1ac0      	subs	r0, r0, r3
 800c612:	2300      	movs	r3, #0
 800c614:	4602      	mov	r2, r0
 800c616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c618:	6a21      	ldr	r1, [r4, #32]
 800c61a:	4628      	mov	r0, r5
 800c61c:	47b0      	blx	r6
 800c61e:	1c43      	adds	r3, r0, #1
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	d106      	bne.n	800c632 <__sflush_r+0x66>
 800c624:	6829      	ldr	r1, [r5, #0]
 800c626:	291d      	cmp	r1, #29
 800c628:	d82c      	bhi.n	800c684 <__sflush_r+0xb8>
 800c62a:	4a2a      	ldr	r2, [pc, #168]	; (800c6d4 <__sflush_r+0x108>)
 800c62c:	40ca      	lsrs	r2, r1
 800c62e:	07d6      	lsls	r6, r2, #31
 800c630:	d528      	bpl.n	800c684 <__sflush_r+0xb8>
 800c632:	2200      	movs	r2, #0
 800c634:	6062      	str	r2, [r4, #4]
 800c636:	04d9      	lsls	r1, r3, #19
 800c638:	6922      	ldr	r2, [r4, #16]
 800c63a:	6022      	str	r2, [r4, #0]
 800c63c:	d504      	bpl.n	800c648 <__sflush_r+0x7c>
 800c63e:	1c42      	adds	r2, r0, #1
 800c640:	d101      	bne.n	800c646 <__sflush_r+0x7a>
 800c642:	682b      	ldr	r3, [r5, #0]
 800c644:	b903      	cbnz	r3, 800c648 <__sflush_r+0x7c>
 800c646:	6560      	str	r0, [r4, #84]	; 0x54
 800c648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c64a:	602f      	str	r7, [r5, #0]
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d0ca      	beq.n	800c5e6 <__sflush_r+0x1a>
 800c650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c654:	4299      	cmp	r1, r3
 800c656:	d002      	beq.n	800c65e <__sflush_r+0x92>
 800c658:	4628      	mov	r0, r5
 800c65a:	f7ff f907 	bl	800b86c <_free_r>
 800c65e:	2000      	movs	r0, #0
 800c660:	6360      	str	r0, [r4, #52]	; 0x34
 800c662:	e7c1      	b.n	800c5e8 <__sflush_r+0x1c>
 800c664:	6a21      	ldr	r1, [r4, #32]
 800c666:	2301      	movs	r3, #1
 800c668:	4628      	mov	r0, r5
 800c66a:	47b0      	blx	r6
 800c66c:	1c41      	adds	r1, r0, #1
 800c66e:	d1c7      	bne.n	800c600 <__sflush_r+0x34>
 800c670:	682b      	ldr	r3, [r5, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d0c4      	beq.n	800c600 <__sflush_r+0x34>
 800c676:	2b1d      	cmp	r3, #29
 800c678:	d001      	beq.n	800c67e <__sflush_r+0xb2>
 800c67a:	2b16      	cmp	r3, #22
 800c67c:	d101      	bne.n	800c682 <__sflush_r+0xb6>
 800c67e:	602f      	str	r7, [r5, #0]
 800c680:	e7b1      	b.n	800c5e6 <__sflush_r+0x1a>
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c688:	81a3      	strh	r3, [r4, #12]
 800c68a:	e7ad      	b.n	800c5e8 <__sflush_r+0x1c>
 800c68c:	690f      	ldr	r7, [r1, #16]
 800c68e:	2f00      	cmp	r7, #0
 800c690:	d0a9      	beq.n	800c5e6 <__sflush_r+0x1a>
 800c692:	0793      	lsls	r3, r2, #30
 800c694:	680e      	ldr	r6, [r1, #0]
 800c696:	bf08      	it	eq
 800c698:	694b      	ldreq	r3, [r1, #20]
 800c69a:	600f      	str	r7, [r1, #0]
 800c69c:	bf18      	it	ne
 800c69e:	2300      	movne	r3, #0
 800c6a0:	eba6 0807 	sub.w	r8, r6, r7
 800c6a4:	608b      	str	r3, [r1, #8]
 800c6a6:	f1b8 0f00 	cmp.w	r8, #0
 800c6aa:	dd9c      	ble.n	800c5e6 <__sflush_r+0x1a>
 800c6ac:	6a21      	ldr	r1, [r4, #32]
 800c6ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6b0:	4643      	mov	r3, r8
 800c6b2:	463a      	mov	r2, r7
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	47b0      	blx	r6
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	dc06      	bgt.n	800c6ca <__sflush_r+0xfe>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	e78e      	b.n	800c5e8 <__sflush_r+0x1c>
 800c6ca:	4407      	add	r7, r0
 800c6cc:	eba8 0800 	sub.w	r8, r8, r0
 800c6d0:	e7e9      	b.n	800c6a6 <__sflush_r+0xda>
 800c6d2:	bf00      	nop
 800c6d4:	20400001 	.word	0x20400001

0800c6d8 <_fflush_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	690b      	ldr	r3, [r1, #16]
 800c6dc:	4605      	mov	r5, r0
 800c6de:	460c      	mov	r4, r1
 800c6e0:	b913      	cbnz	r3, 800c6e8 <_fflush_r+0x10>
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	b118      	cbz	r0, 800c6f2 <_fflush_r+0x1a>
 800c6ea:	6983      	ldr	r3, [r0, #24]
 800c6ec:	b90b      	cbnz	r3, 800c6f2 <_fflush_r+0x1a>
 800c6ee:	f000 f887 	bl	800c800 <__sinit>
 800c6f2:	4b14      	ldr	r3, [pc, #80]	; (800c744 <_fflush_r+0x6c>)
 800c6f4:	429c      	cmp	r4, r3
 800c6f6:	d11b      	bne.n	800c730 <_fflush_r+0x58>
 800c6f8:	686c      	ldr	r4, [r5, #4]
 800c6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d0ef      	beq.n	800c6e2 <_fflush_r+0xa>
 800c702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c704:	07d0      	lsls	r0, r2, #31
 800c706:	d404      	bmi.n	800c712 <_fflush_r+0x3a>
 800c708:	0599      	lsls	r1, r3, #22
 800c70a:	d402      	bmi.n	800c712 <_fflush_r+0x3a>
 800c70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c70e:	f000 f927 	bl	800c960 <__retarget_lock_acquire_recursive>
 800c712:	4628      	mov	r0, r5
 800c714:	4621      	mov	r1, r4
 800c716:	f7ff ff59 	bl	800c5cc <__sflush_r>
 800c71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c71c:	07da      	lsls	r2, r3, #31
 800c71e:	4605      	mov	r5, r0
 800c720:	d4e0      	bmi.n	800c6e4 <_fflush_r+0xc>
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	059b      	lsls	r3, r3, #22
 800c726:	d4dd      	bmi.n	800c6e4 <_fflush_r+0xc>
 800c728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c72a:	f000 f91a 	bl	800c962 <__retarget_lock_release_recursive>
 800c72e:	e7d9      	b.n	800c6e4 <_fflush_r+0xc>
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <_fflush_r+0x70>)
 800c732:	429c      	cmp	r4, r3
 800c734:	d101      	bne.n	800c73a <_fflush_r+0x62>
 800c736:	68ac      	ldr	r4, [r5, #8]
 800c738:	e7df      	b.n	800c6fa <_fflush_r+0x22>
 800c73a:	4b04      	ldr	r3, [pc, #16]	; (800c74c <_fflush_r+0x74>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	bf08      	it	eq
 800c740:	68ec      	ldreq	r4, [r5, #12]
 800c742:	e7da      	b.n	800c6fa <_fflush_r+0x22>
 800c744:	0800d5d4 	.word	0x0800d5d4
 800c748:	0800d5f4 	.word	0x0800d5f4
 800c74c:	0800d5b4 	.word	0x0800d5b4

0800c750 <std>:
 800c750:	2300      	movs	r3, #0
 800c752:	b510      	push	{r4, lr}
 800c754:	4604      	mov	r4, r0
 800c756:	e9c0 3300 	strd	r3, r3, [r0]
 800c75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c75e:	6083      	str	r3, [r0, #8]
 800c760:	8181      	strh	r1, [r0, #12]
 800c762:	6643      	str	r3, [r0, #100]	; 0x64
 800c764:	81c2      	strh	r2, [r0, #14]
 800c766:	6183      	str	r3, [r0, #24]
 800c768:	4619      	mov	r1, r3
 800c76a:	2208      	movs	r2, #8
 800c76c:	305c      	adds	r0, #92	; 0x5c
 800c76e:	f7fb fc6f 	bl	8008050 <memset>
 800c772:	4b05      	ldr	r3, [pc, #20]	; (800c788 <std+0x38>)
 800c774:	6263      	str	r3, [r4, #36]	; 0x24
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <std+0x3c>)
 800c778:	62a3      	str	r3, [r4, #40]	; 0x28
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <std+0x40>)
 800c77c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c77e:	4b05      	ldr	r3, [pc, #20]	; (800c794 <std+0x44>)
 800c780:	6224      	str	r4, [r4, #32]
 800c782:	6323      	str	r3, [r4, #48]	; 0x30
 800c784:	bd10      	pop	{r4, pc}
 800c786:	bf00      	nop
 800c788:	08008d95 	.word	0x08008d95
 800c78c:	08008dbb 	.word	0x08008dbb
 800c790:	08008df3 	.word	0x08008df3
 800c794:	08008e17 	.word	0x08008e17

0800c798 <_cleanup_r>:
 800c798:	4901      	ldr	r1, [pc, #4]	; (800c7a0 <_cleanup_r+0x8>)
 800c79a:	f000 b8c1 	b.w	800c920 <_fwalk_reent>
 800c79e:	bf00      	nop
 800c7a0:	0800c6d9 	.word	0x0800c6d9

0800c7a4 <__sfmoreglue>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	2268      	movs	r2, #104	; 0x68
 800c7a8:	1e4d      	subs	r5, r1, #1
 800c7aa:	4355      	muls	r5, r2
 800c7ac:	460e      	mov	r6, r1
 800c7ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7b2:	f7ff f8c7 	bl	800b944 <_malloc_r>
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	b140      	cbz	r0, 800c7cc <__sfmoreglue+0x28>
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c7c0:	300c      	adds	r0, #12
 800c7c2:	60a0      	str	r0, [r4, #8]
 800c7c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7c8:	f7fb fc42 	bl	8008050 <memset>
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}

0800c7d0 <__sfp_lock_acquire>:
 800c7d0:	4801      	ldr	r0, [pc, #4]	; (800c7d8 <__sfp_lock_acquire+0x8>)
 800c7d2:	f000 b8c5 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c7d6:	bf00      	nop
 800c7d8:	200008e1 	.word	0x200008e1

0800c7dc <__sfp_lock_release>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	; (800c7e4 <__sfp_lock_release+0x8>)
 800c7de:	f000 b8c0 	b.w	800c962 <__retarget_lock_release_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	200008e1 	.word	0x200008e1

0800c7e8 <__sinit_lock_acquire>:
 800c7e8:	4801      	ldr	r0, [pc, #4]	; (800c7f0 <__sinit_lock_acquire+0x8>)
 800c7ea:	f000 b8b9 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c7ee:	bf00      	nop
 800c7f0:	200008e2 	.word	0x200008e2

0800c7f4 <__sinit_lock_release>:
 800c7f4:	4801      	ldr	r0, [pc, #4]	; (800c7fc <__sinit_lock_release+0x8>)
 800c7f6:	f000 b8b4 	b.w	800c962 <__retarget_lock_release_recursive>
 800c7fa:	bf00      	nop
 800c7fc:	200008e2 	.word	0x200008e2

0800c800 <__sinit>:
 800c800:	b510      	push	{r4, lr}
 800c802:	4604      	mov	r4, r0
 800c804:	f7ff fff0 	bl	800c7e8 <__sinit_lock_acquire>
 800c808:	69a3      	ldr	r3, [r4, #24]
 800c80a:	b11b      	cbz	r3, 800c814 <__sinit+0x14>
 800c80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c810:	f7ff bff0 	b.w	800c7f4 <__sinit_lock_release>
 800c814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c818:	6523      	str	r3, [r4, #80]	; 0x50
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <__sinit+0x68>)
 800c81c:	4a13      	ldr	r2, [pc, #76]	; (800c86c <__sinit+0x6c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	62a2      	str	r2, [r4, #40]	; 0x28
 800c822:	42a3      	cmp	r3, r4
 800c824:	bf04      	itt	eq
 800c826:	2301      	moveq	r3, #1
 800c828:	61a3      	streq	r3, [r4, #24]
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 f820 	bl	800c870 <__sfp>
 800c830:	6060      	str	r0, [r4, #4]
 800c832:	4620      	mov	r0, r4
 800c834:	f000 f81c 	bl	800c870 <__sfp>
 800c838:	60a0      	str	r0, [r4, #8]
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 f818 	bl	800c870 <__sfp>
 800c840:	2200      	movs	r2, #0
 800c842:	60e0      	str	r0, [r4, #12]
 800c844:	2104      	movs	r1, #4
 800c846:	6860      	ldr	r0, [r4, #4]
 800c848:	f7ff ff82 	bl	800c750 <std>
 800c84c:	68a0      	ldr	r0, [r4, #8]
 800c84e:	2201      	movs	r2, #1
 800c850:	2109      	movs	r1, #9
 800c852:	f7ff ff7d 	bl	800c750 <std>
 800c856:	68e0      	ldr	r0, [r4, #12]
 800c858:	2202      	movs	r2, #2
 800c85a:	2112      	movs	r1, #18
 800c85c:	f7ff ff78 	bl	800c750 <std>
 800c860:	2301      	movs	r3, #1
 800c862:	61a3      	str	r3, [r4, #24]
 800c864:	e7d2      	b.n	800c80c <__sinit+0xc>
 800c866:	bf00      	nop
 800c868:	0800d25c 	.word	0x0800d25c
 800c86c:	0800c799 	.word	0x0800c799

0800c870 <__sfp>:
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c872:	4607      	mov	r7, r0
 800c874:	f7ff ffac 	bl	800c7d0 <__sfp_lock_acquire>
 800c878:	4b1e      	ldr	r3, [pc, #120]	; (800c8f4 <__sfp+0x84>)
 800c87a:	681e      	ldr	r6, [r3, #0]
 800c87c:	69b3      	ldr	r3, [r6, #24]
 800c87e:	b913      	cbnz	r3, 800c886 <__sfp+0x16>
 800c880:	4630      	mov	r0, r6
 800c882:	f7ff ffbd 	bl	800c800 <__sinit>
 800c886:	3648      	adds	r6, #72	; 0x48
 800c888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	d503      	bpl.n	800c898 <__sfp+0x28>
 800c890:	6833      	ldr	r3, [r6, #0]
 800c892:	b30b      	cbz	r3, 800c8d8 <__sfp+0x68>
 800c894:	6836      	ldr	r6, [r6, #0]
 800c896:	e7f7      	b.n	800c888 <__sfp+0x18>
 800c898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c89c:	b9d5      	cbnz	r5, 800c8d4 <__sfp+0x64>
 800c89e:	4b16      	ldr	r3, [pc, #88]	; (800c8f8 <__sfp+0x88>)
 800c8a0:	60e3      	str	r3, [r4, #12]
 800c8a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c8a8:	f000 f859 	bl	800c95e <__retarget_lock_init_recursive>
 800c8ac:	f7ff ff96 	bl	800c7dc <__sfp_lock_release>
 800c8b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8b8:	6025      	str	r5, [r4, #0]
 800c8ba:	61a5      	str	r5, [r4, #24]
 800c8bc:	2208      	movs	r2, #8
 800c8be:	4629      	mov	r1, r5
 800c8c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8c4:	f7fb fbc4 	bl	8008050 <memset>
 800c8c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d4:	3468      	adds	r4, #104	; 0x68
 800c8d6:	e7d9      	b.n	800c88c <__sfp+0x1c>
 800c8d8:	2104      	movs	r1, #4
 800c8da:	4638      	mov	r0, r7
 800c8dc:	f7ff ff62 	bl	800c7a4 <__sfmoreglue>
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	6030      	str	r0, [r6, #0]
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d1d5      	bne.n	800c894 <__sfp+0x24>
 800c8e8:	f7ff ff78 	bl	800c7dc <__sfp_lock_release>
 800c8ec:	230c      	movs	r3, #12
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	e7ee      	b.n	800c8d0 <__sfp+0x60>
 800c8f2:	bf00      	nop
 800c8f4:	0800d25c 	.word	0x0800d25c
 800c8f8:	ffff0001 	.word	0xffff0001

0800c8fc <fiprintf>:
 800c8fc:	b40e      	push	{r1, r2, r3}
 800c8fe:	b503      	push	{r0, r1, lr}
 800c900:	4601      	mov	r1, r0
 800c902:	ab03      	add	r3, sp, #12
 800c904:	4805      	ldr	r0, [pc, #20]	; (800c91c <fiprintf+0x20>)
 800c906:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	f000 f8a7 	bl	800ca60 <_vfiprintf_r>
 800c912:	b002      	add	sp, #8
 800c914:	f85d eb04 	ldr.w	lr, [sp], #4
 800c918:	b003      	add	sp, #12
 800c91a:	4770      	bx	lr
 800c91c:	20000058 	.word	0x20000058

0800c920 <_fwalk_reent>:
 800c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c924:	4606      	mov	r6, r0
 800c926:	4688      	mov	r8, r1
 800c928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c92c:	2700      	movs	r7, #0
 800c92e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c932:	f1b9 0901 	subs.w	r9, r9, #1
 800c936:	d505      	bpl.n	800c944 <_fwalk_reent+0x24>
 800c938:	6824      	ldr	r4, [r4, #0]
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	d1f7      	bne.n	800c92e <_fwalk_reent+0xe>
 800c93e:	4638      	mov	r0, r7
 800c940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c944:	89ab      	ldrh	r3, [r5, #12]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d907      	bls.n	800c95a <_fwalk_reent+0x3a>
 800c94a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c94e:	3301      	adds	r3, #1
 800c950:	d003      	beq.n	800c95a <_fwalk_reent+0x3a>
 800c952:	4629      	mov	r1, r5
 800c954:	4630      	mov	r0, r6
 800c956:	47c0      	blx	r8
 800c958:	4307      	orrs	r7, r0
 800c95a:	3568      	adds	r5, #104	; 0x68
 800c95c:	e7e9      	b.n	800c932 <_fwalk_reent+0x12>

0800c95e <__retarget_lock_init_recursive>:
 800c95e:	4770      	bx	lr

0800c960 <__retarget_lock_acquire_recursive>:
 800c960:	4770      	bx	lr

0800c962 <__retarget_lock_release_recursive>:
 800c962:	4770      	bx	lr

0800c964 <memmove>:
 800c964:	4288      	cmp	r0, r1
 800c966:	b510      	push	{r4, lr}
 800c968:	eb01 0402 	add.w	r4, r1, r2
 800c96c:	d902      	bls.n	800c974 <memmove+0x10>
 800c96e:	4284      	cmp	r4, r0
 800c970:	4623      	mov	r3, r4
 800c972:	d807      	bhi.n	800c984 <memmove+0x20>
 800c974:	1e43      	subs	r3, r0, #1
 800c976:	42a1      	cmp	r1, r4
 800c978:	d008      	beq.n	800c98c <memmove+0x28>
 800c97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c982:	e7f8      	b.n	800c976 <memmove+0x12>
 800c984:	4402      	add	r2, r0
 800c986:	4601      	mov	r1, r0
 800c988:	428a      	cmp	r2, r1
 800c98a:	d100      	bne.n	800c98e <memmove+0x2a>
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c996:	e7f7      	b.n	800c988 <memmove+0x24>

0800c998 <__malloc_lock>:
 800c998:	4801      	ldr	r0, [pc, #4]	; (800c9a0 <__malloc_lock+0x8>)
 800c99a:	f7ff bfe1 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c99e:	bf00      	nop
 800c9a0:	200008e0 	.word	0x200008e0

0800c9a4 <__malloc_unlock>:
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <__malloc_unlock+0x8>)
 800c9a6:	f7ff bfdc 	b.w	800c962 <__retarget_lock_release_recursive>
 800c9aa:	bf00      	nop
 800c9ac:	200008e0 	.word	0x200008e0

0800c9b0 <_realloc_r>:
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	4614      	mov	r4, r2
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	b921      	cbnz	r1, 800c9c6 <_realloc_r+0x16>
 800c9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	f7fe bfbf 	b.w	800b944 <_malloc_r>
 800c9c6:	b92a      	cbnz	r2, 800c9d4 <_realloc_r+0x24>
 800c9c8:	f7fe ff50 	bl	800b86c <_free_r>
 800c9cc:	4625      	mov	r5, r4
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d4:	f000 faa0 	bl	800cf18 <_malloc_usable_size_r>
 800c9d8:	4284      	cmp	r4, r0
 800c9da:	4607      	mov	r7, r0
 800c9dc:	d802      	bhi.n	800c9e4 <_realloc_r+0x34>
 800c9de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9e2:	d812      	bhi.n	800ca0a <_realloc_r+0x5a>
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	f7fe ffac 	bl	800b944 <_malloc_r>
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d0ed      	beq.n	800c9ce <_realloc_r+0x1e>
 800c9f2:	42bc      	cmp	r4, r7
 800c9f4:	4622      	mov	r2, r4
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	bf28      	it	cs
 800c9fa:	463a      	movcs	r2, r7
 800c9fc:	f7fb fb1a 	bl	8008034 <memcpy>
 800ca00:	4631      	mov	r1, r6
 800ca02:	4640      	mov	r0, r8
 800ca04:	f7fe ff32 	bl	800b86c <_free_r>
 800ca08:	e7e1      	b.n	800c9ce <_realloc_r+0x1e>
 800ca0a:	4635      	mov	r5, r6
 800ca0c:	e7df      	b.n	800c9ce <_realloc_r+0x1e>

0800ca0e <__sfputc_r>:
 800ca0e:	6893      	ldr	r3, [r2, #8]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	b410      	push	{r4}
 800ca16:	6093      	str	r3, [r2, #8]
 800ca18:	da08      	bge.n	800ca2c <__sfputc_r+0x1e>
 800ca1a:	6994      	ldr	r4, [r2, #24]
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	db01      	blt.n	800ca24 <__sfputc_r+0x16>
 800ca20:	290a      	cmp	r1, #10
 800ca22:	d103      	bne.n	800ca2c <__sfputc_r+0x1e>
 800ca24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca28:	f000 b94a 	b.w	800ccc0 <__swbuf_r>
 800ca2c:	6813      	ldr	r3, [r2, #0]
 800ca2e:	1c58      	adds	r0, r3, #1
 800ca30:	6010      	str	r0, [r2, #0]
 800ca32:	7019      	strb	r1, [r3, #0]
 800ca34:	4608      	mov	r0, r1
 800ca36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <__sfputs_r>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460f      	mov	r7, r1
 800ca42:	4614      	mov	r4, r2
 800ca44:	18d5      	adds	r5, r2, r3
 800ca46:	42ac      	cmp	r4, r5
 800ca48:	d101      	bne.n	800ca4e <__sfputs_r+0x12>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e007      	b.n	800ca5e <__sfputs_r+0x22>
 800ca4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca52:	463a      	mov	r2, r7
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7ff ffda 	bl	800ca0e <__sfputc_r>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d1f3      	bne.n	800ca46 <__sfputs_r+0xa>
 800ca5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca60 <_vfiprintf_r>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	460d      	mov	r5, r1
 800ca66:	b09d      	sub	sp, #116	; 0x74
 800ca68:	4614      	mov	r4, r2
 800ca6a:	4698      	mov	r8, r3
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	b118      	cbz	r0, 800ca78 <_vfiprintf_r+0x18>
 800ca70:	6983      	ldr	r3, [r0, #24]
 800ca72:	b90b      	cbnz	r3, 800ca78 <_vfiprintf_r+0x18>
 800ca74:	f7ff fec4 	bl	800c800 <__sinit>
 800ca78:	4b89      	ldr	r3, [pc, #548]	; (800cca0 <_vfiprintf_r+0x240>)
 800ca7a:	429d      	cmp	r5, r3
 800ca7c:	d11b      	bne.n	800cab6 <_vfiprintf_r+0x56>
 800ca7e:	6875      	ldr	r5, [r6, #4]
 800ca80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca82:	07d9      	lsls	r1, r3, #31
 800ca84:	d405      	bmi.n	800ca92 <_vfiprintf_r+0x32>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	059a      	lsls	r2, r3, #22
 800ca8a:	d402      	bmi.n	800ca92 <_vfiprintf_r+0x32>
 800ca8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8e:	f7ff ff67 	bl	800c960 <__retarget_lock_acquire_recursive>
 800ca92:	89ab      	ldrh	r3, [r5, #12]
 800ca94:	071b      	lsls	r3, r3, #28
 800ca96:	d501      	bpl.n	800ca9c <_vfiprintf_r+0x3c>
 800ca98:	692b      	ldr	r3, [r5, #16]
 800ca9a:	b9eb      	cbnz	r3, 800cad8 <_vfiprintf_r+0x78>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f000 f960 	bl	800cd64 <__swsetup_r>
 800caa4:	b1c0      	cbz	r0, 800cad8 <_vfiprintf_r+0x78>
 800caa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa8:	07dc      	lsls	r4, r3, #31
 800caaa:	d50e      	bpl.n	800caca <_vfiprintf_r+0x6a>
 800caac:	f04f 30ff 	mov.w	r0, #4294967295
 800cab0:	b01d      	add	sp, #116	; 0x74
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	4b7b      	ldr	r3, [pc, #492]	; (800cca4 <_vfiprintf_r+0x244>)
 800cab8:	429d      	cmp	r5, r3
 800caba:	d101      	bne.n	800cac0 <_vfiprintf_r+0x60>
 800cabc:	68b5      	ldr	r5, [r6, #8]
 800cabe:	e7df      	b.n	800ca80 <_vfiprintf_r+0x20>
 800cac0:	4b79      	ldr	r3, [pc, #484]	; (800cca8 <_vfiprintf_r+0x248>)
 800cac2:	429d      	cmp	r5, r3
 800cac4:	bf08      	it	eq
 800cac6:	68f5      	ldreq	r5, [r6, #12]
 800cac8:	e7da      	b.n	800ca80 <_vfiprintf_r+0x20>
 800caca:	89ab      	ldrh	r3, [r5, #12]
 800cacc:	0598      	lsls	r0, r3, #22
 800cace:	d4ed      	bmi.n	800caac <_vfiprintf_r+0x4c>
 800cad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cad2:	f7ff ff46 	bl	800c962 <__retarget_lock_release_recursive>
 800cad6:	e7e9      	b.n	800caac <_vfiprintf_r+0x4c>
 800cad8:	2300      	movs	r3, #0
 800cada:	9309      	str	r3, [sp, #36]	; 0x24
 800cadc:	2320      	movs	r3, #32
 800cade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae6:	2330      	movs	r3, #48	; 0x30
 800cae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ccac <_vfiprintf_r+0x24c>
 800caec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caf0:	f04f 0901 	mov.w	r9, #1
 800caf4:	4623      	mov	r3, r4
 800caf6:	469a      	mov	sl, r3
 800caf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cafc:	b10a      	cbz	r2, 800cb02 <_vfiprintf_r+0xa2>
 800cafe:	2a25      	cmp	r2, #37	; 0x25
 800cb00:	d1f9      	bne.n	800caf6 <_vfiprintf_r+0x96>
 800cb02:	ebba 0b04 	subs.w	fp, sl, r4
 800cb06:	d00b      	beq.n	800cb20 <_vfiprintf_r+0xc0>
 800cb08:	465b      	mov	r3, fp
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f7ff ff94 	bl	800ca3c <__sfputs_r>
 800cb14:	3001      	adds	r0, #1
 800cb16:	f000 80aa 	beq.w	800cc6e <_vfiprintf_r+0x20e>
 800cb1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb1c:	445a      	add	r2, fp
 800cb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb20:	f89a 3000 	ldrb.w	r3, [sl]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f000 80a2 	beq.w	800cc6e <_vfiprintf_r+0x20e>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb34:	f10a 0a01 	add.w	sl, sl, #1
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	9307      	str	r3, [sp, #28]
 800cb3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb40:	931a      	str	r3, [sp, #104]	; 0x68
 800cb42:	4654      	mov	r4, sl
 800cb44:	2205      	movs	r2, #5
 800cb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb4a:	4858      	ldr	r0, [pc, #352]	; (800ccac <_vfiprintf_r+0x24c>)
 800cb4c:	f7f3 fb80 	bl	8000250 <memchr>
 800cb50:	9a04      	ldr	r2, [sp, #16]
 800cb52:	b9d8      	cbnz	r0, 800cb8c <_vfiprintf_r+0x12c>
 800cb54:	06d1      	lsls	r1, r2, #27
 800cb56:	bf44      	itt	mi
 800cb58:	2320      	movmi	r3, #32
 800cb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5e:	0713      	lsls	r3, r2, #28
 800cb60:	bf44      	itt	mi
 800cb62:	232b      	movmi	r3, #43	; 0x2b
 800cb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb68:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6e:	d015      	beq.n	800cb9c <_vfiprintf_r+0x13c>
 800cb70:	9a07      	ldr	r2, [sp, #28]
 800cb72:	4654      	mov	r4, sl
 800cb74:	2000      	movs	r0, #0
 800cb76:	f04f 0c0a 	mov.w	ip, #10
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb80:	3b30      	subs	r3, #48	; 0x30
 800cb82:	2b09      	cmp	r3, #9
 800cb84:	d94e      	bls.n	800cc24 <_vfiprintf_r+0x1c4>
 800cb86:	b1b0      	cbz	r0, 800cbb6 <_vfiprintf_r+0x156>
 800cb88:	9207      	str	r2, [sp, #28]
 800cb8a:	e014      	b.n	800cbb6 <_vfiprintf_r+0x156>
 800cb8c:	eba0 0308 	sub.w	r3, r0, r8
 800cb90:	fa09 f303 	lsl.w	r3, r9, r3
 800cb94:	4313      	orrs	r3, r2
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	46a2      	mov	sl, r4
 800cb9a:	e7d2      	b.n	800cb42 <_vfiprintf_r+0xe2>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	1d19      	adds	r1, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	9103      	str	r1, [sp, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfbb      	ittet	lt
 800cba8:	425b      	neglt	r3, r3
 800cbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cbae:	9307      	strge	r3, [sp, #28]
 800cbb0:	9307      	strlt	r3, [sp, #28]
 800cbb2:	bfb8      	it	lt
 800cbb4:	9204      	strlt	r2, [sp, #16]
 800cbb6:	7823      	ldrb	r3, [r4, #0]
 800cbb8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbba:	d10c      	bne.n	800cbd6 <_vfiprintf_r+0x176>
 800cbbc:	7863      	ldrb	r3, [r4, #1]
 800cbbe:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc0:	d135      	bne.n	800cc2e <_vfiprintf_r+0x1ce>
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	1d1a      	adds	r2, r3, #4
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	9203      	str	r2, [sp, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	bfb8      	it	lt
 800cbce:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbd2:	3402      	adds	r4, #2
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccbc <_vfiprintf_r+0x25c>
 800cbda:	7821      	ldrb	r1, [r4, #0]
 800cbdc:	2203      	movs	r2, #3
 800cbde:	4650      	mov	r0, sl
 800cbe0:	f7f3 fb36 	bl	8000250 <memchr>
 800cbe4:	b140      	cbz	r0, 800cbf8 <_vfiprintf_r+0x198>
 800cbe6:	2340      	movs	r3, #64	; 0x40
 800cbe8:	eba0 000a 	sub.w	r0, r0, sl
 800cbec:	fa03 f000 	lsl.w	r0, r3, r0
 800cbf0:	9b04      	ldr	r3, [sp, #16]
 800cbf2:	4303      	orrs	r3, r0
 800cbf4:	3401      	adds	r4, #1
 800cbf6:	9304      	str	r3, [sp, #16]
 800cbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbfc:	482c      	ldr	r0, [pc, #176]	; (800ccb0 <_vfiprintf_r+0x250>)
 800cbfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc02:	2206      	movs	r2, #6
 800cc04:	f7f3 fb24 	bl	8000250 <memchr>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d03f      	beq.n	800cc8c <_vfiprintf_r+0x22c>
 800cc0c:	4b29      	ldr	r3, [pc, #164]	; (800ccb4 <_vfiprintf_r+0x254>)
 800cc0e:	bb1b      	cbnz	r3, 800cc58 <_vfiprintf_r+0x1f8>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	3307      	adds	r3, #7
 800cc14:	f023 0307 	bic.w	r3, r3, #7
 800cc18:	3308      	adds	r3, #8
 800cc1a:	9303      	str	r3, [sp, #12]
 800cc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1e:	443b      	add	r3, r7
 800cc20:	9309      	str	r3, [sp, #36]	; 0x24
 800cc22:	e767      	b.n	800caf4 <_vfiprintf_r+0x94>
 800cc24:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc28:	460c      	mov	r4, r1
 800cc2a:	2001      	movs	r0, #1
 800cc2c:	e7a5      	b.n	800cb7a <_vfiprintf_r+0x11a>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	3401      	adds	r4, #1
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	4619      	mov	r1, r3
 800cc36:	f04f 0c0a 	mov.w	ip, #10
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc40:	3a30      	subs	r2, #48	; 0x30
 800cc42:	2a09      	cmp	r2, #9
 800cc44:	d903      	bls.n	800cc4e <_vfiprintf_r+0x1ee>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0c5      	beq.n	800cbd6 <_vfiprintf_r+0x176>
 800cc4a:	9105      	str	r1, [sp, #20]
 800cc4c:	e7c3      	b.n	800cbd6 <_vfiprintf_r+0x176>
 800cc4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc52:	4604      	mov	r4, r0
 800cc54:	2301      	movs	r3, #1
 800cc56:	e7f0      	b.n	800cc3a <_vfiprintf_r+0x1da>
 800cc58:	ab03      	add	r3, sp, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4b16      	ldr	r3, [pc, #88]	; (800ccb8 <_vfiprintf_r+0x258>)
 800cc60:	a904      	add	r1, sp, #16
 800cc62:	4630      	mov	r0, r6
 800cc64:	f7fb fa8c 	bl	8008180 <_printf_float>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	1c78      	adds	r0, r7, #1
 800cc6c:	d1d6      	bne.n	800cc1c <_vfiprintf_r+0x1bc>
 800cc6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc70:	07d9      	lsls	r1, r3, #31
 800cc72:	d405      	bmi.n	800cc80 <_vfiprintf_r+0x220>
 800cc74:	89ab      	ldrh	r3, [r5, #12]
 800cc76:	059a      	lsls	r2, r3, #22
 800cc78:	d402      	bmi.n	800cc80 <_vfiprintf_r+0x220>
 800cc7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc7c:	f7ff fe71 	bl	800c962 <__retarget_lock_release_recursive>
 800cc80:	89ab      	ldrh	r3, [r5, #12]
 800cc82:	065b      	lsls	r3, r3, #25
 800cc84:	f53f af12 	bmi.w	800caac <_vfiprintf_r+0x4c>
 800cc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc8a:	e711      	b.n	800cab0 <_vfiprintf_r+0x50>
 800cc8c:	ab03      	add	r3, sp, #12
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	462a      	mov	r2, r5
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <_vfiprintf_r+0x258>)
 800cc94:	a904      	add	r1, sp, #16
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7fb fcfe 	bl	8008698 <_printf_i>
 800cc9c:	e7e4      	b.n	800cc68 <_vfiprintf_r+0x208>
 800cc9e:	bf00      	nop
 800cca0:	0800d5d4 	.word	0x0800d5d4
 800cca4:	0800d5f4 	.word	0x0800d5f4
 800cca8:	0800d5b4 	.word	0x0800d5b4
 800ccac:	0800d54c 	.word	0x0800d54c
 800ccb0:	0800d556 	.word	0x0800d556
 800ccb4:	08008181 	.word	0x08008181
 800ccb8:	0800ca3d 	.word	0x0800ca3d
 800ccbc:	0800d552 	.word	0x0800d552

0800ccc0 <__swbuf_r>:
 800ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc2:	460e      	mov	r6, r1
 800ccc4:	4614      	mov	r4, r2
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	b118      	cbz	r0, 800ccd2 <__swbuf_r+0x12>
 800ccca:	6983      	ldr	r3, [r0, #24]
 800cccc:	b90b      	cbnz	r3, 800ccd2 <__swbuf_r+0x12>
 800ccce:	f7ff fd97 	bl	800c800 <__sinit>
 800ccd2:	4b21      	ldr	r3, [pc, #132]	; (800cd58 <__swbuf_r+0x98>)
 800ccd4:	429c      	cmp	r4, r3
 800ccd6:	d12b      	bne.n	800cd30 <__swbuf_r+0x70>
 800ccd8:	686c      	ldr	r4, [r5, #4]
 800ccda:	69a3      	ldr	r3, [r4, #24]
 800ccdc:	60a3      	str	r3, [r4, #8]
 800ccde:	89a3      	ldrh	r3, [r4, #12]
 800cce0:	071a      	lsls	r2, r3, #28
 800cce2:	d52f      	bpl.n	800cd44 <__swbuf_r+0x84>
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	b36b      	cbz	r3, 800cd44 <__swbuf_r+0x84>
 800cce8:	6923      	ldr	r3, [r4, #16]
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	1ac0      	subs	r0, r0, r3
 800ccee:	6963      	ldr	r3, [r4, #20]
 800ccf0:	b2f6      	uxtb	r6, r6
 800ccf2:	4283      	cmp	r3, r0
 800ccf4:	4637      	mov	r7, r6
 800ccf6:	dc04      	bgt.n	800cd02 <__swbuf_r+0x42>
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f7ff fcec 	bl	800c6d8 <_fflush_r>
 800cd00:	bb30      	cbnz	r0, 800cd50 <__swbuf_r+0x90>
 800cd02:	68a3      	ldr	r3, [r4, #8]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	60a3      	str	r3, [r4, #8]
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	6022      	str	r2, [r4, #0]
 800cd0e:	701e      	strb	r6, [r3, #0]
 800cd10:	6963      	ldr	r3, [r4, #20]
 800cd12:	3001      	adds	r0, #1
 800cd14:	4283      	cmp	r3, r0
 800cd16:	d004      	beq.n	800cd22 <__swbuf_r+0x62>
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	07db      	lsls	r3, r3, #31
 800cd1c:	d506      	bpl.n	800cd2c <__swbuf_r+0x6c>
 800cd1e:	2e0a      	cmp	r6, #10
 800cd20:	d104      	bne.n	800cd2c <__swbuf_r+0x6c>
 800cd22:	4621      	mov	r1, r4
 800cd24:	4628      	mov	r0, r5
 800cd26:	f7ff fcd7 	bl	800c6d8 <_fflush_r>
 800cd2a:	b988      	cbnz	r0, 800cd50 <__swbuf_r+0x90>
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <__swbuf_r+0x9c>)
 800cd32:	429c      	cmp	r4, r3
 800cd34:	d101      	bne.n	800cd3a <__swbuf_r+0x7a>
 800cd36:	68ac      	ldr	r4, [r5, #8]
 800cd38:	e7cf      	b.n	800ccda <__swbuf_r+0x1a>
 800cd3a:	4b09      	ldr	r3, [pc, #36]	; (800cd60 <__swbuf_r+0xa0>)
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	bf08      	it	eq
 800cd40:	68ec      	ldreq	r4, [r5, #12]
 800cd42:	e7ca      	b.n	800ccda <__swbuf_r+0x1a>
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f000 f80c 	bl	800cd64 <__swsetup_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d0cb      	beq.n	800cce8 <__swbuf_r+0x28>
 800cd50:	f04f 37ff 	mov.w	r7, #4294967295
 800cd54:	e7ea      	b.n	800cd2c <__swbuf_r+0x6c>
 800cd56:	bf00      	nop
 800cd58:	0800d5d4 	.word	0x0800d5d4
 800cd5c:	0800d5f4 	.word	0x0800d5f4
 800cd60:	0800d5b4 	.word	0x0800d5b4

0800cd64 <__swsetup_r>:
 800cd64:	4b32      	ldr	r3, [pc, #200]	; (800ce30 <__swsetup_r+0xcc>)
 800cd66:	b570      	push	{r4, r5, r6, lr}
 800cd68:	681d      	ldr	r5, [r3, #0]
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	b125      	cbz	r5, 800cd7a <__swsetup_r+0x16>
 800cd70:	69ab      	ldr	r3, [r5, #24]
 800cd72:	b913      	cbnz	r3, 800cd7a <__swsetup_r+0x16>
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7ff fd43 	bl	800c800 <__sinit>
 800cd7a:	4b2e      	ldr	r3, [pc, #184]	; (800ce34 <__swsetup_r+0xd0>)
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	d10f      	bne.n	800cda0 <__swsetup_r+0x3c>
 800cd80:	686c      	ldr	r4, [r5, #4]
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd88:	0719      	lsls	r1, r3, #28
 800cd8a:	d42c      	bmi.n	800cde6 <__swsetup_r+0x82>
 800cd8c:	06dd      	lsls	r5, r3, #27
 800cd8e:	d411      	bmi.n	800cdb4 <__swsetup_r+0x50>
 800cd90:	2309      	movs	r3, #9
 800cd92:	6033      	str	r3, [r6, #0]
 800cd94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd98:	81a3      	strh	r3, [r4, #12]
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	e03e      	b.n	800ce1e <__swsetup_r+0xba>
 800cda0:	4b25      	ldr	r3, [pc, #148]	; (800ce38 <__swsetup_r+0xd4>)
 800cda2:	429c      	cmp	r4, r3
 800cda4:	d101      	bne.n	800cdaa <__swsetup_r+0x46>
 800cda6:	68ac      	ldr	r4, [r5, #8]
 800cda8:	e7eb      	b.n	800cd82 <__swsetup_r+0x1e>
 800cdaa:	4b24      	ldr	r3, [pc, #144]	; (800ce3c <__swsetup_r+0xd8>)
 800cdac:	429c      	cmp	r4, r3
 800cdae:	bf08      	it	eq
 800cdb0:	68ec      	ldreq	r4, [r5, #12]
 800cdb2:	e7e6      	b.n	800cd82 <__swsetup_r+0x1e>
 800cdb4:	0758      	lsls	r0, r3, #29
 800cdb6:	d512      	bpl.n	800cdde <__swsetup_r+0x7a>
 800cdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdba:	b141      	cbz	r1, 800cdce <__swsetup_r+0x6a>
 800cdbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	d002      	beq.n	800cdca <__swsetup_r+0x66>
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7fe fd51 	bl	800b86c <_free_r>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	6363      	str	r3, [r4, #52]	; 0x34
 800cdce:	89a3      	ldrh	r3, [r4, #12]
 800cdd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	6063      	str	r3, [r4, #4]
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	f043 0308 	orr.w	r3, r3, #8
 800cde4:	81a3      	strh	r3, [r4, #12]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	b94b      	cbnz	r3, 800cdfe <__swsetup_r+0x9a>
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdf4:	d003      	beq.n	800cdfe <__swsetup_r+0x9a>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f000 f84d 	bl	800ce98 <__smakebuf_r>
 800cdfe:	89a0      	ldrh	r0, [r4, #12]
 800ce00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce04:	f010 0301 	ands.w	r3, r0, #1
 800ce08:	d00a      	beq.n	800ce20 <__swsetup_r+0xbc>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60a3      	str	r3, [r4, #8]
 800ce0e:	6963      	ldr	r3, [r4, #20]
 800ce10:	425b      	negs	r3, r3
 800ce12:	61a3      	str	r3, [r4, #24]
 800ce14:	6923      	ldr	r3, [r4, #16]
 800ce16:	b943      	cbnz	r3, 800ce2a <__swsetup_r+0xc6>
 800ce18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce1c:	d1ba      	bne.n	800cd94 <__swsetup_r+0x30>
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	0781      	lsls	r1, r0, #30
 800ce22:	bf58      	it	pl
 800ce24:	6963      	ldrpl	r3, [r4, #20]
 800ce26:	60a3      	str	r3, [r4, #8]
 800ce28:	e7f4      	b.n	800ce14 <__swsetup_r+0xb0>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e7f7      	b.n	800ce1e <__swsetup_r+0xba>
 800ce2e:	bf00      	nop
 800ce30:	20000058 	.word	0x20000058
 800ce34:	0800d5d4 	.word	0x0800d5d4
 800ce38:	0800d5f4 	.word	0x0800d5f4
 800ce3c:	0800d5b4 	.word	0x0800d5b4

0800ce40 <abort>:
 800ce40:	b508      	push	{r3, lr}
 800ce42:	2006      	movs	r0, #6
 800ce44:	f000 f898 	bl	800cf78 <raise>
 800ce48:	2001      	movs	r0, #1
 800ce4a:	f7f5 fe3b 	bl	8002ac4 <_exit>

0800ce4e <__swhatbuf_r>:
 800ce4e:	b570      	push	{r4, r5, r6, lr}
 800ce50:	460e      	mov	r6, r1
 800ce52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce56:	2900      	cmp	r1, #0
 800ce58:	b096      	sub	sp, #88	; 0x58
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	461d      	mov	r5, r3
 800ce5e:	da08      	bge.n	800ce72 <__swhatbuf_r+0x24>
 800ce60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	602a      	str	r2, [r5, #0]
 800ce68:	061a      	lsls	r2, r3, #24
 800ce6a:	d410      	bmi.n	800ce8e <__swhatbuf_r+0x40>
 800ce6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce70:	e00e      	b.n	800ce90 <__swhatbuf_r+0x42>
 800ce72:	466a      	mov	r2, sp
 800ce74:	f000 f89c 	bl	800cfb0 <_fstat_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	dbf1      	blt.n	800ce60 <__swhatbuf_r+0x12>
 800ce7c:	9a01      	ldr	r2, [sp, #4]
 800ce7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce86:	425a      	negs	r2, r3
 800ce88:	415a      	adcs	r2, r3
 800ce8a:	602a      	str	r2, [r5, #0]
 800ce8c:	e7ee      	b.n	800ce6c <__swhatbuf_r+0x1e>
 800ce8e:	2340      	movs	r3, #64	; 0x40
 800ce90:	2000      	movs	r0, #0
 800ce92:	6023      	str	r3, [r4, #0]
 800ce94:	b016      	add	sp, #88	; 0x58
 800ce96:	bd70      	pop	{r4, r5, r6, pc}

0800ce98 <__smakebuf_r>:
 800ce98:	898b      	ldrh	r3, [r1, #12]
 800ce9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce9c:	079d      	lsls	r5, r3, #30
 800ce9e:	4606      	mov	r6, r0
 800cea0:	460c      	mov	r4, r1
 800cea2:	d507      	bpl.n	800ceb4 <__smakebuf_r+0x1c>
 800cea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	2301      	movs	r3, #1
 800ceae:	6163      	str	r3, [r4, #20]
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd70      	pop	{r4, r5, r6, pc}
 800ceb4:	ab01      	add	r3, sp, #4
 800ceb6:	466a      	mov	r2, sp
 800ceb8:	f7ff ffc9 	bl	800ce4e <__swhatbuf_r>
 800cebc:	9900      	ldr	r1, [sp, #0]
 800cebe:	4605      	mov	r5, r0
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7fe fd3f 	bl	800b944 <_malloc_r>
 800cec6:	b948      	cbnz	r0, 800cedc <__smakebuf_r+0x44>
 800cec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cecc:	059a      	lsls	r2, r3, #22
 800cece:	d4ef      	bmi.n	800ceb0 <__smakebuf_r+0x18>
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	f043 0302 	orr.w	r3, r3, #2
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	e7e3      	b.n	800cea4 <__smakebuf_r+0xc>
 800cedc:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <__smakebuf_r+0x7c>)
 800cede:	62b3      	str	r3, [r6, #40]	; 0x28
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	6020      	str	r0, [r4, #0]
 800cee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee8:	81a3      	strh	r3, [r4, #12]
 800ceea:	9b00      	ldr	r3, [sp, #0]
 800ceec:	6163      	str	r3, [r4, #20]
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	6120      	str	r0, [r4, #16]
 800cef2:	b15b      	cbz	r3, 800cf0c <__smakebuf_r+0x74>
 800cef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cef8:	4630      	mov	r0, r6
 800cefa:	f000 f86b 	bl	800cfd4 <_isatty_r>
 800cefe:	b128      	cbz	r0, 800cf0c <__smakebuf_r+0x74>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	f043 0301 	orr.w	r3, r3, #1
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	89a0      	ldrh	r0, [r4, #12]
 800cf0e:	4305      	orrs	r5, r0
 800cf10:	81a5      	strh	r5, [r4, #12]
 800cf12:	e7cd      	b.n	800ceb0 <__smakebuf_r+0x18>
 800cf14:	0800c799 	.word	0x0800c799

0800cf18 <_malloc_usable_size_r>:
 800cf18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf1c:	1f18      	subs	r0, r3, #4
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	bfbc      	itt	lt
 800cf22:	580b      	ldrlt	r3, [r1, r0]
 800cf24:	18c0      	addlt	r0, r0, r3
 800cf26:	4770      	bx	lr

0800cf28 <_raise_r>:
 800cf28:	291f      	cmp	r1, #31
 800cf2a:	b538      	push	{r3, r4, r5, lr}
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	d904      	bls.n	800cf3c <_raise_r+0x14>
 800cf32:	2316      	movs	r3, #22
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf3e:	b112      	cbz	r2, 800cf46 <_raise_r+0x1e>
 800cf40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf44:	b94b      	cbnz	r3, 800cf5a <_raise_r+0x32>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 f830 	bl	800cfac <_getpid_r>
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4601      	mov	r1, r0
 800cf50:	4620      	mov	r0, r4
 800cf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf56:	f000 b817 	b.w	800cf88 <_kill_r>
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d00a      	beq.n	800cf74 <_raise_r+0x4c>
 800cf5e:	1c59      	adds	r1, r3, #1
 800cf60:	d103      	bne.n	800cf6a <_raise_r+0x42>
 800cf62:	2316      	movs	r3, #22
 800cf64:	6003      	str	r3, [r0, #0]
 800cf66:	2001      	movs	r0, #1
 800cf68:	e7e7      	b.n	800cf3a <_raise_r+0x12>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf70:	4628      	mov	r0, r5
 800cf72:	4798      	blx	r3
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7e0      	b.n	800cf3a <_raise_r+0x12>

0800cf78 <raise>:
 800cf78:	4b02      	ldr	r3, [pc, #8]	; (800cf84 <raise+0xc>)
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	6818      	ldr	r0, [r3, #0]
 800cf7e:	f7ff bfd3 	b.w	800cf28 <_raise_r>
 800cf82:	bf00      	nop
 800cf84:	20000058 	.word	0x20000058

0800cf88 <_kill_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d07      	ldr	r5, [pc, #28]	; (800cfa8 <_kill_r+0x20>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	4611      	mov	r1, r2
 800cf94:	602b      	str	r3, [r5, #0]
 800cf96:	f7f5 fd85 	bl	8002aa4 <_kill>
 800cf9a:	1c43      	adds	r3, r0, #1
 800cf9c:	d102      	bne.n	800cfa4 <_kill_r+0x1c>
 800cf9e:	682b      	ldr	r3, [r5, #0]
 800cfa0:	b103      	cbz	r3, 800cfa4 <_kill_r+0x1c>
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	bd38      	pop	{r3, r4, r5, pc}
 800cfa6:	bf00      	nop
 800cfa8:	200008dc 	.word	0x200008dc

0800cfac <_getpid_r>:
 800cfac:	f7f5 bd72 	b.w	8002a94 <_getpid>

0800cfb0 <_fstat_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	; (800cfd0 <_fstat_r+0x20>)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	4608      	mov	r0, r1
 800cfba:	4611      	mov	r1, r2
 800cfbc:	602b      	str	r3, [r5, #0]
 800cfbe:	f7f5 fdd0 	bl	8002b62 <_fstat>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	d102      	bne.n	800cfcc <_fstat_r+0x1c>
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	b103      	cbz	r3, 800cfcc <_fstat_r+0x1c>
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	bd38      	pop	{r3, r4, r5, pc}
 800cfce:	bf00      	nop
 800cfd0:	200008dc 	.word	0x200008dc

0800cfd4 <_isatty_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d06      	ldr	r5, [pc, #24]	; (800cff0 <_isatty_r+0x1c>)
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4608      	mov	r0, r1
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	f7f5 fdcf 	bl	8002b82 <_isatty>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_isatty_r+0x1a>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_isatty_r+0x1a>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	200008dc 	.word	0x200008dc

0800cff4 <_init>:
 800cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff6:	bf00      	nop
 800cff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffa:	bc08      	pop	{r3}
 800cffc:	469e      	mov	lr, r3
 800cffe:	4770      	bx	lr

0800d000 <_fini>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr
